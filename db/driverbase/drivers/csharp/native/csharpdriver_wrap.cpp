/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.9
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGCSHARP


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_djonwrapper(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_djonwrapper(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_djonwrapper(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } else


#include <string>


#include <stdexcept>


#include <vector>
#include <algorithm>
#include <stdexcept>


#include "bsonarrayobj.h"
#include "bson.h"
#include "bsonobj.h"
#include "bsonparser.h"
#include "filterdefs.h"
#include "bsonutil.h"
#include "djondbconnection.h"
#include "djondbcursor.h"
#include "djondbconnectionmanager.h"
#include "djondb_client.h"

SWIGINTERN std::vector< BSONObj * > *new_std_vector_Sl_BSONObj_Sm__Sg___SWIG_2(int capacity){
        std::vector< BSONObj * >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< BSONObj * >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN BSONObj *std_vector_Sl_BSONObj_Sm__Sg__getitemcopy(std::vector< BSONObj * > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< BSONObj * >::const_reference std_vector_Sl_BSONObj_Sm__Sg__getitem(std::vector< BSONObj * > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_BSONObj_Sm__Sg__setitem(std::vector< BSONObj * > *self,int index,BSONObj *const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_BSONObj_Sm__Sg__AddRange(std::vector< BSONObj * > *self,std::vector< BSONObj * > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< BSONObj * > *std_vector_Sl_BSONObj_Sm__Sg__GetRange(std::vector< BSONObj * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< BSONObj * >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_BSONObj_Sm__Sg__Insert(std::vector< BSONObj * > *self,int index,BSONObj *const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_BSONObj_Sm__Sg__InsertRange(std::vector< BSONObj * > *self,int index,std::vector< BSONObj * > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_BSONObj_Sm__Sg__RemoveAt(std::vector< BSONObj * > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_BSONObj_Sm__Sg__RemoveRange(std::vector< BSONObj * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< BSONObj * > *std_vector_Sl_BSONObj_Sm__Sg__Repeat(BSONObj *const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< BSONObj * >(count, value);
      }
SWIGINTERN void std_vector_Sl_BSONObj_Sm__Sg__Reverse__SWIG_0(std::vector< BSONObj * > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_BSONObj_Sm__Sg__Reverse__SWIG_1(std::vector< BSONObj * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_BSONObj_Sm__Sg__SetRange(std::vector< BSONObj * > *self,int index,std::vector< BSONObj * > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_BSONObj_Sm__Sg__Contains(std::vector< BSONObj * > *self,BSONObj *const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_BSONObj_Sm__Sg__IndexOf(std::vector< BSONObj * > *self,BSONObj *const &value){
        int index = -1;
        std::vector< BSONObj * >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_BSONObj_Sm__Sg__LastIndexOf(std::vector< BSONObj * > *self,BSONObj *const &value){
        int index = -1;
        std::vector< BSONObj * >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_BSONObj_Sm__Sg__Remove(std::vector< BSONObj * > *self,BSONObj *const &value){
        std::vector< BSONObj * >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
	  return true;
        }
        return false;
      }
SWIGINTERN std::vector< std::string > *new_std_vector_Sl_std_string_Sg___SWIG_2(int capacity){
        std::vector< std::string >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< std::string >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN std::string std_vector_Sl_std_string_Sg__getitemcopy(std::vector< std::string > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< std::string >::const_reference std_vector_Sl_std_string_Sg__getitem(std::vector< std::string > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__setitem(std::vector< std::string > *self,int index,std::string const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__AddRange(std::vector< std::string > *self,std::vector< std::string > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< std::string > *std_vector_Sl_std_string_Sg__GetRange(std::vector< std::string > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< std::string >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__Insert(std::vector< std::string > *self,int index,std::string const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__InsertRange(std::vector< std::string > *self,int index,std::vector< std::string > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__RemoveAt(std::vector< std::string > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__RemoveRange(std::vector< std::string > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< std::string > *std_vector_Sl_std_string_Sg__Repeat(std::string const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< std::string >(count, value);
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__Reverse__SWIG_0(std::vector< std::string > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__Reverse__SWIG_1(std::vector< std::string > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__SetRange(std::vector< std::string > *self,int index,std::vector< std::string > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_std_string_Sg__Contains(std::vector< std::string > *self,std::string const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_std_string_Sg__IndexOf(std::vector< std::string > *self,std::string const &value){
        int index = -1;
        std::vector< std::string >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_std_string_Sg__LastIndexOf(std::vector< std::string > *self,std::string const &value){
        int index = -1;
        std::vector< std::string >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_std_string_Sg__Remove(std::vector< std::string > *self,std::string const &value){
        std::vector< std::string >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
	  return true;
        }
        return false;
      }

#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void SWIGSTDCALL CSharp_BSONObjVectorPtr_Clear(void * jarg1) {
  std::vector< BSONObj * > *arg1 = (std::vector< BSONObj * > *) 0 ;
  
  arg1 = (std::vector< BSONObj * > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_BSONObjVectorPtr_Add(void * jarg1, void * jarg2) {
  std::vector< BSONObj * > *arg1 = (std::vector< BSONObj * > *) 0 ;
  BSONObj **arg2 = 0 ;
  BSONObj *temp2 = 0 ;
  
  arg1 = (std::vector< BSONObj * > *)jarg1; 
  temp2 = (BSONObj *)jarg2;
  arg2 = (BSONObj **)&temp2; 
  (arg1)->push_back((BSONObj *const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_BSONObjVectorPtr_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< BSONObj * > *arg1 = (std::vector< BSONObj * > *) 0 ;
  std::vector< BSONObj * >::size_type result;
  
  arg1 = (std::vector< BSONObj * > *)jarg1; 
  result = ((std::vector< BSONObj * > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_BSONObjVectorPtr_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< BSONObj * > *arg1 = (std::vector< BSONObj * > *) 0 ;
  std::vector< BSONObj * >::size_type result;
  
  arg1 = (std::vector< BSONObj * > *)jarg1; 
  result = ((std::vector< BSONObj * > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BSONObjVectorPtr_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< BSONObj * > *arg1 = (std::vector< BSONObj * > *) 0 ;
  std::vector< BSONObj * >::size_type arg2 ;
  
  arg1 = (std::vector< BSONObj * > *)jarg1; 
  arg2 = (std::vector< BSONObj * >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_BSONObjVectorPtr__SWIG_0() {
  void * jresult ;
  std::vector< BSONObj * > *result = 0 ;
  
  result = (std::vector< BSONObj * > *)new std::vector< BSONObj * >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_BSONObjVectorPtr__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< BSONObj * > *arg1 = 0 ;
  std::vector< BSONObj * > *result = 0 ;
  
  arg1 = (std::vector< BSONObj * > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< BSONObj * > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< BSONObj * > *)new std::vector< BSONObj * >((std::vector< BSONObj * > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_BSONObjVectorPtr__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< BSONObj * > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< BSONObj * > *)new_std_vector_Sl_BSONObj_Sm__Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BSONObjVectorPtr_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< BSONObj * > *arg1 = (std::vector< BSONObj * > *) 0 ;
  int arg2 ;
  BSONObj *result = 0 ;
  
  arg1 = (std::vector< BSONObj * > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (BSONObj *)std_vector_Sl_BSONObj_Sm__Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BSONObjVectorPtr_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< BSONObj * > *arg1 = (std::vector< BSONObj * > *) 0 ;
  int arg2 ;
  BSONObj **result = 0 ;
  
  arg1 = (std::vector< BSONObj * > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (BSONObj **) &std_vector_Sl_BSONObj_Sm__Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)*result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BSONObjVectorPtr_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< BSONObj * > *arg1 = (std::vector< BSONObj * > *) 0 ;
  int arg2 ;
  BSONObj **arg3 = 0 ;
  BSONObj *temp3 = 0 ;
  
  arg1 = (std::vector< BSONObj * > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (BSONObj *)jarg3;
  arg3 = (BSONObj **)&temp3; 
  try {
    std_vector_Sl_BSONObj_Sm__Sg__setitem(arg1,arg2,(BSONObj *const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_BSONObjVectorPtr_AddRange(void * jarg1, void * jarg2) {
  std::vector< BSONObj * > *arg1 = (std::vector< BSONObj * > *) 0 ;
  std::vector< BSONObj * > *arg2 = 0 ;
  
  arg1 = (std::vector< BSONObj * > *)jarg1; 
  arg2 = (std::vector< BSONObj * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< BSONObj * > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_BSONObj_Sm__Sg__AddRange(arg1,(std::vector< BSONObj * > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BSONObjVectorPtr_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< BSONObj * > *arg1 = (std::vector< BSONObj * > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< BSONObj * > *result = 0 ;
  
  arg1 = (std::vector< BSONObj * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< BSONObj * > *)std_vector_Sl_BSONObj_Sm__Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BSONObjVectorPtr_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< BSONObj * > *arg1 = (std::vector< BSONObj * > *) 0 ;
  int arg2 ;
  BSONObj **arg3 = 0 ;
  BSONObj *temp3 = 0 ;
  
  arg1 = (std::vector< BSONObj * > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (BSONObj *)jarg3;
  arg3 = (BSONObj **)&temp3; 
  try {
    std_vector_Sl_BSONObj_Sm__Sg__Insert(arg1,arg2,(BSONObj *const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_BSONObjVectorPtr_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< BSONObj * > *arg1 = (std::vector< BSONObj * > *) 0 ;
  int arg2 ;
  std::vector< BSONObj * > *arg3 = 0 ;
  
  arg1 = (std::vector< BSONObj * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< BSONObj * > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< BSONObj * > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_BSONObj_Sm__Sg__InsertRange(arg1,arg2,(std::vector< BSONObj * > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_BSONObjVectorPtr_RemoveAt(void * jarg1, int jarg2) {
  std::vector< BSONObj * > *arg1 = (std::vector< BSONObj * > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< BSONObj * > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_BSONObj_Sm__Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_BSONObjVectorPtr_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< BSONObj * > *arg1 = (std::vector< BSONObj * > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< BSONObj * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_BSONObj_Sm__Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BSONObjVectorPtr_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  BSONObj **arg1 = 0 ;
  int arg2 ;
  BSONObj *temp1 = 0 ;
  std::vector< BSONObj * > *result = 0 ;
  
  temp1 = (BSONObj *)jarg1;
  arg1 = (BSONObj **)&temp1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< BSONObj * > *)std_vector_Sl_BSONObj_Sm__Sg__Repeat((BSONObj *const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BSONObjVectorPtr_Reverse__SWIG_0(void * jarg1) {
  std::vector< BSONObj * > *arg1 = (std::vector< BSONObj * > *) 0 ;
  
  arg1 = (std::vector< BSONObj * > *)jarg1; 
  std_vector_Sl_BSONObj_Sm__Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BSONObjVectorPtr_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< BSONObj * > *arg1 = (std::vector< BSONObj * > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< BSONObj * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_BSONObj_Sm__Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_BSONObjVectorPtr_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< BSONObj * > *arg1 = (std::vector< BSONObj * > *) 0 ;
  int arg2 ;
  std::vector< BSONObj * > *arg3 = 0 ;
  
  arg1 = (std::vector< BSONObj * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< BSONObj * > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< BSONObj * > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_BSONObj_Sm__Sg__SetRange(arg1,arg2,(std::vector< BSONObj * > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BSONObjVectorPtr_Contains(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::vector< BSONObj * > *arg1 = (std::vector< BSONObj * > *) 0 ;
  BSONObj **arg2 = 0 ;
  BSONObj *temp2 = 0 ;
  bool result;
  
  arg1 = (std::vector< BSONObj * > *)jarg1; 
  temp2 = (BSONObj *)jarg2;
  arg2 = (BSONObj **)&temp2; 
  result = (bool)std_vector_Sl_BSONObj_Sm__Sg__Contains(arg1,(BSONObj *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BSONObjVectorPtr_IndexOf(void * jarg1, void * jarg2) {
  int jresult ;
  std::vector< BSONObj * > *arg1 = (std::vector< BSONObj * > *) 0 ;
  BSONObj **arg2 = 0 ;
  BSONObj *temp2 = 0 ;
  int result;
  
  arg1 = (std::vector< BSONObj * > *)jarg1; 
  temp2 = (BSONObj *)jarg2;
  arg2 = (BSONObj **)&temp2; 
  result = (int)std_vector_Sl_BSONObj_Sm__Sg__IndexOf(arg1,(BSONObj *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BSONObjVectorPtr_LastIndexOf(void * jarg1, void * jarg2) {
  int jresult ;
  std::vector< BSONObj * > *arg1 = (std::vector< BSONObj * > *) 0 ;
  BSONObj **arg2 = 0 ;
  BSONObj *temp2 = 0 ;
  int result;
  
  arg1 = (std::vector< BSONObj * > *)jarg1; 
  temp2 = (BSONObj *)jarg2;
  arg2 = (BSONObj **)&temp2; 
  result = (int)std_vector_Sl_BSONObj_Sm__Sg__LastIndexOf(arg1,(BSONObj *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BSONObjVectorPtr_Remove(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::vector< BSONObj * > *arg1 = (std::vector< BSONObj * > *) 0 ;
  BSONObj **arg2 = 0 ;
  BSONObj *temp2 = 0 ;
  bool result;
  
  arg1 = (std::vector< BSONObj * > *)jarg1; 
  temp2 = (BSONObj *)jarg2;
  arg2 = (BSONObj **)&temp2; 
  result = (bool)std_vector_Sl_BSONObj_Sm__Sg__Remove(arg1,(BSONObj *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_BSONObjVectorPtr(void * jarg1) {
  std::vector< BSONObj * > *arg1 = (std::vector< BSONObj * > *) 0 ;
  
  arg1 = (std::vector< BSONObj * > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringVector_Clear(void * jarg1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringVector_Add(void * jarg1, char * jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->push_back((std::string const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_StringVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  result = ((std::vector< std::string > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_StringVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  result = ((std::vector< std::string > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (std::vector< std::string >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_StringVector__SWIG_0() {
  void * jresult ;
  std::vector< std::string > *result = 0 ;
  
  result = (std::vector< std::string > *)new std::vector< std::string >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_StringVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< std::string > *arg1 = 0 ;
  std::vector< std::string > *result = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< std::string > *)new std::vector< std::string >((std::vector< std::string > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_StringVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< std::string > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< std::string > *)new_std_vector_Sl_std_string_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_StringVector_getitemcopy(void * jarg1, int jarg2) {
  char * jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::string result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_std_string_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_StringVector_getitem(void * jarg1, int jarg2) {
  char * jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::string *result = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::string *) &std_vector_Sl_std_string_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringVector_setitem(void * jarg1, int jarg2, char * jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  try {
    std_vector_Sl_std_string_Sg__setitem(arg1,arg2,(std::string const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (std::vector< std::string > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_std_string_Sg__AddRange(arg1,(std::vector< std::string > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StringVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< std::string > *result = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< std::string > *)std_vector_Sl_std_string_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringVector_Insert(void * jarg1, int jarg2, char * jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  try {
    std_vector_Sl_std_string_Sg__Insert(arg1,arg2,(std::string const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string > *arg3 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< std::string > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_std_string_Sg__InsertRange(arg1,arg2,(std::vector< std::string > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_std_string_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_std_string_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StringVector_Repeat(char * jarg1, int jarg2) {
  void * jresult ;
  std::string *arg1 = 0 ;
  int arg2 ;
  std::vector< std::string > *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::string > *)std_vector_Sl_std_string_Sg__Repeat((std::string const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  std_vector_Sl_std_string_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_std_string_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string > *arg3 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< std::string > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_std_string_Sg__SetRange(arg1,arg2,(std::vector< std::string > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StringVector_Contains(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)std_vector_Sl_std_string_Sg__Contains(arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StringVector_IndexOf(void * jarg1, char * jarg2) {
  int jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (int)std_vector_Sl_std_string_Sg__IndexOf(arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StringVector_LastIndexOf(void * jarg1, char * jarg2) {
  int jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (int)std_vector_Sl_std_string_Sg__LastIndexOf(arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StringVector_Remove(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)std_vector_Sl_std_string_Sg__Remove(arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_StringVector(void * jarg1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_BSONArrayObj__SWIG_0() {
  void * jresult ;
  BSONArrayObj *result = 0 ;
  
  result = (BSONArrayObj *)new BSONArrayObj();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_BSONArrayObj(void * jarg1) {
  BSONArrayObj *arg1 = (BSONArrayObj *) 0 ;
  
  arg1 = (BSONArrayObj *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_BSONArrayObj__SWIG_1(void * jarg1) {
  void * jresult ;
  BSONArrayObj *arg1 = 0 ;
  BSONArrayObj *result = 0 ;
  
  arg1 = (BSONArrayObj *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BSONArrayObj const & type is null", 0);
    return 0;
  } 
  result = (BSONArrayObj *)new BSONArrayObj((BSONArrayObj const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BSONArrayObj_length(void * jarg1) {
  int jresult ;
  BSONArrayObj *arg1 = (BSONArrayObj *) 0 ;
  __int32 result;
  
  arg1 = (BSONArrayObj *)jarg1; 
  result = ((BSONArrayObj const *)arg1)->length();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BSONArrayObj_add(void * jarg1, void * jarg2) {
  BSONArrayObj *arg1 = (BSONArrayObj *) 0 ;
  BSONObj *arg2 = 0 ;
  
  arg1 = (BSONArrayObj *)jarg1; 
  arg2 = (BSONObj *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BSONObj const & type is null", 0);
    return ;
  } 
  (arg1)->add((BSONObj const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BSONArrayObj_addAll(void * jarg1, void * jarg2) {
  BSONArrayObj *arg1 = (BSONArrayObj *) 0 ;
  BSONArrayObj *arg2 = 0 ;
  
  arg1 = (BSONArrayObj *)jarg1; 
  arg2 = (BSONArrayObj *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BSONArrayObj const & type is null", 0);
    return ;
  } 
  (arg1)->addAll((BSONArrayObj const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BSONArrayObj_get(void * jarg1, int jarg2) {
  void * jresult ;
  BSONArrayObj *arg1 = (BSONArrayObj *) 0 ;
  __int32 arg2 ;
  BSONObj *result = 0 ;
  
  arg1 = (BSONArrayObj *)jarg1; 
  arg2 = (__int32)jarg2; 
  result = (BSONObj *)((BSONArrayObj const *)arg1)->get(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_BSONArrayObj_toChar(void * jarg1) {
  char * jresult ;
  BSONArrayObj *arg1 = (BSONArrayObj *) 0 ;
  char *result = 0 ;
  
  arg1 = (BSONArrayObj *)jarg1; 
  result = (char *)((BSONArrayObj const *)arg1)->toChar();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BSONArrayObj_select(void * jarg1, char * jarg2) {
  void * jresult ;
  BSONArrayObj *arg1 = (BSONArrayObj *) 0 ;
  char *arg2 = (char *) 0 ;
  BSONArrayObj *result = 0 ;
  
  arg1 = (BSONArrayObj *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (BSONArrayObj *)((BSONArrayObj const *)arg1)->select((char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BSONArrayObj_begin__SWIG_0(void * jarg1) {
  void * jresult ;
  BSONArrayObj *arg1 = (BSONArrayObj *) 0 ;
  SwigValueWrapper< std::vector< BSONObj * >::iterator > result;
  
  arg1 = (BSONArrayObj *)jarg1; 
  result = (arg1)->begin();
  jresult = new BSONArrayObj::iterator((const BSONArrayObj::iterator &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BSONArrayObj_end__SWIG_0(void * jarg1) {
  void * jresult ;
  BSONArrayObj *arg1 = (BSONArrayObj *) 0 ;
  SwigValueWrapper< std::vector< BSONObj * >::iterator > result;
  
  arg1 = (BSONArrayObj *)jarg1; 
  result = (arg1)->end();
  jresult = new BSONArrayObj::iterator((const BSONArrayObj::iterator &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_BSONObj__SWIG_0() {
  void * jresult ;
  BSONObj *result = 0 ;
  
  result = (BSONObj *)new BSONObj();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_BSONObj__SWIG_1(void * jarg1) {
  void * jresult ;
  BSONObj *arg1 = 0 ;
  BSONObj *result = 0 ;
  
  arg1 = (BSONObj *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BSONObj const & type is null", 0);
    return 0;
  } 
  result = (BSONObj *)new BSONObj((BSONObj const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_BSONObj(void * jarg1) {
  BSONObj *arg1 = (BSONObj *) 0 ;
  
  arg1 = (BSONObj *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BSONObj_add__SWIG_0(void * jarg1, char * jarg2, int jarg3) {
  BSONObj *arg1 = (BSONObj *) 0 ;
  std::string arg2 ;
  __int32 arg3 ;
  
  arg1 = (BSONObj *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg2)->assign(jarg2); 
  arg3 = (__int32)jarg3; 
  (arg1)->add(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BSONObj_add__SWIG_1(void * jarg1, char * jarg2, double jarg3) {
  BSONObj *arg1 = (BSONObj *) 0 ;
  std::string arg2 ;
  double arg3 ;
  
  arg1 = (BSONObj *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg2)->assign(jarg2); 
  arg3 = (double)jarg3; 
  (arg1)->add(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BSONObj_add__SWIG_2(void * jarg1, char * jarg2, long long jarg3) {
  BSONObj *arg1 = (BSONObj *) 0 ;
  std::string arg2 ;
  __int64 arg3 ;
  
  arg1 = (BSONObj *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg2)->assign(jarg2); 
  arg3 = (__int64)jarg3; 
  (arg1)->add(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BSONObj_add__SWIG_3(void * jarg1, char * jarg2, char * jarg3) {
  BSONObj *arg1 = (BSONObj *) 0 ;
  std::string arg2 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (BSONObj *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg2)->assign(jarg2); 
  arg3 = (char *)jarg3; 
  (arg1)->add(arg2,(char const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BSONObj_add__SWIG_4(void * jarg1, char * jarg2, char * jarg3, int jarg4) {
  BSONObj *arg1 = (BSONObj *) 0 ;
  std::string arg2 ;
  char *arg3 = (char *) 0 ;
  __int32 arg4 ;
  
  arg1 = (BSONObj *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg2)->assign(jarg2); 
  arg3 = (char *)jarg3; 
  arg4 = (__int32)jarg4; 
  (arg1)->add(arg2,(char const *)arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BSONObj_add__SWIG_5(void * jarg1, char * jarg2, void * jarg3) {
  BSONObj *arg1 = (BSONObj *) 0 ;
  std::string arg2 ;
  BSONObj *arg3 = 0 ;
  
  arg1 = (BSONObj *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg2)->assign(jarg2); 
  arg3 = (BSONObj *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BSONObj const & type is null", 0);
    return ;
  } 
  (arg1)->add(arg2,(BSONObj const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BSONObj_add__SWIG_6(void * jarg1, char * jarg2, void * jarg3) {
  BSONObj *arg1 = (BSONObj *) 0 ;
  std::string arg2 ;
  BSONArrayObj *arg3 = 0 ;
  
  arg1 = (BSONObj *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg2)->assign(jarg2); 
  arg3 = (BSONArrayObj *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BSONArrayObj const & type is null", 0);
    return ;
  } 
  (arg1)->add(arg2,(BSONArrayObj const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BSONObj_add__SWIG_7(void * jarg1, char * jarg2, void * jarg3) {
  BSONObj *arg1 = (BSONObj *) 0 ;
  std::string arg2 ;
  BSONContent *arg3 = 0 ;
  
  arg1 = (BSONObj *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg2)->assign(jarg2); 
  arg3 = (BSONContent *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BSONContent const & type is null", 0);
    return ;
  } 
  (arg1)->add(arg2,(BSONContent const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BSONObj_add__SWIG_8(void * jarg1, char * jarg2, unsigned int jarg3) {
  BSONObj *arg1 = (BSONObj *) 0 ;
  std::string arg2 ;
  bool arg3 ;
  
  arg1 = (BSONObj *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg2)->assign(jarg2); 
  arg3 = jarg3 ? true : false; 
  (arg1)->add(arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BSONObj_has(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  BSONObj *arg1 = (BSONObj *) 0 ;
  std::string arg2 ;
  bool result;
  
  arg1 = (BSONObj *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg2)->assign(jarg2); 
  result = (bool)((BSONObj const *)arg1)->has(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BSONObj_getBoolean(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  BSONObj *arg1 = (BSONObj *) 0 ;
  std::string arg2 ;
  bool result;
  
  arg1 = (BSONObj *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg2)->assign(jarg2); 
  try {
    result = (bool)((BSONObj const *)arg1)->getBoolean(arg2);
  }
  catch(BSONException &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ BSONException exception thrown");
    return 0; 
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BSONObj_getInt(void * jarg1, char * jarg2) {
  int jresult ;
  BSONObj *arg1 = (BSONObj *) 0 ;
  std::string arg2 ;
  __int32 result;
  
  arg1 = (BSONObj *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg2)->assign(jarg2); 
  try {
    result = ((BSONObj const *)arg1)->getInt(arg2);
  }
  catch(BSONException &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ BSONException exception thrown");
    return 0; 
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_BSONObj_getDouble(void * jarg1, char * jarg2) {
  double jresult ;
  BSONObj *arg1 = (BSONObj *) 0 ;
  std::string arg2 ;
  double result;
  
  arg1 = (BSONObj *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg2)->assign(jarg2); 
  try {
    result = (double)((BSONObj const *)arg1)->getDouble(arg2);
  }
  catch(BSONException &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ BSONException exception thrown");
    return 0; 
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_BSONObj_getLong(void * jarg1, char * jarg2) {
  long long jresult ;
  BSONObj *arg1 = (BSONObj *) 0 ;
  std::string arg2 ;
  __int64 result;
  
  arg1 = (BSONObj *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg2)->assign(jarg2); 
  try {
    result = ((BSONObj const *)arg1)->getLong(arg2);
  }
  catch(BSONException &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ BSONException exception thrown");
    return 0; 
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_BSONObj_getString(void * jarg1, char * jarg2) {
  char * jresult ;
  BSONObj *arg1 = (BSONObj *) 0 ;
  std::string arg2 ;
  std::string result;
  
  arg1 = (BSONObj *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg2)->assign(jarg2); 
  try {
    result = ((BSONObj const *)arg1)->getString(arg2);
  }
  catch(BSONException &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ BSONException exception thrown");
    return 0; 
  }
  
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BSONObj_getBSON(void * jarg1, char * jarg2) {
  void * jresult ;
  BSONObj *arg1 = (BSONObj *) 0 ;
  std::string arg2 ;
  BSONObj *result = 0 ;
  
  arg1 = (BSONObj *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg2)->assign(jarg2); 
  try {
    result = (BSONObj *)((BSONObj const *)arg1)->getBSON(arg2);
  }
  catch(BSONException &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ BSONException exception thrown");
    return 0; 
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BSONObj_getBSONArray(void * jarg1, char * jarg2) {
  void * jresult ;
  BSONObj *arg1 = (BSONObj *) 0 ;
  std::string arg2 ;
  BSONArrayObj *result = 0 ;
  
  arg1 = (BSONObj *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg2)->assign(jarg2); 
  try {
    result = (BSONArrayObj *)((BSONObj const *)arg1)->getBSONArray(arg2);
  }
  catch(BSONException &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ BSONException exception thrown");
    return 0; 
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BSONObj_get(void * jarg1, char * jarg2) {
  void * jresult ;
  BSONObj *arg1 = (BSONObj *) 0 ;
  std::string arg2 ;
  BSONContent *result = 0 ;
  
  arg1 = (BSONObj *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg2)->assign(jarg2); 
  try {
    result = (BSONContent *)((BSONObj const *)arg1)->get(arg2);
  }
  catch(BSONException &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ BSONException exception thrown");
    return 0; 
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BSONObj_getContent__SWIG_0(void * jarg1, char * jarg2) {
  void * jresult ;
  BSONObj *arg1 = (BSONObj *) 0 ;
  std::string arg2 ;
  BSONContent *result = 0 ;
  
  arg1 = (BSONObj *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg2)->assign(jarg2); 
  result = (BSONContent *)((BSONObj const *)arg1)->getContent(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BSONObj_getContent__SWIG_1(void * jarg1, char * jarg2, void * jarg3) {
  void * jresult ;
  BSONObj *arg1 = (BSONObj *) 0 ;
  std::string arg2 ;
  BSONTYPE arg3 ;
  BSONTYPE *argp3 ;
  BSONContent *result = 0 ;
  
  arg1 = (BSONObj *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg2)->assign(jarg2); 
  argp3 = (BSONTYPE *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BSONTYPE", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = (BSONContent *)((BSONObj const *)arg1)->getContent(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BSONObj_getXpath(void * jarg1, char * jarg2) {
  void * jresult ;
  BSONObj *arg1 = (BSONObj *) 0 ;
  std::string *arg2 = 0 ;
  BSONContent *result = 0 ;
  
  arg1 = (BSONObj *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (BSONContent *)((BSONObj const *)arg1)->getXpath((std::string const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BSONObj_select(void * jarg1, char * jarg2) {
  void * jresult ;
  BSONObj *arg1 = (BSONObj *) 0 ;
  char *arg2 = (char *) 0 ;
  BSONObj *result = 0 ;
  
  arg1 = (BSONObj *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (BSONObj *)((BSONObj const *)arg1)->select((char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BSONObj_type(void * jarg1, char * jarg2) {
  void * jresult ;
  BSONObj *arg1 = (BSONObj *) 0 ;
  std::string arg2 ;
  BSONTYPE result;
  
  arg1 = (BSONObj *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg2)->assign(jarg2); 
  result = ((BSONObj const *)arg1)->type(arg2);
  jresult = new BSONTYPE((const BSONTYPE &)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_BSONObj_toChar(void * jarg1) {
  char * jresult ;
  BSONObj *arg1 = (BSONObj *) 0 ;
  char *result = 0 ;
  
  arg1 = (BSONObj *)jarg1; 
  result = (char *)(arg1)->toChar();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BSONObj_begin(void * jarg1) {
  void * jresult ;
  BSONObj *arg1 = (BSONObj *) 0 ;
  BSONObj::const_iterator result;
  
  arg1 = (BSONObj *)jarg1; 
  result = ((BSONObj const *)arg1)->begin();
  jresult = new BSONObj::const_iterator((const BSONObj::const_iterator &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BSONObj_end(void * jarg1) {
  void * jresult ;
  BSONObj *arg1 = (BSONObj *) 0 ;
  BSONObj::const_iterator result;
  
  arg1 = (BSONObj *)jarg1; 
  result = ((BSONObj const *)arg1)->end();
  jresult = new BSONObj::const_iterator((const BSONObj::const_iterator &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BSONObj_length(void * jarg1) {
  int jresult ;
  BSONObj *arg1 = (BSONObj *) 0 ;
  __int32 result;
  
  arg1 = (BSONObj *)jarg1; 
  result = ((BSONObj const *)arg1)->length();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_BSONParser() {
  void * jresult ;
  BSONParser *result = 0 ;
  
  result = (BSONParser *)new BSONParser();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_BSONParser(void * jarg1) {
  BSONParser *arg1 = (BSONParser *) 0 ;
  
  arg1 = (BSONParser *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BSONParser_parse(char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  BSONObj *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = (BSONObj *)BSONParser::parse((std::string const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BSONParser_parseArray(char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  BSONArrayObj *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = (BSONArrayObj *)BSONParser::parseArray((std::string const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_parseFilterOperator(char * jarg1) {
  int jresult ;
  char *arg1 = (char *) 0 ;
  FILTER_OPERATORS result;
  
  arg1 = (char *)jarg1; 
  result = (FILTER_OPERATORS)parseFilterOperator((char const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ParseException__SWIG_0(int jarg1, char * jarg2) {
  void * jresult ;
  int arg1 ;
  char *arg2 = (char *) 0 ;
  ParseException *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (char *)jarg2; 
  result = (ParseException *)new ParseException(arg1,(char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ParseException__SWIG_1(void * jarg1) {
  void * jresult ;
  ParseException *arg1 = 0 ;
  ParseException *result = 0 ;
  
  arg1 = (ParseException *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ParseException const & type is null", 0);
    return 0;
  } 
  result = (ParseException *)new ParseException((ParseException const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ParseException_what(void * jarg1) {
  char * jresult ;
  ParseException *arg1 = (ParseException *) 0 ;
  char *result = 0 ;
  
  arg1 = (ParseException *)jarg1; 
  result = (char *)((ParseException const *)arg1)->what();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ParseException_errorCode(void * jarg1) {
  int jresult ;
  ParseException *arg1 = (ParseException *) 0 ;
  int result;
  
  arg1 = (ParseException *)jarg1; 
  result = (int)((ParseException const *)arg1)->errorCode();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ParseException(void * jarg1) {
  ParseException *arg1 = (ParseException *) 0 ;
  
  arg1 = (ParseException *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_bson_splitSelect(char * jarg1) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  SwigValueWrapper< std::set< std::string > > result;
  
  arg1 = (char *)jarg1; 
  result = bson_splitSelect((char const *)arg1);
  jresult = new std::set< std::string >((const std::set< std::string > &)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_bson_subselect(char * jarg1, char * jarg2) {
  char * jresult ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (char *)bson_subselect((char const *)arg1,(char const *)arg2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_convert(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  BSONTYPE arg1 ;
  BSONTYPE arg2 ;
  void *arg3 = (void *) 0 ;
  BSONTYPE *argp1 ;
  BSONTYPE *argp2 ;
  void *result = 0 ;
  
  argp1 = (BSONTYPE *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BSONTYPE", 0);
    return 0;
  }
  arg1 = *argp1; 
  argp2 = (BSONTYPE *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BSONTYPE", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (void *)jarg3; 
  result = (void *)convert(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SERVER_PORT_get() {
  int jresult ;
  int result;
  
  result = (int)(1243);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DjondbConnection__SWIG_0(char * jarg1) {
  void * jresult ;
  std::string arg1 ;
  djondb::DjondbConnection *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg1)->assign(jarg1); 
  result = (djondb::DjondbConnection *)new djondb::DjondbConnection(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DjondbConnection__SWIG_1(char * jarg1, int jarg2) {
  void * jresult ;
  std::string arg1 ;
  int arg2 ;
  djondb::DjondbConnection *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg1)->assign(jarg1); 
  arg2 = (int)jarg2; 
  result = (djondb::DjondbConnection *)new djondb::DjondbConnection(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DjondbConnection__SWIG_2(void * jarg1) {
  void * jresult ;
  djondb::DjondbConnection *arg1 = 0 ;
  djondb::DjondbConnection *result = 0 ;
  
  arg1 = (djondb::DjondbConnection *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "djondb::DjondbConnection const & type is null", 0);
    return 0;
  } 
  result = (djondb::DjondbConnection *)new djondb::DjondbConnection((djondb::DjondbConnection const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_DjondbConnection(void * jarg1) {
  djondb::DjondbConnection *arg1 = (djondb::DjondbConnection *) 0 ;
  
  arg1 = (djondb::DjondbConnection *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_DjondbConnection_beginTransaction(void * jarg1) {
  char * jresult ;
  djondb::DjondbConnection *arg1 = (djondb::DjondbConnection *) 0 ;
  char *result = 0 ;
  
  arg1 = (djondb::DjondbConnection *)jarg1; 
  result = (char *)(arg1)->beginTransaction();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DjondbConnection_commitTransaction(void * jarg1) {
  djondb::DjondbConnection *arg1 = (djondb::DjondbConnection *) 0 ;
  
  arg1 = (djondb::DjondbConnection *)jarg1; 
  (arg1)->commitTransaction();
}


SWIGEXPORT void SWIGSTDCALL CSharp_DjondbConnection_rollbackTransaction(void * jarg1) {
  djondb::DjondbConnection *arg1 = (djondb::DjondbConnection *) 0 ;
  
  arg1 = (djondb::DjondbConnection *)jarg1; 
  (arg1)->rollbackTransaction();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DjondbConnection_open(void * jarg1) {
  unsigned int jresult ;
  djondb::DjondbConnection *arg1 = (djondb::DjondbConnection *) 0 ;
  bool result;
  
  arg1 = (djondb::DjondbConnection *)jarg1; 
  result = (bool)(arg1)->open();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DjondbConnection_close(void * jarg1) {
  djondb::DjondbConnection *arg1 = (djondb::DjondbConnection *) 0 ;
  
  arg1 = (djondb::DjondbConnection *)jarg1; 
  (arg1)->close();
}


SWIGEXPORT void SWIGSTDCALL CSharp_DjondbConnection_internalClose(void * jarg1) {
  djondb::DjondbConnection *arg1 = (djondb::DjondbConnection *) 0 ;
  
  arg1 = (djondb::DjondbConnection *)jarg1; 
  (arg1)->internalClose();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DjondbConnection_isOpen(void * jarg1) {
  unsigned int jresult ;
  djondb::DjondbConnection *arg1 = (djondb::DjondbConnection *) 0 ;
  bool result;
  
  arg1 = (djondb::DjondbConnection *)jarg1; 
  result = (bool)((djondb::DjondbConnection const *)arg1)->isOpen();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DjondbConnection_shutdown(void * jarg1) {
  unsigned int jresult ;
  djondb::DjondbConnection *arg1 = (djondb::DjondbConnection *) 0 ;
  bool result;
  
  arg1 = (djondb::DjondbConnection *)jarg1; 
  result = (bool)((djondb::DjondbConnection const *)arg1)->shutdown();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DjondbConnection_insert__SWIG_0(void * jarg1, char * jarg2, char * jarg3, char * jarg4) {
  unsigned int jresult ;
  djondb::DjondbConnection *arg1 = (djondb::DjondbConnection *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  bool result;
  
  arg1 = (djondb::DjondbConnection *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  result = (bool)(arg1)->insert((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DjondbConnection_insert__SWIG_1(void * jarg1, char * jarg2, char * jarg3, void * jarg4) {
  unsigned int jresult ;
  djondb::DjondbConnection *arg1 = (djondb::DjondbConnection *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  BSONObj *arg4 = 0 ;
  bool result;
  
  arg1 = (djondb::DjondbConnection *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  arg4 = (BSONObj *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BSONObj const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->insert((std::string const &)*arg2,(std::string const &)*arg3,(BSONObj const &)*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DjondbConnection_findByKey__SWIG_0(void * jarg1, char * jarg2, char * jarg3, char * jarg4, char * jarg5) {
  void * jresult ;
  djondb::DjondbConnection *arg1 = (djondb::DjondbConnection *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  BSONObj *result = 0 ;
  
  arg1 = (djondb::DjondbConnection *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  if (!jarg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg5_str(jarg5);
  arg5 = &arg5_str; 
  result = (BSONObj *)(arg1)->findByKey((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DjondbConnection_findByKey__SWIG_1(void * jarg1, char * jarg2, char * jarg3, char * jarg4) {
  void * jresult ;
  djondb::DjondbConnection *arg1 = (djondb::DjondbConnection *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  BSONObj *result = 0 ;
  
  arg1 = (djondb::DjondbConnection *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  result = (BSONObj *)(arg1)->findByKey((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DjondbConnection_find__SWIG_0(void * jarg1, char * jarg2, char * jarg3) {
  void * jresult ;
  djondb::DjondbConnection *arg1 = (djondb::DjondbConnection *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  djondb::DjondbCursor *result = 0 ;
  
  arg1 = (djondb::DjondbConnection *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = (djondb::DjondbCursor *)(arg1)->find((std::string const &)*arg2,(std::string const &)*arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DjondbConnection_find__SWIG_1(void * jarg1, char * jarg2, char * jarg3, void * jarg4) {
  void * jresult ;
  djondb::DjondbConnection *arg1 = (djondb::DjondbConnection *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  BSONObj *arg4 = 0 ;
  djondb::DjondbCursor *result = 0 ;
  
  arg1 = (djondb::DjondbConnection *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  arg4 = (BSONObj *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BSONObj const & type is null", 0);
    return 0;
  } 
  result = (djondb::DjondbCursor *)(arg1)->find((std::string const &)*arg2,(std::string const &)*arg3,(BSONObj const &)*arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DjondbConnection_find__SWIG_2(void * jarg1, char * jarg2, char * jarg3, char * jarg4) {
  void * jresult ;
  djondb::DjondbConnection *arg1 = (djondb::DjondbConnection *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  djondb::DjondbCursor *result = 0 ;
  
  arg1 = (djondb::DjondbConnection *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  result = (djondb::DjondbCursor *)(arg1)->find((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DjondbConnection_find__SWIG_3(void * jarg1, char * jarg2, char * jarg3, char * jarg4, void * jarg5) {
  void * jresult ;
  djondb::DjondbConnection *arg1 = (djondb::DjondbConnection *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  BSONObj *arg5 = 0 ;
  djondb::DjondbCursor *result = 0 ;
  
  arg1 = (djondb::DjondbConnection *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  arg5 = (BSONObj *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BSONObj const & type is null", 0);
    return 0;
  } 
  result = (djondb::DjondbCursor *)(arg1)->find((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(BSONObj const &)*arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DjondbConnection_find__SWIG_4(void * jarg1, char * jarg2, char * jarg3, char * jarg4, char * jarg5) {
  void * jresult ;
  djondb::DjondbConnection *arg1 = (djondb::DjondbConnection *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  djondb::DjondbCursor *result = 0 ;
  
  arg1 = (djondb::DjondbConnection *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  if (!jarg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg5_str(jarg5);
  arg5 = &arg5_str; 
  result = (djondb::DjondbCursor *)(arg1)->find((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DjondbConnection_find__SWIG_5(void * jarg1, char * jarg2, char * jarg3, char * jarg4, char * jarg5, void * jarg6) {
  void * jresult ;
  djondb::DjondbConnection *arg1 = (djondb::DjondbConnection *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  BSONObj *arg6 = 0 ;
  djondb::DjondbCursor *result = 0 ;
  
  arg1 = (djondb::DjondbConnection *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  if (!jarg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg5_str(jarg5);
  arg5 = &arg5_str; 
  arg6 = (BSONObj *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BSONObj const & type is null", 0);
    return 0;
  } 
  result = (djondb::DjondbCursor *)(arg1)->find((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,(BSONObj const &)*arg6);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DjondbConnection_update__SWIG_0(void * jarg1, char * jarg2, char * jarg3, char * jarg4) {
  unsigned int jresult ;
  djondb::DjondbConnection *arg1 = (djondb::DjondbConnection *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  bool result;
  
  arg1 = (djondb::DjondbConnection *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  result = (bool)(arg1)->update((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DjondbConnection_update__SWIG_1(void * jarg1, char * jarg2, char * jarg3, void * jarg4) {
  unsigned int jresult ;
  djondb::DjondbConnection *arg1 = (djondb::DjondbConnection *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  BSONObj *arg4 = 0 ;
  bool result;
  
  arg1 = (djondb::DjondbConnection *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  arg4 = (BSONObj *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BSONObj const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->update((std::string const &)*arg2,(std::string const &)*arg3,(BSONObj const &)*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DjondbConnection_remove(void * jarg1, char * jarg2, char * jarg3, char * jarg4, char * jarg5) {
  unsigned int jresult ;
  djondb::DjondbConnection *arg1 = (djondb::DjondbConnection *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  bool result;
  
  arg1 = (djondb::DjondbConnection *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  if (!jarg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg5_str(jarg5);
  arg5 = &arg5_str; 
  result = (bool)(arg1)->remove((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DjondbConnection_executeQuery(void * jarg1, char * jarg2) {
  void * jresult ;
  djondb::DjondbConnection *arg1 = (djondb::DjondbConnection *) 0 ;
  std::string *arg2 = 0 ;
  BSONArrayObj *result = 0 ;
  
  arg1 = (djondb::DjondbConnection *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (BSONArrayObj *)(arg1)->executeQuery((std::string const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DjondbConnection_executeUpdate(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  djondb::DjondbConnection *arg1 = (djondb::DjondbConnection *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (djondb::DjondbConnection *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)(arg1)->executeUpdate((std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DjondbConnection_dropNamespace(void * jarg1, char * jarg2, char * jarg3) {
  unsigned int jresult ;
  djondb::DjondbConnection *arg1 = (djondb::DjondbConnection *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  bool result;
  
  arg1 = (djondb::DjondbConnection *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = (bool)(arg1)->dropNamespace((std::string const &)*arg2,(std::string const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DjondbConnection_dbs(void * jarg1) {
  void * jresult ;
  djondb::DjondbConnection *arg1 = (djondb::DjondbConnection *) 0 ;
  std::vector< std::string > *result = 0 ;
  
  arg1 = (djondb::DjondbConnection *)jarg1; 
  result = (std::vector< std::string > *)((djondb::DjondbConnection const *)arg1)->dbs();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DjondbConnection_namespaces(void * jarg1, char * jarg2) {
  void * jresult ;
  djondb::DjondbConnection *arg1 = (djondb::DjondbConnection *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< std::string > *result = 0 ;
  
  arg1 = (djondb::DjondbConnection *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (std::vector< std::string > *)((djondb::DjondbConnection const *)arg1)->namespaces((std::string const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_DjondbConnection_host(void * jarg1) {
  char * jresult ;
  djondb::DjondbConnection *arg1 = (djondb::DjondbConnection *) 0 ;
  std::string result;
  
  arg1 = (djondb::DjondbConnection *)jarg1; 
  result = ((djondb::DjondbConnection const *)arg1)->host();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DjondbCursor__SWIG_0(void * jarg1, void * jarg2, void * jarg3, char * jarg4, void * jarg5) {
  void * jresult ;
  NetworkOutputStream *arg1 = (NetworkOutputStream *) 0 ;
  NetworkInputStream *arg2 = (NetworkInputStream *) 0 ;
  CommandWriter *arg3 = (CommandWriter *) 0 ;
  char *arg4 = (char *) 0 ;
  BSONArrayObj *arg5 = (BSONArrayObj *) 0 ;
  djondb::DjondbCursor *result = 0 ;
  
  arg1 = (NetworkOutputStream *)jarg1; 
  arg2 = (NetworkInputStream *)jarg2; 
  arg3 = (CommandWriter *)jarg3; 
  arg4 = (char *)jarg4; 
  arg5 = (BSONArrayObj *)jarg5; 
  result = (djondb::DjondbCursor *)new djondb::DjondbCursor(arg1,arg2,arg3,(char const *)arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DjondbCursor__SWIG_1(void * jarg1) {
  void * jresult ;
  djondb::DjondbCursor *arg1 = 0 ;
  djondb::DjondbCursor *result = 0 ;
  
  arg1 = (djondb::DjondbCursor *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "djondb::DjondbCursor const & type is null", 0);
    return 0;
  } 
  result = (djondb::DjondbCursor *)new djondb::DjondbCursor((djondb::DjondbCursor const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_DjondbCursor(void * jarg1) {
  djondb::DjondbCursor *arg1 = (djondb::DjondbCursor *) 0 ;
  
  arg1 = (djondb::DjondbCursor *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DjondbCursor_next(void * jarg1) {
  unsigned int jresult ;
  djondb::DjondbCursor *arg1 = (djondb::DjondbCursor *) 0 ;
  bool result;
  
  arg1 = (djondb::DjondbCursor *)jarg1; 
  result = (bool)(arg1)->next();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DjondbCursor_previous(void * jarg1) {
  unsigned int jresult ;
  djondb::DjondbCursor *arg1 = (djondb::DjondbCursor *) 0 ;
  bool result;
  
  arg1 = (djondb::DjondbCursor *)jarg1; 
  result = (bool)(arg1)->previous();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DjondbCursor_current(void * jarg1) {
  void * jresult ;
  djondb::DjondbCursor *arg1 = (djondb::DjondbCursor *) 0 ;
  BSONObj *result = 0 ;
  
  arg1 = (djondb::DjondbCursor *)jarg1; 
  result = (BSONObj *)(arg1)->current();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DjondbCursor_length(void * jarg1) {
  int jresult ;
  djondb::DjondbCursor *arg1 = (djondb::DjondbCursor *) 0 ;
  __int32 result;
  
  arg1 = (djondb::DjondbCursor *)jarg1; 
  result = (arg1)->length();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DjondbCursor_releaseCursor(void * jarg1) {
  djondb::DjondbCursor *arg1 = (djondb::DjondbCursor *) 0 ;
  
  arg1 = (djondb::DjondbCursor *)jarg1; 
  (arg1)->releaseCursor();
}


SWIGEXPORT void SWIGSTDCALL CSharp_DjondbCursor_seek(void * jarg1, int jarg2) {
  djondb::DjondbCursor *arg1 = (djondb::DjondbCursor *) 0 ;
  __int32 arg2 ;
  
  arg1 = (djondb::DjondbCursor *)jarg1; 
  arg2 = (__int32)jarg2; 
  (arg1)->seek(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ConnectionReference__connection_set(void * jarg1, void * jarg2) {
  djondb::ConnectionReference *arg1 = (djondb::ConnectionReference *) 0 ;
  djondb::DjondbConnection *arg2 = (djondb::DjondbConnection *) 0 ;
  
  arg1 = (djondb::ConnectionReference *)jarg1; 
  arg2 = (djondb::DjondbConnection *)jarg2; 
  if (arg1) (arg1)->_connection = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ConnectionReference__connection_get(void * jarg1) {
  void * jresult ;
  djondb::ConnectionReference *arg1 = (djondb::ConnectionReference *) 0 ;
  djondb::DjondbConnection *result = 0 ;
  
  arg1 = (djondb::ConnectionReference *)jarg1; 
  result = (djondb::DjondbConnection *) ((arg1)->_connection);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ConnectionReference__references_set(void * jarg1, int jarg2) {
  djondb::ConnectionReference *arg1 = (djondb::ConnectionReference *) 0 ;
  int arg2 ;
  
  arg1 = (djondb::ConnectionReference *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->_references = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ConnectionReference__references_get(void * jarg1) {
  int jresult ;
  djondb::ConnectionReference *arg1 = (djondb::ConnectionReference *) 0 ;
  int result;
  
  arg1 = (djondb::ConnectionReference *)jarg1; 
  result = (int) ((arg1)->_references);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ConnectionReference() {
  void * jresult ;
  djondb::ConnectionReference *result = 0 ;
  
  result = (djondb::ConnectionReference *)new djondb::ConnectionReference();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ConnectionReference(void * jarg1) {
  djondb::ConnectionReference *arg1 = (djondb::ConnectionReference *) 0 ;
  
  arg1 = (djondb::ConnectionReference *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DjondbConnectionManager() {
  void * jresult ;
  djondb::DjondbConnectionManager *result = 0 ;
  
  result = (djondb::DjondbConnectionManager *)new djondb::DjondbConnectionManager();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_DjondbConnectionManager(void * jarg1) {
  djondb::DjondbConnectionManager *arg1 = (djondb::DjondbConnectionManager *) 0 ;
  
  arg1 = (djondb::DjondbConnectionManager *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DjondbConnectionManager_getConnection__SWIG_0(char * jarg1) {
  void * jresult ;
  std::string arg1 ;
  djondb::DjondbConnection *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg1)->assign(jarg1); 
  result = (djondb::DjondbConnection *)djondb::DjondbConnectionManager::getConnection(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DjondbConnectionManager_getConnection__SWIG_1(char * jarg1, int jarg2) {
  void * jresult ;
  std::string arg1 ;
  int arg2 ;
  djondb::DjondbConnection *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg1)->assign(jarg1); 
  arg2 = (int)jarg2; 
  result = (djondb::DjondbConnection *)djondb::DjondbConnectionManager::getConnection(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DjondbConnectionManager_releaseConnection(void * jarg1) {
  djondb::DjondbConnection *arg1 = (djondb::DjondbConnection *) 0 ;
  
  arg1 = (djondb::DjondbConnection *)jarg1; 
  djondb::DjondbConnectionManager::releaseConnection(arg1);
}


#ifdef __cplusplus
}
#endif

