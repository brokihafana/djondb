/** \file
 *  This C header file was generated by $ANTLR version 3.2 Sep 23, 2009 12:02:23
 *
 *     -  From the grammar source file : /home/cross/workspace/djondb/db/grammars/dql.g
 *     -                            On : 2013-07-21 04:35:06
 *     -                for the parser : dqlParserParser *
 * Editing it, at least manually, is not wise. 
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The parser dqlParser has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 * 
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef pdqlParser, which is returned from a call to dqlParserNew().
 *
 * The methods in pdqlParser are  as follows:
 *
 *  - Command*      pdqlParser->start_point(pdqlParser)
 *  - Command*      pdqlParser->dql(pdqlParser)
 *  - Command*      pdqlParser->query_expr(pdqlParser)
 *  - Command*      pdqlParser->insert_expr(pdqlParser)
 *  - Command*      pdqlParser->update_expr(pdqlParser)
 *  - Command*      pdqlParser->remove_expr(pdqlParser)
 *  - dqlParser_filter_expr_return      pdqlParser->filter_expr(pdqlParser)
 *  - void      pdqlParser->boolean_expr(pdqlParser)
 *  - void      pdqlParser->boolean_term(pdqlParser)
 *  - void      pdqlParser->boolean_value(pdqlParser)
 *  - void      pdqlParser->parenthesized_boolean(pdqlParser)
 *  - void      pdqlParser->nonparentherized_boolean(pdqlParser)
 *  - void      pdqlParser->unary_expr(pdqlParser)
 *  - void      pdqlParser->exists_expr(pdqlParser)
 *  - void      pdqlParser->not_expr(pdqlParser)
 *  - void      pdqlParser->xpath_expr(pdqlParser)
 *  - void      pdqlParser->id_expr(pdqlParser)
 *  - void      pdqlParser->constant_expr(pdqlParser)
 *  - void      pdqlParser->json_const(pdqlParser)
 *  - void      pdqlParser->operand_expr(pdqlParser)
 *  - void      pdqlParser->json_array_expr(pdqlParser)
 *  - dqlParser_json_expr_return      pdqlParser->json_expr(pdqlParser)
 *  - void      pdqlParser->json_fieldname(pdqlParser)
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
// [The "BSD licence"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_dqlParser_H
#define _dqlParser_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */

//#include <stdlib.h>
   #include "util.h"
   #include "filterdefs.h"
   #include "constantexpression.h"
   #include "unaryexpression.h"
   #include "simpleexpression.h"
   #include "binaryexpression.h"
   #include "findcommand.h"
   #include "insertcommand.h"
   #include "updatecommand.h"
   #include "removecommand.h"
   #include "memorystream.h"
   #include <stdlib.h>
   #include <limits.h>
   #include <stdio.h>
   #ifndef WINDOWS
   #include <strings.h>
#endif
   #include <string>
   #include <iostream>

 
#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct dqlParser_Ctx_struct dqlParser, * pdqlParser;



#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule 
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif
typedef struct dqlParser_filter_expr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;   
}
    dqlParser_filter_expr_return;

typedef struct dqlParser_json_expr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;   
}
    dqlParser_json_expr_return;



/** Context tracking structure for dqlParser
 */
struct dqlParser_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_PARSER   pParser;


     Command* (*start_point)	(struct dqlParser_Ctx_struct * ctx);
     Command* (*dql)	(struct dqlParser_Ctx_struct * ctx);
     Command* (*query_expr)	(struct dqlParser_Ctx_struct * ctx);
     Command* (*insert_expr)	(struct dqlParser_Ctx_struct * ctx);
     Command* (*update_expr)	(struct dqlParser_Ctx_struct * ctx);
     Command* (*remove_expr)	(struct dqlParser_Ctx_struct * ctx);
     dqlParser_filter_expr_return (*filter_expr)	(struct dqlParser_Ctx_struct * ctx);
     void (*boolean_expr)	(struct dqlParser_Ctx_struct * ctx);
     void (*boolean_term)	(struct dqlParser_Ctx_struct * ctx);
     void (*boolean_value)	(struct dqlParser_Ctx_struct * ctx);
     void (*parenthesized_boolean)	(struct dqlParser_Ctx_struct * ctx);
     void (*nonparentherized_boolean)	(struct dqlParser_Ctx_struct * ctx);
     void (*unary_expr)	(struct dqlParser_Ctx_struct * ctx);
     void (*exists_expr)	(struct dqlParser_Ctx_struct * ctx);
     void (*not_expr)	(struct dqlParser_Ctx_struct * ctx);
     void (*xpath_expr)	(struct dqlParser_Ctx_struct * ctx);
     void (*id_expr)	(struct dqlParser_Ctx_struct * ctx);
     void (*constant_expr)	(struct dqlParser_Ctx_struct * ctx);
     void (*json_const)	(struct dqlParser_Ctx_struct * ctx);
     void (*operand_expr)	(struct dqlParser_Ctx_struct * ctx);
     void (*json_array_expr)	(struct dqlParser_Ctx_struct * ctx);
     dqlParser_json_expr_return (*json_expr)	(struct dqlParser_Ctx_struct * ctx);
     void (*json_fieldname)	(struct dqlParser_Ctx_struct * ctx);
    // Delegated rules
    const char * (*getGrammarFileName)();
    void	    (*free)   (struct dqlParser_Ctx_struct * ctx);
        
};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API pdqlParser dqlParserNew         (pANTLR3_COMMON_TOKEN_STREAM instream);
ANTLR3_API pdqlParser dqlParserNewSSD      (pANTLR3_COMMON_TOKEN_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

/** Symbolic definitions of all the tokens that the parser will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif 
#define DOLLAR      36
#define WHERE      14
#define EXPONENT      35
#define REMOVE      18
#define OCTAL_ESC      42
#define UPDATE      17
#define ALL_FIELDS      7
#define FLOAT      30
#define NOT      27
#define ID      11
#define AND      22
#define EOF      -1
#define LPAREN      23
#define RBRAN      34
#define RPAREN      24
#define LBRAK      31
#define RBRAK      32
#define ESC_SEQ      43
#define INSERT      15
#define COMMA      9
#define LBRAN      33
#define ADM      37
#define EXISTS      26
#define COMMENT      38
#define SELECT      4
#define INTO      16
#define WITH      20
#define UNICODE_ESC      41
#define NUMBER      6
#define HEX_DIGIT      40
#define SEMICOLON      44
#define TRUE      28
#define COLON      12
#define XPATH      8
#define OPER      25
#define WS      39
#define OR      21
#define NS_ID      13
#define FROM      10
#define TOP      5
#define FALSE      29
#define STRING      19
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for dqlParser
 * =============================================================================
 */
/** \} */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
