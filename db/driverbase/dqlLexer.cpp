/** \file
 *  This C source file was generated by $ANTLR version 3.2 Sep 23, 2009 12:02:23
 *
 *     -  From the grammar source file : /home/cross/workspace/djondb/db/grammars/dql.g
 *     -                            On : 2013-07-21 04:35:06
 *     -                 for the lexer : dqlLexerLexer *
 * Editing it, at least manually, is not wise. 
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
*/
// [The "BSD licence"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

/* -----------------------------------------
 * Include the ANTLR3 generated header file.
 */
#include    "dqlLexer.h"
/* ----------------------------------------- */


/** String literals used by dqlLexer that we must do things like MATCHS() with.
 *  C will normally just lay down 8 bit characters, and you can use L"xxx" to
 *  get wchar_t, but wchar_t is 16 bits on Windows, which is not UTF32 and so
 *  we perform this little trick of defining the literals as arrays of UINT32
 *  and passing in the address of these.
 */
static ANTLR3_UCHAR	lit_1[]  = { 0x3D, 0x3D,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_2[]  = { 0x3E, 0x3D,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_3[]  = { 0x3C, 0x3D,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_4[]  = { 0x21, 0x3D,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_5[]  = { 0x2F, 0x2F,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_6[]  = { 0x2F, 0x2A,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_7[]  = { 0x2A, 0x2F,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_8[]  = { 0x5C, 0x22,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_9[]  = { 0x5C, 0x27,  ANTLR3_STRING_TERMINATOR};




/* MACROS that hide the C interface implementations from the
 * generated code, which makes it a little more understandable to the human eye.
 * I am very much against using C pre-processor macros for function calls and bits
 * of code as you cannot see what is happening when single stepping in debuggers
 * and so on. The exception (in my book at least) is for generated code, where you are
 * not maintaining it, but may wish to read and understand it. If you single step it, you know that input()
 * hides some indirect calls, but is always referring to the input stream. This is
 * probably more readable than ctx->input->istream->input(snarfle0->blarg) and allows me to rejig
 * the runtime interfaces without changing the generated code too often, without
 * confusing the reader of the generated output, who may not wish to know the gory
 * details of the interface inheritance.
 */
 
#define		CTX	ctx

/* Aids in accessing scopes for grammar programmers
 */
#undef	SCOPE_TYPE
#undef	SCOPE_STACK
#undef	SCOPE_TOP
#define	SCOPE_TYPE(scope)   pdqlLexer_##scope##_SCOPE
#define SCOPE_STACK(scope)  pdqlLexer_##scope##Stack
#define	SCOPE_TOP(scope)    ctx->pdqlLexer_##scope##Top
#define	SCOPE_SIZE(scope)		ctx->pdqlLexer_##scope##Stack_limit
#define SCOPE_INSTANCE(scope, i)	(ctx->SCOPE_STACK(scope)->get(ctx->SCOPE_STACK(scope),i))

 
/* Macros for accessing things in a lexer
 */
#undef	    LEXER
#undef	    RECOGNIZER		    
#undef	    RULEMEMO		    
#undef	    GETCHARINDEX
#undef	    GETLINE
#undef	    GETCHARPOSITIONINLINE
#undef	    EMIT
#undef	    EMITNEW
#undef	    MATCHC
#undef	    MATCHS
#undef	    MATCHRANGE
#undef	    LTOKEN
#undef	    HASFAILED
#undef	    FAILEDFLAG
#undef	    INPUT
#undef	    STRSTREAM
#undef	    LA
#undef	    HASEXCEPTION
#undef	    EXCEPTION
#undef	    CONSTRUCTEX
#undef	    CONSUME
#undef	    LRECOVER
#undef	    MARK
#undef	    REWIND
#undef	    REWINDLAST
#undef	    BACKTRACKING
#undef		MATCHANY
#undef		MEMOIZE
#undef		HAVEPARSEDRULE
#undef		GETTEXT
#undef		INDEX
#undef		SEEK
#undef		PUSHSTREAM
#undef		POPSTREAM
#undef		SETTEXT
#undef		SETTEXT8

#define	    LEXER					ctx->pLexer
#define	    RECOGNIZER			    LEXER->rec
#define		LEXSTATE				RECOGNIZER->state
#define		TOKSOURCE				LEXSTATE->tokSource
#define	    GETCHARINDEX()			LEXER->getCharIndex(LEXER)
#define	    GETLINE()				LEXER->getLine(LEXER)
#define	    GETTEXT()				LEXER->getText(LEXER)
#define	    GETCHARPOSITIONINLINE() LEXER->getCharPositionInLine(LEXER)
#define	    EMIT()					LEXSTATE->type = _type; LEXER->emit(LEXER)
#define	    EMITNEW(t)				LEXER->emitNew(LEXER, t)
#define	    MATCHC(c)				LEXER->matchc(LEXER, c)
#define	    MATCHS(s)				LEXER->matchs(LEXER, s)
#define	    MATCHRANGE(c1,c2)	    LEXER->matchRange(LEXER, c1, c2)
#define	    MATCHANY()				LEXER->matchAny(LEXER)
#define	    LTOKEN  				LEXSTATE->token
#define	    HASFAILED()				(LEXSTATE->failed == ANTLR3_TRUE)
#define	    BACKTRACKING			LEXSTATE->backtracking
#define	    FAILEDFLAG				LEXSTATE->failed
#define	    INPUT					LEXER->input
#define	    STRSTREAM				INPUT
#define		ISTREAM					INPUT->istream
#define		INDEX()					ISTREAM->index(ISTREAM)
#define		SEEK(n)					ISTREAM->seek(ISTREAM, n)
#define	    EOF_TOKEN				&(LEXSTATE->tokSource->eofToken)
#define	    HASEXCEPTION()			(LEXSTATE->error == ANTLR3_TRUE)
#define	    EXCEPTION				LEXSTATE->exception
#define	    CONSTRUCTEX()			RECOGNIZER->exConstruct(RECOGNIZER)
#define	    LRECOVER()				LEXER->recover(LEXER)
#define	    MARK()					ISTREAM->mark(ISTREAM)
#define	    REWIND(m)				ISTREAM->rewind(ISTREAM, m)
#define	    REWINDLAST()			ISTREAM->rewindLast(ISTREAM)
#define		MEMOIZE(ri,si)			RECOGNIZER->memoize(RECOGNIZER, ri, si)
#define		HAVEPARSEDRULE(r)		RECOGNIZER->alreadyParsedRule(RECOGNIZER, r)
#define		PUSHSTREAM(str)			LEXER->pushCharStream(LEXER, str)
#define		POPSTREAM()				LEXER->popCharStream(LEXER)
#define		SETTEXT(str)			LEXSTATE->text = str
#define		SKIP()					LEXSTATE->token = &(TOKSOURCE->skipToken)
#define		USER1					LEXSTATE->user1
#define		USER2					LEXSTATE->user2
#define		USER3					LEXSTATE->user3
#define		CUSTOM					LEXSTATE->custom
#define		RULEMEMO				LEXSTATE->ruleMemo
#define		DBG						RECOGNIZER->debugger

/* If we have been told we can rely on the standard 8 bit or 16 bit input
 * stream, then we can define our macros to use the direct pointers
 * in the input object, which is much faster than indirect calls. This
 * is really only significant to lexers with a lot of fragment rules (which
 * do not place LA(1) in a temporary at the moment) and even then
 * only if there is a lot of input (order of say 1M or so).
 */
#if	defined(ANTLR3_INLINE_INPUT_ASCII) || defined(ANTLR3_INLINE_INPUT_UTF16)

# ifdef	ANTLR3_INLINE_INPUT_ASCII

/* 8 bit "ASCII" (actually any 8 bit character set) */

#  define	    NEXTCHAR			((pANTLR3_UINT8)(INPUT->nextChar))
#  define	    DATAP				((pANTLR3_UINT8)(INPUT->data))

# else

#  define	    NEXTCHAR			((pANTLR3_UINT16)(INPUT->nextChar)) 
#  define	    DATAP				((pANTLR3_UINT16)(INPUT->data))

# endif

# define	    LA(n) ((NEXTCHAR + n) > (DATAP + INPUT->sizeBuf) ? ANTLR3_CHARSTREAM_EOF : (ANTLR3_UCHAR)(*(NEXTCHAR + n - 1)))
# define	    CONSUME()											\
{																	\
    if	(NEXTCHAR < (DATAP + INPUT->sizeBuf))						\
    {																\
		INPUT->charPositionInLine++;								\
		if  ((ANTLR3_UCHAR)(*NEXTCHAR) == INPUT->newlineChar)		\
		{															\
			INPUT->line++;											\
			INPUT->charPositionInLine	= 0;						\
			INPUT->currentLine		= (void *)(NEXTCHAR + 1);		\
		}															\
		INPUT->nextChar = (void *)(NEXTCHAR + 1);					\
    }																\
}

#else

// Pick up the input character by calling the input stream implementation.
//
#define	    CONSUME()				INPUT->istream->consume(INPUT->istream)
#define	    LA(n)					INPUT->istream->_LA(INPUT->istream, n)

#endif
#define		TOKTEXT(tok, txt)				tok, (pANTLR3_UINT8)txt

/* The 4 tokens defined below may well clash with your own #defines or token types. If so
 * then for the present you must use different names for your defines as these are hard coded
 * in the code generator. It would be better not to use such names internally, and maybe
 * we can change this in a forthcoming release. I deliberately do not #undef these
 * here as this will at least give you a redefined error somewhere if they clash.
 */
#define	    UP	    ANTLR3_TOKEN_UP
#define	    DOWN    ANTLR3_TOKEN_DOWN
#define	    EOR	    ANTLR3_TOKEN_EOR
#define	    INVALID ANTLR3_TOKEN_INVALID


/* =============================================================================
 * Functions to create and destroy scopes. First come the rule scopes, followed
 * by the global declared scopes.
 */



/* ============================================================================= */

/* =============================================================================
 * Start of recognizer
 */


/* Forward declare the locally static matching functions we have generated and any predicate functions.
 */
static ANTLR3_INLINE  void	mTRUE    (pdqlLexer ctx);
static ANTLR3_INLINE  void	mFALSE    (pdqlLexer ctx);
static ANTLR3_INLINE  void	mNUMBER    (pdqlLexer ctx);
static ANTLR3_INLINE  void	mFLOAT    (pdqlLexer ctx);
static ANTLR3_INLINE  void	mDOLLAR    (pdqlLexer ctx);
static ANTLR3_INLINE  void	mADM    (pdqlLexer ctx);
static ANTLR3_INLINE  void	mXPATH    (pdqlLexer ctx);
static ANTLR3_INLINE  void	mSELECT    (pdqlLexer ctx);
static ANTLR3_INLINE  void	mINSERT    (pdqlLexer ctx);
static ANTLR3_INLINE  void	mUPDATE    (pdqlLexer ctx);
static ANTLR3_INLINE  void	mREMOVE    (pdqlLexer ctx);
static ANTLR3_INLINE  void	mFROM    (pdqlLexer ctx);
static ANTLR3_INLINE  void	mWHERE    (pdqlLexer ctx);
static ANTLR3_INLINE  void	mINTO    (pdqlLexer ctx);
static ANTLR3_INLINE  void	mWITH    (pdqlLexer ctx);
static ANTLR3_INLINE  void	mNOT    (pdqlLexer ctx);
static ANTLR3_INLINE  void	mOPER    (pdqlLexer ctx);
static ANTLR3_INLINE  void	mEXISTS    (pdqlLexer ctx);
static ANTLR3_INLINE  void	mOR    (pdqlLexer ctx);
static ANTLR3_INLINE  void	mAND    (pdqlLexer ctx);
static ANTLR3_INLINE  void	mTOP    (pdqlLexer ctx);
static ANTLR3_INLINE  void	mID    (pdqlLexer ctx);
static ANTLR3_INLINE  void	mNS_ID    (pdqlLexer ctx);
static ANTLR3_INLINE  void	mALL_FIELDS    (pdqlLexer ctx);
static ANTLR3_INLINE  void	mCOMMENT    (pdqlLexer ctx);
static ANTLR3_INLINE  void	mWS    (pdqlLexer ctx);
static ANTLR3_INLINE  void	mSTRING    (pdqlLexer ctx);
static ANTLR3_INLINE  void	mEXPONENT    (pdqlLexer ctx);
static ANTLR3_INLINE  void	mHEX_DIGIT    (pdqlLexer ctx);
static ANTLR3_INLINE  void	mESC_SEQ    (pdqlLexer ctx);
static ANTLR3_INLINE  void	mOCTAL_ESC    (pdqlLexer ctx);
static ANTLR3_INLINE  void	mUNICODE_ESC    (pdqlLexer ctx);
static ANTLR3_INLINE  void	mCOMMA    (pdqlLexer ctx);
static ANTLR3_INLINE  void	mLPAREN    (pdqlLexer ctx);
static ANTLR3_INLINE  void	mRPAREN    (pdqlLexer ctx);
static ANTLR3_INLINE  void	mLBRAN    (pdqlLexer ctx);
static ANTLR3_INLINE  void	mRBRAN    (pdqlLexer ctx);
static ANTLR3_INLINE  void	mLBRAK    (pdqlLexer ctx);
static ANTLR3_INLINE  void	mRBRAK    (pdqlLexer ctx);
static ANTLR3_INLINE  void	mCOLON    (pdqlLexer ctx);
static ANTLR3_INLINE  void	mSEMICOLON    (pdqlLexer ctx);
static ANTLR3_INLINE  void	mTokens    (pdqlLexer ctx);
static void	dqlLexerFree(pdqlLexer ctx);

/* =========================================================================
 * Lexer matching rules end.
 * =========================================================================
 */



static void
dqlLexerFree  (pdqlLexer ctx)
{
    LEXER->free(LEXER);
    
    ANTLR3_FREE(ctx);
}

/** \brief Name of the grammar file that generated this code
 */
static const char fileName[] = "/home/cross/workspace/djondb/db/grammars/dql.g";

/** \brief Return the name of the grammar file that generated this code.
 */
static const char * getGrammarFileName()
{
	return fileName;
}

/** \brief Create a new lexer called dqlLexer
 *
 * \param[in]    instream Pointer to an initialized input stream
 * \return 
 *     - Success pdqlLexer initialized for the lex start
 *     - Fail NULL
 */
ANTLR3_API pdqlLexer dqlLexerNew         
(pANTLR3_INPUT_STREAM instream)
{
	// See if we can create a new lexer with the standard constructor
	//
	return dqlLexerNewSSD(instream, NULL);
}

/** \brief Create a new lexer called dqlLexer
 *
 * \param[in]    instream Pointer to an initialized input stream
 * \param[state] state Previously created shared recognizer stat
 * \return 
 *     - Success pdqlLexer initialized for the lex start
 *     - Fail NULL
 */
ANTLR3_API pdqlLexer dqlLexerNewSSD         
(pANTLR3_INPUT_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state)
{
    pdqlLexer ctx; // Context structure we will build and return

    ctx = (pdqlLexer) ANTLR3_CALLOC(1, sizeof(dqlLexer));

    if  (ctx == NULL)
    {
        // Failed to allocate memory for lexer context
        return  NULL;
    }

    /* -------------------------------------------------------------------
     * Memory for basic structure is allocated, now to fill in
     * in base ANTLR3 structures. We initialize the function pointers
     * for the standard ANTLR3 lexer function set, but upon return
     * from here, the programmer may set the pointers to provide custom
     * implementations of each function. 
     *
     * We don't use the macros defined in dqlLexer.h here so you can get a sense
     * of what goes where.
     */
    
    /* Create a base lexer, using the supplied input stream
     */
    ctx->pLexer	= antlr3LexerNewStream(ANTLR3_SIZE_HINT, instream, state);
    
    /* Check that we allocated the memory correctly
     */
    if	(ctx->pLexer == NULL)
    {
		ANTLR3_FREE(ctx);
		return  NULL;
    }
    /* Install the implementation of our dqlLexer interface
     */
    ctx->mTRUE	= mTRUE;
    ctx->mFALSE	= mFALSE;
    ctx->mNUMBER	= mNUMBER;
    ctx->mFLOAT	= mFLOAT;
    ctx->mDOLLAR	= mDOLLAR;
    ctx->mADM	= mADM;
    ctx->mXPATH	= mXPATH;
    ctx->mSELECT	= mSELECT;
    ctx->mINSERT	= mINSERT;
    ctx->mUPDATE	= mUPDATE;
    ctx->mREMOVE	= mREMOVE;
    ctx->mFROM	= mFROM;
    ctx->mWHERE	= mWHERE;
    ctx->mINTO	= mINTO;
    ctx->mWITH	= mWITH;
    ctx->mNOT	= mNOT;
    ctx->mOPER	= mOPER;
    ctx->mEXISTS	= mEXISTS;
    ctx->mOR	= mOR;
    ctx->mAND	= mAND;
    ctx->mTOP	= mTOP;
    ctx->mID	= mID;
    ctx->mNS_ID	= mNS_ID;
    ctx->mALL_FIELDS	= mALL_FIELDS;
    ctx->mCOMMENT	= mCOMMENT;
    ctx->mWS	= mWS;
    ctx->mSTRING	= mSTRING;
    ctx->mEXPONENT	= mEXPONENT;
    ctx->mHEX_DIGIT	= mHEX_DIGIT;
    ctx->mESC_SEQ	= mESC_SEQ;
    ctx->mOCTAL_ESC	= mOCTAL_ESC;
    ctx->mUNICODE_ESC	= mUNICODE_ESC;
    ctx->mCOMMA	= mCOMMA;
    ctx->mLPAREN	= mLPAREN;
    ctx->mRPAREN	= mRPAREN;
    ctx->mLBRAN	= mLBRAN;
    ctx->mRBRAN	= mRBRAN;
    ctx->mLBRAK	= mLBRAK;
    ctx->mRBRAK	= mRBRAK;
    ctx->mCOLON	= mCOLON;
    ctx->mSEMICOLON	= mSEMICOLON;
    ctx->mTokens	= mTokens;
    
    /** When the nextToken() call is made to this lexer's pANTLR3_TOKEN_SOURCE
     *  it will call mTokens() in this generated code, and will pass it the ctx
     * pointer of this lexer, not the context of the base lexer, so store that now.
     */
    ctx->pLexer->ctx	    = ctx;
    
    /**Install the token matching function
     */
    ctx->pLexer->mTokens = (void (*) (void *))(mTokens);
    
    ctx->getGrammarFileName	= getGrammarFileName;
    ctx->free		= dqlLexerFree;

    
    


    /* Return the newly built lexer to the caller
     */
    return  ctx;
}

/* =========================================================================
 * DFA tables for the lexer
 */
/** Static dfa state tables for Cyclic dfa:
 *    224:1: FLOAT : ( NUMBER '.' ( NUMBER )* ( EXPONENT )? | '.' ( NUMBER )+ ( EXPONENT )? | ( NUMBER )+ EXPONENT );
 */
static const ANTLR3_INT32 dfa7_eot[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa7_eof[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa7_min[5] =
    {
	46, 46, -1, -1, -1
    };
static const ANTLR3_INT32 dfa7_max[5] =
    {
	57, 101, -1, -1, -1
    };
static const ANTLR3_INT32 dfa7_accept[5] =
    {
	-1, -1, 2, 1, 3
    };
static const ANTLR3_INT32 dfa7_special[5] =
    {	
	-1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa7_T_empty	    NULL

static const ANTLR3_INT32 dfa7_T0[] =
    {
	3, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4
    };static const ANTLR3_INT32 dfa7_T1[] =
    {
	2, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa7_transitions[] =
{
    dfa7_T1, dfa7_T0, dfa7_T_empty, dfa7_T_empty, dfa7_T_empty	
};


/* Declare tracking structure for Cyclic DFA 7
 */
static
ANTLR3_CYCLIC_DFA cdfa7
    =	{
	    7,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"224:1: FLOAT : ( NUMBER '.' ( NUMBER )* ( EXPONENT )? | '.' ( NUMBER )+ ( EXPONENT )? | ( NUMBER )+ EXPONENT );",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa7_eot,	    /* EOT table			    */
	    dfa7_eof,	    /* EOF table			    */
	    dfa7_min,	    /* Minimum tokens for each state    */
	    dfa7_max,	    /* Maximum tokens for each state    */
	    dfa7_accept,	/* Accept table			    */
	    dfa7_special,	/* Special transition states	    */
	    dfa7_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 7
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    1:1: Tokens : ( TRUE | FALSE | NUMBER | FLOAT | XPATH | SELECT | INSERT | UPDATE | REMOVE | FROM | WHERE | INTO | WITH | NOT | OPER | EXISTS | OR | AND | TOP | ID | NS_ID | ALL_FIELDS | COMMENT | WS | STRING | COMMA | LPAREN | RPAREN | LBRAN | RBRAN | LBRAK | RBRAK | COLON | SEMICOLON );
 */
static const ANTLR3_INT32 dfa25_eot[100] =
    {
	-1, 33, 33, 37, -1, -1, 33, 33, 33, 33, 33, 33, -1, 33, 33, 33, 33, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 33, 33, 33, -1, -1, 33, 
	33, -1, 33, 33, 33, 33, 33, 33, 33, 33, 61, 33, 33, 64, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 74, 33, -1, 76, 77, -1, 33, 79, 33, 33, 82, 33, 33, 
	33, 86, -1, 33, -1, -1, 88, -1, 33, 33, -1, 33, 33, 93, -1, 33, -1, 95, 
	96, 97, 98, -1, 99, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa25_eof[100] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa25_min[100] =
    {
	9, 46, 46, 46, -1, -1, 46, 46, 46, 46, 46, 46, -1, 46, 46, 46, 46, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, 46, 46, -1, -1, 46, 
	46, -1, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, -1, 46, 46, -1, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, -1, 46, -1, -1, 46, -1, 46, 46, -1, 46, 46, 46, -1, 46, -1, 46, 
	46, 46, 46, -1, 46, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa25_max[100] =
    {
	125, 122, 122, 101, -1, -1, 122, 122, 122, 122, 122, 122, -1, 122, 122, 
	122, 122, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 122, 122, 
	122, -1, -1, 122, 122, -1, 122, 122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, -1, 
	122, 122, -1, 122, 122, 122, 122, 122, 122, 122, 122, 122, -1, 122, -1, 
	-1, 122, -1, 122, 122, -1, 122, 122, 122, -1, 122, -1, 122, 122, 122, 122, 
	-1, 122, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa25_accept[100] =
    {
	-1, -1, -1, -1, 4, 5, -1, -1, -1, -1, -1, -1, 15, -1, -1, -1, -1, 22, 23, 
	24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, -1, -1, -1, 20, 21, -1, -1, 
	3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 17, -1, -1, 19, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 14, -1, 18, 1, -1, 10, -1, -1, 12, -1, -1, -1, 13, -1, 2, -1, -1, -1, 
	-1, 11, -1, 6, 7, 8, 9, 16
    };
static const ANTLR3_INT32 dfa25_special[100] =
    {	
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa25_T_empty	    NULL

static const ANTLR3_INT32 dfa25_T0[] =
    {
	34, -1, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, -1, -1, -1, -1, -1, -1, 
	-1, 32, 32, 32, 32, 63, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 32, -1, -1, -1, -1, 32, -1, 32, 32, 32, 
	32, 63, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32
    };static const ANTLR3_INT32 dfa25_T1[] =
    {
	34, -1, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, -1, -1, -1, -1, -1, -1, 
	-1, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 48, 32, 32, 32, 32, 32, -1, -1, -1, -1, 32, -1, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 48, 
	32, 32, 32, 32, 32
    };static const ANTLR3_INT32 dfa25_T2[] =
    {
	34, -1, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, -1, -1, -1, -1, -1, -1, 
	-1, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 47, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 32, -1, -1, -1, -1, 32, -1, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 47, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32
    };static const ANTLR3_INT32 dfa25_T3[] =
    {
	34, -1, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, -1, -1, -1, -1, -1, -1, 
	-1, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 
	36, 32, 32, 32, 32, 32, 32, 32, 32, -1, -1, -1, -1, 32, -1, 35, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 36, 32, 32, 32, 
	32, 32, 32, 32, 32
    };static const ANTLR3_INT32 dfa25_T4[] =
    {
	34, -1, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, -1, -1, -1, -1, -1, -1, 
	-1, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 32, -1, -1, -1, -1, 32, -1, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32
    };static const ANTLR3_INT32 dfa25_T5[] =
    {
	34, -1, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, -1, -1, -1, -1, -1, -1, 
	-1, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 
	46, 32, 32, 32, 32, 32, 32, 32, 32, -1, -1, -1, -1, 32, -1, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 46, 32, 32, 32, 
	32, 32, 32, 32, 32
    };static const ANTLR3_INT32 dfa25_T6[] =
    {
	34, -1, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, -1, -1, -1, -1, -1, -1, 
	-1, 32, 32, 32, 32, 78, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 32, -1, -1, -1, -1, 32, -1, 32, 32, 32, 
	32, 78, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32
    };static const ANTLR3_INT32 dfa25_T7[] =
    {
	34, -1, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, -1, -1, -1, -1, -1, -1, 
	-1, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 
	32, 65, 32, 32, 32, 32, 32, 32, 32, -1, -1, -1, -1, 32, -1, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 65, 32, 32, 
	32, 32, 32, 32, 32
    };static const ANTLR3_INT32 dfa25_T8[] =
    {
	34, -1, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, -1, -1, -1, -1, -1, -1, 
	-1, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 50, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 32, -1, -1, -1, -1, 32, -1, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 50, 32, 32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32
    };static const ANTLR3_INT32 dfa25_T9[] =
    {
	4, -1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4
    };static const ANTLR3_INT32 dfa25_T10[] =
    {
	34, -1, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, -1, -1, -1, -1, -1, -1, 
	-1, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 49, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 32, -1, -1, -1, -1, 32, -1, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 49, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32
    };static const ANTLR3_INT32 dfa25_T11[] =
    {
	34, -1, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, -1, -1, -1, -1, -1, -1, 
	-1, 32, 32, 32, 62, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 32, -1, -1, -1, -1, 32, -1, 32, 32, 32, 
	62, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32
    };static const ANTLR3_INT32 dfa25_T12[] =
    {
	34, -1, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, -1, -1, -1, -1, -1, -1, 
	-1, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 
	32, 94, 32, 32, 32, 32, 32, 32, 32, -1, -1, -1, -1, 32, -1, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 94, 32, 32, 
	32, 32, 32, 32, 32
    };static const ANTLR3_INT32 dfa25_T13[] =
    {
	34, -1, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, -1, -1, -1, -1, -1, -1, 
	-1, 32, 32, 32, 32, 32, 32, 32, 32, 60, 32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 32, -1, -1, -1, -1, 32, -1, 32, 32, 32, 
	32, 32, 32, 32, 32, 60, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32
    };static const ANTLR3_INT32 dfa25_T14[] =
    {
	34, -1, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, -1, -1, -1, -1, -1, -1, 
	-1, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 
	32, 75, 32, 32, 32, 32, 32, 32, 32, -1, -1, -1, -1, 32, -1, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 75, 32, 32, 
	32, 32, 32, 32, 32
    };static const ANTLR3_INT32 dfa25_T15[] =
    {
	34, -1, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, -1, -1, -1, -1, -1, -1, 
	-1, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 87, 32, 32, 32, 32, 32, 32, -1, -1, -1, -1, 32, -1, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 87, 32, 
	32, 32, 32, 32, 32
    };static const ANTLR3_INT32 dfa25_T16[] =
    {
	34, -1, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, -1, -1, -1, -1, -1, -1, 
	-1, 32, 32, 32, 32, 38, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 32, -1, -1, -1, -1, 32, -1, 32, 32, 32, 
	32, 38, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32
    };static const ANTLR3_INT32 dfa25_T17[] =
    {
	34, -1, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, -1, -1, -1, -1, -1, -1, 
	-1, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 59, 32, 32, 32, 32, 32, 32, -1, -1, -1, -1, 32, -1, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 
	32, 32, 32, 32, 32
    };static const ANTLR3_INT32 dfa25_T18[] =
    {
	34, -1, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, -1, -1, -1, -1, -1, -1, 
	-1, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 39, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 32, -1, -1, -1, -1, 32, -1, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 39, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32
    };static const ANTLR3_INT32 dfa25_T19[] =
    {
	34, -1, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, -1, -1, -1, -1, -1, -1, 
	-1, 32, 32, 32, 32, 32, 32, 32, 73, 32, 32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 32, -1, -1, -1, -1, 32, -1, 32, 32, 32, 
	32, 32, 32, 32, 73, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32
    };static const ANTLR3_INT32 dfa25_T20[] =
    {
	34, -1, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, -1, -1, -1, -1, -1, -1, 
	-1, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 58, 32, 32, 32, 32, 32, 32, -1, -1, -1, -1, 32, -1, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 58, 32, 
	32, 32, 32, 32, 32
    };static const ANTLR3_INT32 dfa25_T21[] =
    {
	34, -1, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, -1, -1, -1, -1, -1, -1, 
	-1, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 69, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 32, -1, -1, -1, -1, 32, -1, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 69, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32
    };static const ANTLR3_INT32 dfa25_T22[] =
    {
	34, -1, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, -1, -1, -1, -1, -1, -1, 
	-1, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 31, 32, 32, 
	30, 32, 32, 32, 32, 32, 32, 32, 32, -1, -1, -1, -1, 32, -1, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 31, 32, 32, 30, 32, 32, 32, 
	32, 32, 32, 32, 32
    };static const ANTLR3_INT32 dfa25_T23[] =
    {
	34, -1, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, -1, -1, -1, -1, -1, -1, 
	-1, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 84, 32, 32, 32, 32, -1, -1, -1, -1, 32, -1, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 
	84, 32, 32, 32, 32
    };static const ANTLR3_INT32 dfa25_T24[] =
    {
	34, -1, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, -1, -1, -1, -1, -1, -1, 
	-1, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 40, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 32, -1, -1, -1, -1, 32, -1, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 40, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32
    };static const ANTLR3_INT32 dfa25_T25[] =
    {
	34, -1, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, -1, -1, -1, -1, -1, -1, 
	-1, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 71, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 32, -1, -1, -1, -1, 32, -1, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 71, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32
    };static const ANTLR3_INT32 dfa25_T26[] =
    {
	34, -1, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, -1, -1, -1, -1, -1, -1, 
	-1, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 56, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 32, -1, -1, -1, -1, 32, -1, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 32, 56, 32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32
    };static const ANTLR3_INT32 dfa25_T27[] =
    {
	34, -1, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, -1, -1, -1, -1, -1, -1, 
	-1, 32, 32, 32, 32, 92, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 32, -1, -1, -1, -1, 32, -1, 32, 32, 32, 
	32, 92, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32
    };static const ANTLR3_INT32 dfa25_T28[] =
    {
	34, -1, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, -1, -1, -1, -1, -1, -1, 
	-1, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 32, -1, -1, -1, -1, 32, -1, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32
    };static const ANTLR3_INT32 dfa25_T29[] =
    {
	34, -1, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, -1, -1, -1, -1, -1, -1, 
	-1, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 51, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 32, -1, -1, -1, -1, 32, -1, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 51, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32
    };static const ANTLR3_INT32 dfa25_T30[] =
    {
	34, -1, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, -1, -1, -1, -1, -1, -1, 
	-1, 32, 32, 32, 32, 85, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 32, -1, -1, -1, -1, 32, -1, 32, 32, 32, 
	32, 85, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32
    };static const ANTLR3_INT32 dfa25_T31[] =
    {
	34, -1, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, -1, -1, -1, -1, -1, -1, 
	-1, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 
	72, 32, 32, 32, 32, 32, 32, 32, 32, -1, -1, -1, -1, 32, -1, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 72, 32, 32, 32, 
	32, 32, 32, 32, 32
    };static const ANTLR3_INT32 dfa25_T32[] =
    {
	34, -1, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, -1, -1, -1, -1, -1, -1, 
	-1, 32, 32, 32, 32, 57, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 32, -1, -1, -1, -1, 32, -1, 32, 32, 32, 
	32, 57, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32
    };static const ANTLR3_INT32 dfa25_T33[] =
    {
	19, 19, -1, -1, 19, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 19, 12, 20, -1, 5, -1, -1, 20, 22, 23, 17, -1, 21, 
	-1, 4, 18, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 28, 29, 12, 12, 12, -1, -1, 15, 
	16, 16, 16, 13, 2, 16, 16, 7, 16, 16, 16, 16, 11, 14, 16, 16, 9, 6, 1, 
	8, 16, 10, 16, 16, 16, 26, -1, 27, -1, 16, -1, 15, 16, 16, 16, 13, 2, 16, 
	16, 7, 16, 16, 16, 16, 11, 14, 16, 16, 9, 6, 1, 8, 16, 10, 16, 16, 16, 
	24, -1, 25
    };static const ANTLR3_INT32 dfa25_T34[] =
    {
	34, -1, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, -1, -1, -1, -1, -1, -1, 
	-1, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 90, 32, 32, 32, 32, 32, 32, -1, -1, -1, -1, 32, -1, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 90, 32, 
	32, 32, 32, 32, 32
    };static const ANTLR3_INT32 dfa25_T35[] =
    {
	34, -1, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, -1, -1, -1, -1, -1, -1, 
	-1, 32, 32, 32, 32, 68, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 32, -1, -1, -1, -1, 32, -1, 32, 32, 32, 
	32, 68, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32
    };static const ANTLR3_INT32 dfa25_T36[] =
    {
	34, -1, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, -1, -1, -1, -1, -1, -1, 
	-1, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 
	81, 32, 32, 32, 32, 32, 32, 32, 32, -1, -1, -1, -1, 32, -1, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 81, 32, 32, 32, 
	32, 32, 32, 32, 32
    };static const ANTLR3_INT32 dfa25_T37[] =
    {
	34, -1, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, -1, -1, -1, -1, -1, -1, 
	-1, 32, 32, 32, 55, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 32, -1, -1, -1, -1, 32, -1, 32, 32, 32, 
	55, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32
    };static const ANTLR3_INT32 dfa25_T38[] =
    {
	34, -1, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, -1, -1, -1, -1, -1, -1, 
	-1, 32, 32, 32, 32, 41, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 32, -1, -1, -1, -1, 32, -1, 32, 32, 32, 
	32, 41, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32
    };static const ANTLR3_INT32 dfa25_T39[] =
    {
	34, -1, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, -1, -1, -1, -1, -1, -1, 
	-1, 70, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 32, -1, -1, -1, -1, 32, -1, 70, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32
    };static const ANTLR3_INT32 dfa25_T40[] =
    {
	34, -1, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, -1, -1, -1, -1, -1, -1, 
	-1, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 83, 32, 32, 32, 32, 32, 32, -1, -1, -1, -1, 32, -1, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 83, 32, 
	32, 32, 32, 32, 32
    };static const ANTLR3_INT32 dfa25_T41[] =
    {
	34, -1, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, -1, -1, -1, -1, -1, -1, 
	-1, 32, 32, 32, 32, 32, 32, 32, 42, 43, 32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 32, -1, -1, -1, -1, 32, -1, 32, 32, 32, 
	32, 32, 32, 32, 42, 43, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32
    };static const ANTLR3_INT32 dfa25_T42[] =
    {
	34, -1, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, -1, -1, -1, -1, -1, -1, 
	-1, 32, 32, 32, 32, 91, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 32, -1, -1, -1, -1, 32, -1, 32, 32, 32, 
	32, 91, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32
    };static const ANTLR3_INT32 dfa25_T43[] =
    {
	34, -1, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, -1, -1, -1, -1, -1, -1, 
	-1, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 44, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 32, -1, -1, -1, -1, 32, -1, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 44, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32
    };static const ANTLR3_INT32 dfa25_T44[] =
    {
	34, -1, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, -1, -1, -1, -1, -1, -1, 
	-1, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 
	32, 53, 54, 32, 32, 32, 32, 32, 32, -1, -1, -1, -1, 32, -1, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 53, 54, 32, 
	32, 32, 32, 32, 32
    };static const ANTLR3_INT32 dfa25_T45[] =
    {
	34, -1, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, -1, -1, -1, -1, -1, -1, 
	-1, 32, 32, 32, 32, 67, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 32, -1, -1, -1, -1, 32, -1, 32, 32, 32, 
	32, 67, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32
    };static const ANTLR3_INT32 dfa25_T46[] =
    {
	34, -1, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, -1, -1, -1, -1, -1, -1, 
	-1, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 52, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 32, -1, -1, -1, -1, 32, -1, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 52, 32, 32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32
    };static const ANTLR3_INT32 dfa25_T47[] =
    {
	34, -1, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, -1, -1, -1, -1, -1, -1, 
	-1, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 89, 32, 32, 32, 32, 32, 32, -1, -1, -1, -1, 32, -1, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 89, 32, 
	32, 32, 32, 32, 32
    };static const ANTLR3_INT32 dfa25_T48[] =
    {
	34, -1, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, -1, -1, -1, -1, -1, -1, 
	-1, 32, 32, 80, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 32, -1, -1, -1, -1, 32, -1, 32, 32, 80, 
	32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32
    };static const ANTLR3_INT32 dfa25_T49[] =
    {
	34, -1, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, -1, -1, -1, -1, -1, -1, 
	-1, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 45, 32, 32, -1, -1, -1, -1, 32, -1, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 45, 32, 32
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa25_transitions[] =
{
    dfa25_T33, dfa25_T22, dfa25_T3, dfa25_T9, dfa25_T_empty, dfa25_T_empty, 
    dfa25_T16, dfa25_T18, dfa25_T24, dfa25_T38, dfa25_T41, dfa25_T43, dfa25_T_empty, 
    dfa25_T49, dfa25_T5, dfa25_T2, dfa25_T4, dfa25_T_empty, dfa25_T_empty, 
    dfa25_T_empty, dfa25_T_empty, dfa25_T_empty, dfa25_T_empty, dfa25_T_empty, 
    dfa25_T_empty, dfa25_T_empty, dfa25_T_empty, dfa25_T_empty, dfa25_T_empty, 
    dfa25_T_empty, dfa25_T1, dfa25_T10, dfa25_T4, dfa25_T_empty, dfa25_T_empty, 
    dfa25_T8, dfa25_T29, dfa25_T_empty, dfa25_T46, dfa25_T44, dfa25_T37, 
    dfa25_T26, dfa25_T32, dfa25_T20, dfa25_T17, dfa25_T13, dfa25_T4, dfa25_T11, 
    dfa25_T0, dfa25_T4, dfa25_T7, dfa25_T28, dfa25_T45, dfa25_T35, dfa25_T21, 
    dfa25_T39, dfa25_T25, dfa25_T31, dfa25_T19, dfa25_T4, dfa25_T14, dfa25_T_empty, 
    dfa25_T4, dfa25_T4, dfa25_T_empty, dfa25_T6, dfa25_T4, dfa25_T48, dfa25_T36, 
    dfa25_T4, dfa25_T40, dfa25_T23, dfa25_T30, dfa25_T4, dfa25_T_empty, 
    dfa25_T15, dfa25_T_empty, dfa25_T_empty, dfa25_T4, dfa25_T_empty, dfa25_T47, 
    dfa25_T34, dfa25_T_empty, dfa25_T42, dfa25_T27, dfa25_T4, dfa25_T_empty, 
    dfa25_T12, dfa25_T_empty, dfa25_T4, dfa25_T4, dfa25_T4, dfa25_T4, dfa25_T_empty, 
    dfa25_T4, dfa25_T_empty, dfa25_T_empty, dfa25_T_empty, dfa25_T_empty, 
    dfa25_T_empty	
};


/* Declare tracking structure for Cyclic DFA 25
 */
static
ANTLR3_CYCLIC_DFA cdfa25
    =	{
	    25,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"1:1: Tokens : ( TRUE | FALSE | NUMBER | FLOAT | XPATH | SELECT | INSERT | UPDATE | REMOVE | FROM | WHERE | INTO | WITH | NOT | OPER | EXISTS | OR | AND | TOP | ID | NS_ID | ALL_FIELDS | COMMENT | WS | STRING | COMMA | LPAREN | RPAREN | LBRAN | RBRAN | LBRAK | RBRAK | COLON | SEMICOLON );",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa25_eot,	    /* EOT table			    */
	    dfa25_eof,	    /* EOF table			    */
	    dfa25_min,	    /* Minimum tokens for each state    */
	    dfa25_max,	    /* Maximum tokens for each state    */
	    dfa25_accept,	/* Accept table			    */
	    dfa25_special,	/* Special transition states	    */
	    dfa25_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 25
 * ---------------------
 */ 
/* =========================================================================
 * End of DFA tables for the lexer
 */ 

/* =========================================================================
 * Functions to match the lexer grammar defined tokens from the input stream
 */

//   Comes from: 219:6: ( ( 't' | 'T' ) ( 'r' | 'R' ) ( 'u' | 'U' ) ( 'e' | 'E' ) )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start TRUE
 *
 * Looks to match the characters the constitute the token TRUE
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mTRUE(pdqlLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = TRUE;
       
    
    // /home/cross/workspace/djondb/db/grammars/dql.g:219:6: ( ( 't' | 'T' ) ( 'r' | 'R' ) ( 'u' | 'U' ) ( 'e' | 'E' ) )
    // /home/cross/workspace/djondb/db/grammars/dql.g:219:8: ( 't' | 'T' ) ( 'r' | 'R' ) ( 'u' | 'U' ) ( 'e' | 'E' )
    {
        if ( LA(1) == 'T' || LA(1) == 't' )
        {
            CONSUME();

        }
        else 
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();    goto ruleTRUEEx;
        }

        if ( LA(1) == 'R' || LA(1) == 'r' )
        {
            CONSUME();

        }
        else 
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();    goto ruleTRUEEx;
        }

        if ( LA(1) == 'U' || LA(1) == 'u' )
        {
            CONSUME();

        }
        else 
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();    goto ruleTRUEEx;
        }

        if ( LA(1) == 'E' || LA(1) == 'e' )
        {
            CONSUME();

        }
        else 
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();    goto ruleTRUEEx;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleTRUEEx; /* Prevent compiler warnings */
    ruleTRUEEx: ;

}
// $ANTLR end TRUE

//   Comes from: 220:7: ( ( 'f' | 'F' ) ( 'a' | 'A' ) ( 'l' | 'L' ) ( 's' | 'S' ) ( 'e' | 'E' ) )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start FALSE
 *
 * Looks to match the characters the constitute the token FALSE
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mFALSE(pdqlLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = FALSE;
       
    
    // /home/cross/workspace/djondb/db/grammars/dql.g:220:7: ( ( 'f' | 'F' ) ( 'a' | 'A' ) ( 'l' | 'L' ) ( 's' | 'S' ) ( 'e' | 'E' ) )
    // /home/cross/workspace/djondb/db/grammars/dql.g:220:9: ( 'f' | 'F' ) ( 'a' | 'A' ) ( 'l' | 'L' ) ( 's' | 'S' ) ( 'e' | 'E' )
    {
        if ( LA(1) == 'F' || LA(1) == 'f' )
        {
            CONSUME();

        }
        else 
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();    goto ruleFALSEEx;
        }

        if ( LA(1) == 'A' || LA(1) == 'a' )
        {
            CONSUME();

        }
        else 
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();    goto ruleFALSEEx;
        }

        if ( LA(1) == 'L' || LA(1) == 'l' )
        {
            CONSUME();

        }
        else 
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();    goto ruleFALSEEx;
        }

        if ( LA(1) == 'S' || LA(1) == 's' )
        {
            CONSUME();

        }
        else 
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();    goto ruleFALSEEx;
        }

        if ( LA(1) == 'E' || LA(1) == 'e' )
        {
            CONSUME();

        }
        else 
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();    goto ruleFALSEEx;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleFALSEEx; /* Prevent compiler warnings */
    ruleFALSEEx: ;

}
// $ANTLR end FALSE

//   Comes from: 222:8: ( ( '0' .. '9' )+ )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start NUMBER
 *
 * Looks to match the characters the constitute the token NUMBER
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mNUMBER(pdqlLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = NUMBER;
       
    
    // /home/cross/workspace/djondb/db/grammars/dql.g:222:8: ( ( '0' .. '9' )+ )
    // /home/cross/workspace/djondb/db/grammars/dql.g:222:10: ( '0' .. '9' )+
    {
        // /home/cross/workspace/djondb/db/grammars/dql.g:222:10: ( '0' .. '9' )+
        {
            int cnt1=0;

            for (;;)
            {
                int alt1=2;
        	switch ( LA(1) ) 
        	{
        	case '0':
        	case '1':
        	case '2':
        	case '3':
        	case '4':
        	case '5':
        	case '6':
        	case '7':
        	case '8':
        	case '9':
        		{
        			alt1=1;
        		}
        	    break;

        	}

        	switch (alt1) 
        	{
        	    case 1:
        	        // /home/cross/workspace/djondb/db/grammars/dql.g:222:10: '0' .. '9'
        	        {
        	            MATCHRANGE('0', '9'); 
        	            if  (HASEXCEPTION())
        	            {
        	                goto ruleNUMBEREx;
        	            }


        	        }
        	        break;

        	    default:
        	    
        		if ( cnt1 >= 1 )
        		{
        		    goto loop1;
        		}
        		/* mismatchedSetEx()
        		 */
        		CONSTRUCTEX();
        		EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
        		EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


        		goto ruleNUMBEREx;
        	}
        	cnt1++;
            }
            loop1: ;	/* Jump to here if this rule does not match */
        }

    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleNUMBEREx; /* Prevent compiler warnings */
    ruleNUMBEREx: ;

}
// $ANTLR end NUMBER

//   Comes from: 225:5: ( NUMBER '.' ( NUMBER )* ( EXPONENT )? | '.' ( NUMBER )+ ( EXPONENT )? | ( NUMBER )+ EXPONENT )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start FLOAT
 *
 * Looks to match the characters the constitute the token FLOAT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mFLOAT(pdqlLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = FLOAT;
       
    
    {
        //  /home/cross/workspace/djondb/db/grammars/dql.g:225:5: ( NUMBER '.' ( NUMBER )* ( EXPONENT )? | '.' ( NUMBER )+ ( EXPONENT )? | ( NUMBER )+ EXPONENT )
        
        ANTLR3_UINT32 alt7;

        alt7=3;

        alt7 = cdfa7.predict(ctx, RECOGNIZER, ISTREAM, &cdfa7);
        if  (HASEXCEPTION())
        {
            goto ruleFLOATEx;
        }

        switch (alt7) 
        {
    	case 1:
    	    // /home/cross/workspace/djondb/db/grammars/dql.g:225:9: NUMBER '.' ( NUMBER )* ( EXPONENT )?
    	    {
    	        /* 225:9: NUMBER '.' ( NUMBER )* ( EXPONENT )? */
    	        mNUMBER(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleFLOATEx;
    	        }

    	        MATCHC('.'); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleFLOATEx;
    	        }


    	        // /home/cross/workspace/djondb/db/grammars/dql.g:225:20: ( NUMBER )*

    	        for (;;)
    	        {
    	            int alt2=2;
    	            switch ( LA(1) ) 
    	            {
    	            case '0':
    	            case '1':
    	            case '2':
    	            case '3':
    	            case '4':
    	            case '5':
    	            case '6':
    	            case '7':
    	            case '8':
    	            case '9':
    	            	{
    	            		alt2=1;
    	            	}
    	                break;

    	            }

    	            switch (alt2) 
    	            {
    	        	case 1:
    	        	    // /home/cross/workspace/djondb/db/grammars/dql.g:225:21: NUMBER
    	        	    {
    	        	        /* 225:21: NUMBER */
    	        	        mNUMBER(ctx ); 
    	        	        if  (HASEXCEPTION())
    	        	        {
    	        	            goto ruleFLOATEx;
    	        	        }


    	        	    }
    	        	    break;

    	        	default:
    	        	    goto loop2;	/* break out of the loop */
    	        	    break;
    	            }
    	        }
    	        loop2: ; /* Jump out to here if this rule does not match */


    	        // /home/cross/workspace/djondb/db/grammars/dql.g:225:30: ( EXPONENT )?
    	        {
    	            int alt3=2;
    	            switch ( LA(1) ) 
    	            {
    	                case 'E':
    	                case 'e':
    	                	{
    	                		alt3=1;
    	                	}
    	                    break;
    	            }

    	            switch (alt3) 
    	            {
    	        	case 1:
    	        	    // /home/cross/workspace/djondb/db/grammars/dql.g:225:30: EXPONENT
    	        	    {
    	        	        /* 225:30: EXPONENT */
    	        	        mEXPONENT(ctx ); 
    	        	        if  (HASEXCEPTION())
    	        	        {
    	        	            goto ruleFLOATEx;
    	        	        }


    	        	    }
    	        	    break;

    	            }
    	        }

    	    }
    	    break;
    	case 2:
    	    // /home/cross/workspace/djondb/db/grammars/dql.g:226:9: '.' ( NUMBER )+ ( EXPONENT )?
    	    {
    	        MATCHC('.'); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleFLOATEx;
    	        }

    	        // /home/cross/workspace/djondb/db/grammars/dql.g:226:13: ( NUMBER )+
    	        {
    	            int cnt4=0;

    	            for (;;)
    	            {
    	                int alt4=2;
    	        	switch ( LA(1) ) 
    	        	{
    	        	case '0':
    	        	case '1':
    	        	case '2':
    	        	case '3':
    	        	case '4':
    	        	case '5':
    	        	case '6':
    	        	case '7':
    	        	case '8':
    	        	case '9':
    	        		{
    	        			alt4=1;
    	        		}
    	        	    break;

    	        	}

    	        	switch (alt4) 
    	        	{
    	        	    case 1:
    	        	        // /home/cross/workspace/djondb/db/grammars/dql.g:226:14: NUMBER
    	        	        {
    	        	            /* 226:14: NUMBER */
    	        	            mNUMBER(ctx ); 
    	        	            if  (HASEXCEPTION())
    	        	            {
    	        	                goto ruleFLOATEx;
    	        	            }


    	        	        }
    	        	        break;

    	        	    default:
    	        	    
    	        		if ( cnt4 >= 1 )
    	        		{
    	        		    goto loop4;
    	        		}
    	        		/* mismatchedSetEx()
    	        		 */
    	        		CONSTRUCTEX();
    	        		EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
    	        		EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


    	        		goto ruleFLOATEx;
    	        	}
    	        	cnt4++;
    	            }
    	            loop4: ;	/* Jump to here if this rule does not match */
    	        }

    	        // /home/cross/workspace/djondb/db/grammars/dql.g:226:23: ( EXPONENT )?
    	        {
    	            int alt5=2;
    	            switch ( LA(1) ) 
    	            {
    	                case 'E':
    	                case 'e':
    	                	{
    	                		alt5=1;
    	                	}
    	                    break;
    	            }

    	            switch (alt5) 
    	            {
    	        	case 1:
    	        	    // /home/cross/workspace/djondb/db/grammars/dql.g:226:23: EXPONENT
    	        	    {
    	        	        /* 226:23: EXPONENT */
    	        	        mEXPONENT(ctx ); 
    	        	        if  (HASEXCEPTION())
    	        	        {
    	        	            goto ruleFLOATEx;
    	        	        }


    	        	    }
    	        	    break;

    	            }
    	        }

    	    }
    	    break;
    	case 3:
    	    // /home/cross/workspace/djondb/db/grammars/dql.g:227:9: ( NUMBER )+ EXPONENT
    	    {
    	        // /home/cross/workspace/djondb/db/grammars/dql.g:227:9: ( NUMBER )+
    	        {
    	            int cnt6=0;

    	            for (;;)
    	            {
    	                int alt6=2;
    	        	switch ( LA(1) ) 
    	        	{
    	        	case '0':
    	        	case '1':
    	        	case '2':
    	        	case '3':
    	        	case '4':
    	        	case '5':
    	        	case '6':
    	        	case '7':
    	        	case '8':
    	        	case '9':
    	        		{
    	        			alt6=1;
    	        		}
    	        	    break;

    	        	}

    	        	switch (alt6) 
    	        	{
    	        	    case 1:
    	        	        // /home/cross/workspace/djondb/db/grammars/dql.g:227:10: NUMBER
    	        	        {
    	        	            /* 227:10: NUMBER */
    	        	            mNUMBER(ctx ); 
    	        	            if  (HASEXCEPTION())
    	        	            {
    	        	                goto ruleFLOATEx;
    	        	            }


    	        	        }
    	        	        break;

    	        	    default:
    	        	    
    	        		if ( cnt6 >= 1 )
    	        		{
    	        		    goto loop6;
    	        		}
    	        		/* mismatchedSetEx()
    	        		 */
    	        		CONSTRUCTEX();
    	        		EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
    	        		EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


    	        		goto ruleFLOATEx;
    	        	}
    	        	cnt6++;
    	            }
    	            loop6: ;	/* Jump to here if this rule does not match */
    	        }
    	        /* 227:9: ( NUMBER )+ EXPONENT */
    	        mEXPONENT(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleFLOATEx;
    	        }


    	    }
    	    break;

        }
    }
	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleFLOATEx; /* Prevent compiler warnings */
    ruleFLOATEx: ;

}
// $ANTLR end FLOAT

//   Comes from: 230:18: ( '$' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start DOLLAR
 *
 * Looks to match the characters the constitute the token DOLLAR
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mDOLLAR(pdqlLexer ctx)
{
	ANTLR3_UINT32	_type;

        
    // /home/cross/workspace/djondb/db/grammars/dql.g:230:18: ( '$' )
    // /home/cross/workspace/djondb/db/grammars/dql.g:230:20: '$'
    {
        MATCHC('$'); 
        if  (HASEXCEPTION())
        {
            goto ruleDOLLAREx;
        }


    }



    // This is where rules clean up and exit
    //
    goto ruleDOLLAREx; /* Prevent compiler warnings */
    ruleDOLLAREx: ;

}
// $ANTLR end DOLLAR

//   Comes from: 231:25: ( ':' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start ADM
 *
 * Looks to match the characters the constitute the token ADM
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mADM(pdqlLexer ctx)
{
	ANTLR3_UINT32	_type;

        
    // /home/cross/workspace/djondb/db/grammars/dql.g:231:25: ( ':' )
    // /home/cross/workspace/djondb/db/grammars/dql.g:231:27: ':'
    {
        MATCHC(':'); 
        if  (HASEXCEPTION())
        {
            goto ruleADMEx;
        }


    }



    // This is where rules clean up and exit
    //
    goto ruleADMEx; /* Prevent compiler warnings */
    ruleADMEx: ;

}
// $ANTLR end ADM

//   Comes from: 233:9: ( DOLLAR STRING )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start XPATH
 *
 * Looks to match the characters the constitute the token XPATH
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mXPATH(pdqlLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = XPATH;
       
    
    // /home/cross/workspace/djondb/db/grammars/dql.g:233:9: ( DOLLAR STRING )
    // /home/cross/workspace/djondb/db/grammars/dql.g:233:11: DOLLAR STRING
    {
        /* 233:11: DOLLAR STRING */
        mDOLLAR(ctx ); 
        if  (HASEXCEPTION())
        {
            goto ruleXPATHEx;
        }

        /* 233:11: DOLLAR STRING */
        mSTRING(ctx ); 
        if  (HASEXCEPTION())
        {
            goto ruleXPATHEx;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleXPATHEx; /* Prevent compiler warnings */
    ruleXPATHEx: ;

}
// $ANTLR end XPATH

//   Comes from: 235:8: ( ( 's' | 'S' ) ( 'e' | 'E' ) ( 'l' | 'L' ) ( 'e' | 'E' ) ( 'c' | 'C' ) ( 't' | 'T' ) )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start SELECT
 *
 * Looks to match the characters the constitute the token SELECT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mSELECT(pdqlLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = SELECT;
       
    
    // /home/cross/workspace/djondb/db/grammars/dql.g:235:8: ( ( 's' | 'S' ) ( 'e' | 'E' ) ( 'l' | 'L' ) ( 'e' | 'E' ) ( 'c' | 'C' ) ( 't' | 'T' ) )
    // /home/cross/workspace/djondb/db/grammars/dql.g:235:10: ( 's' | 'S' ) ( 'e' | 'E' ) ( 'l' | 'L' ) ( 'e' | 'E' ) ( 'c' | 'C' ) ( 't' | 'T' )
    {
        if ( LA(1) == 'S' || LA(1) == 's' )
        {
            CONSUME();

        }
        else 
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();    goto ruleSELECTEx;
        }

        if ( LA(1) == 'E' || LA(1) == 'e' )
        {
            CONSUME();

        }
        else 
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();    goto ruleSELECTEx;
        }

        if ( LA(1) == 'L' || LA(1) == 'l' )
        {
            CONSUME();

        }
        else 
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();    goto ruleSELECTEx;
        }

        if ( LA(1) == 'E' || LA(1) == 'e' )
        {
            CONSUME();

        }
        else 
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();    goto ruleSELECTEx;
        }

        if ( LA(1) == 'C' || LA(1) == 'c' )
        {
            CONSUME();

        }
        else 
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();    goto ruleSELECTEx;
        }

        if ( LA(1) == 'T' || LA(1) == 't' )
        {
            CONSUME();

        }
        else 
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();    goto ruleSELECTEx;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleSELECTEx; /* Prevent compiler warnings */
    ruleSELECTEx: ;

}
// $ANTLR end SELECT

//   Comes from: 236:8: ( ( 'i' | 'I' ) ( 'n' | 'N' ) ( 's' | 'S' ) ( 'e' | 'E' ) ( 'r' | 'R' ) ( 't' | 'T' ) )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start INSERT
 *
 * Looks to match the characters the constitute the token INSERT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mINSERT(pdqlLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = INSERT;
       
    
    // /home/cross/workspace/djondb/db/grammars/dql.g:236:8: ( ( 'i' | 'I' ) ( 'n' | 'N' ) ( 's' | 'S' ) ( 'e' | 'E' ) ( 'r' | 'R' ) ( 't' | 'T' ) )
    // /home/cross/workspace/djondb/db/grammars/dql.g:236:10: ( 'i' | 'I' ) ( 'n' | 'N' ) ( 's' | 'S' ) ( 'e' | 'E' ) ( 'r' | 'R' ) ( 't' | 'T' )
    {
        if ( LA(1) == 'I' || LA(1) == 'i' )
        {
            CONSUME();

        }
        else 
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();    goto ruleINSERTEx;
        }

        if ( LA(1) == 'N' || LA(1) == 'n' )
        {
            CONSUME();

        }
        else 
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();    goto ruleINSERTEx;
        }

        if ( LA(1) == 'S' || LA(1) == 's' )
        {
            CONSUME();

        }
        else 
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();    goto ruleINSERTEx;
        }

        if ( LA(1) == 'E' || LA(1) == 'e' )
        {
            CONSUME();

        }
        else 
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();    goto ruleINSERTEx;
        }

        if ( LA(1) == 'R' || LA(1) == 'r' )
        {
            CONSUME();

        }
        else 
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();    goto ruleINSERTEx;
        }

        if ( LA(1) == 'T' || LA(1) == 't' )
        {
            CONSUME();

        }
        else 
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();    goto ruleINSERTEx;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleINSERTEx; /* Prevent compiler warnings */
    ruleINSERTEx: ;

}
// $ANTLR end INSERT

//   Comes from: 237:8: ( ( 'u' | 'U' ) ( 'p' | 'P' ) ( 'd' | 'D' ) ( 'a' | 'A' ) ( 't' | 'T' ) ( 'e' | 'E' ) )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start UPDATE
 *
 * Looks to match the characters the constitute the token UPDATE
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mUPDATE(pdqlLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = UPDATE;
       
    
    // /home/cross/workspace/djondb/db/grammars/dql.g:237:8: ( ( 'u' | 'U' ) ( 'p' | 'P' ) ( 'd' | 'D' ) ( 'a' | 'A' ) ( 't' | 'T' ) ( 'e' | 'E' ) )
    // /home/cross/workspace/djondb/db/grammars/dql.g:237:10: ( 'u' | 'U' ) ( 'p' | 'P' ) ( 'd' | 'D' ) ( 'a' | 'A' ) ( 't' | 'T' ) ( 'e' | 'E' )
    {
        if ( LA(1) == 'U' || LA(1) == 'u' )
        {
            CONSUME();

        }
        else 
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();    goto ruleUPDATEEx;
        }

        if ( LA(1) == 'P' || LA(1) == 'p' )
        {
            CONSUME();

        }
        else 
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();    goto ruleUPDATEEx;
        }

        if ( LA(1) == 'D' || LA(1) == 'd' )
        {
            CONSUME();

        }
        else 
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();    goto ruleUPDATEEx;
        }

        if ( LA(1) == 'A' || LA(1) == 'a' )
        {
            CONSUME();

        }
        else 
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();    goto ruleUPDATEEx;
        }

        if ( LA(1) == 'T' || LA(1) == 't' )
        {
            CONSUME();

        }
        else 
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();    goto ruleUPDATEEx;
        }

        if ( LA(1) == 'E' || LA(1) == 'e' )
        {
            CONSUME();

        }
        else 
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();    goto ruleUPDATEEx;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleUPDATEEx; /* Prevent compiler warnings */
    ruleUPDATEEx: ;

}
// $ANTLR end UPDATE

//   Comes from: 238:8: ( ( 'r' | 'R' ) ( 'e' | 'E' ) ( 'm' | 'M' ) ( 'o' | 'O' ) ( 'v' | 'V' ) ( 'e' | 'E' ) )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start REMOVE
 *
 * Looks to match the characters the constitute the token REMOVE
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mREMOVE(pdqlLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = REMOVE;
       
    
    // /home/cross/workspace/djondb/db/grammars/dql.g:238:8: ( ( 'r' | 'R' ) ( 'e' | 'E' ) ( 'm' | 'M' ) ( 'o' | 'O' ) ( 'v' | 'V' ) ( 'e' | 'E' ) )
    // /home/cross/workspace/djondb/db/grammars/dql.g:238:10: ( 'r' | 'R' ) ( 'e' | 'E' ) ( 'm' | 'M' ) ( 'o' | 'O' ) ( 'v' | 'V' ) ( 'e' | 'E' )
    {
        if ( LA(1) == 'R' || LA(1) == 'r' )
        {
            CONSUME();

        }
        else 
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();    goto ruleREMOVEEx;
        }

        if ( LA(1) == 'E' || LA(1) == 'e' )
        {
            CONSUME();

        }
        else 
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();    goto ruleREMOVEEx;
        }

        if ( LA(1) == 'M' || LA(1) == 'm' )
        {
            CONSUME();

        }
        else 
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();    goto ruleREMOVEEx;
        }

        if ( LA(1) == 'O' || LA(1) == 'o' )
        {
            CONSUME();

        }
        else 
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();    goto ruleREMOVEEx;
        }

        if ( LA(1) == 'V' || LA(1) == 'v' )
        {
            CONSUME();

        }
        else 
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();    goto ruleREMOVEEx;
        }

        if ( LA(1) == 'E' || LA(1) == 'e' )
        {
            CONSUME();

        }
        else 
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();    goto ruleREMOVEEx;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleREMOVEEx; /* Prevent compiler warnings */
    ruleREMOVEEx: ;

}
// $ANTLR end REMOVE

//   Comes from: 239:6: ( ( 'f' | 'F' ) ( 'r' | 'R' ) ( 'o' | 'O' ) ( 'm' | 'M' ) )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start FROM
 *
 * Looks to match the characters the constitute the token FROM
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mFROM(pdqlLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = FROM;
       
    
    // /home/cross/workspace/djondb/db/grammars/dql.g:239:6: ( ( 'f' | 'F' ) ( 'r' | 'R' ) ( 'o' | 'O' ) ( 'm' | 'M' ) )
    // /home/cross/workspace/djondb/db/grammars/dql.g:239:8: ( 'f' | 'F' ) ( 'r' | 'R' ) ( 'o' | 'O' ) ( 'm' | 'M' )
    {
        if ( LA(1) == 'F' || LA(1) == 'f' )
        {
            CONSUME();

        }
        else 
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();    goto ruleFROMEx;
        }

        if ( LA(1) == 'R' || LA(1) == 'r' )
        {
            CONSUME();

        }
        else 
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();    goto ruleFROMEx;
        }

        if ( LA(1) == 'O' || LA(1) == 'o' )
        {
            CONSUME();

        }
        else 
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();    goto ruleFROMEx;
        }

        if ( LA(1) == 'M' || LA(1) == 'm' )
        {
            CONSUME();

        }
        else 
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();    goto ruleFROMEx;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleFROMEx; /* Prevent compiler warnings */
    ruleFROMEx: ;

}
// $ANTLR end FROM

//   Comes from: 240:7: ( ( 'w' | 'W' ) ( 'h' | 'H' ) ( 'e' | 'E' ) ( 'r' | 'R' ) ( 'e' | 'E' ) )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start WHERE
 *
 * Looks to match the characters the constitute the token WHERE
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mWHERE(pdqlLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = WHERE;
       
    
    // /home/cross/workspace/djondb/db/grammars/dql.g:240:7: ( ( 'w' | 'W' ) ( 'h' | 'H' ) ( 'e' | 'E' ) ( 'r' | 'R' ) ( 'e' | 'E' ) )
    // /home/cross/workspace/djondb/db/grammars/dql.g:240:9: ( 'w' | 'W' ) ( 'h' | 'H' ) ( 'e' | 'E' ) ( 'r' | 'R' ) ( 'e' | 'E' )
    {
        if ( LA(1) == 'W' || LA(1) == 'w' )
        {
            CONSUME();

        }
        else 
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();    goto ruleWHEREEx;
        }

        if ( LA(1) == 'H' || LA(1) == 'h' )
        {
            CONSUME();

        }
        else 
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();    goto ruleWHEREEx;
        }

        if ( LA(1) == 'E' || LA(1) == 'e' )
        {
            CONSUME();

        }
        else 
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();    goto ruleWHEREEx;
        }

        if ( LA(1) == 'R' || LA(1) == 'r' )
        {
            CONSUME();

        }
        else 
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();    goto ruleWHEREEx;
        }

        if ( LA(1) == 'E' || LA(1) == 'e' )
        {
            CONSUME();

        }
        else 
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();    goto ruleWHEREEx;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleWHEREEx; /* Prevent compiler warnings */
    ruleWHEREEx: ;

}
// $ANTLR end WHERE

//   Comes from: 241:6: ( ( 'i' | 'I' ) ( 'n' | 'N' ) ( 't' | 'T' ) ( 'o' | 'O' ) )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start INTO
 *
 * Looks to match the characters the constitute the token INTO
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mINTO(pdqlLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = INTO;
       
    
    // /home/cross/workspace/djondb/db/grammars/dql.g:241:6: ( ( 'i' | 'I' ) ( 'n' | 'N' ) ( 't' | 'T' ) ( 'o' | 'O' ) )
    // /home/cross/workspace/djondb/db/grammars/dql.g:241:8: ( 'i' | 'I' ) ( 'n' | 'N' ) ( 't' | 'T' ) ( 'o' | 'O' )
    {
        if ( LA(1) == 'I' || LA(1) == 'i' )
        {
            CONSUME();

        }
        else 
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();    goto ruleINTOEx;
        }

        if ( LA(1) == 'N' || LA(1) == 'n' )
        {
            CONSUME();

        }
        else 
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();    goto ruleINTOEx;
        }

        if ( LA(1) == 'T' || LA(1) == 't' )
        {
            CONSUME();

        }
        else 
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();    goto ruleINTOEx;
        }

        if ( LA(1) == 'O' || LA(1) == 'o' )
        {
            CONSUME();

        }
        else 
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();    goto ruleINTOEx;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleINTOEx; /* Prevent compiler warnings */
    ruleINTOEx: ;

}
// $ANTLR end INTO

//   Comes from: 242:6: ( ( 'w' | 'W' ) ( 'i' | 'I' ) ( 't' | 'T' ) ( 'h' | 'H' ) )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start WITH
 *
 * Looks to match the characters the constitute the token WITH
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mWITH(pdqlLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = WITH;
       
    
    // /home/cross/workspace/djondb/db/grammars/dql.g:242:6: ( ( 'w' | 'W' ) ( 'i' | 'I' ) ( 't' | 'T' ) ( 'h' | 'H' ) )
    // /home/cross/workspace/djondb/db/grammars/dql.g:242:8: ( 'w' | 'W' ) ( 'i' | 'I' ) ( 't' | 'T' ) ( 'h' | 'H' )
    {
        if ( LA(1) == 'W' || LA(1) == 'w' )
        {
            CONSUME();

        }
        else 
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();    goto ruleWITHEx;
        }

        if ( LA(1) == 'I' || LA(1) == 'i' )
        {
            CONSUME();

        }
        else 
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();    goto ruleWITHEx;
        }

        if ( LA(1) == 'T' || LA(1) == 't' )
        {
            CONSUME();

        }
        else 
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();    goto ruleWITHEx;
        }

        if ( LA(1) == 'H' || LA(1) == 'h' )
        {
            CONSUME();

        }
        else 
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();    goto ruleWITHEx;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleWITHEx; /* Prevent compiler warnings */
    ruleWITHEx: ;

}
// $ANTLR end WITH

//   Comes from: 243:5: ( ( 'n' | 'N' ) ( 'o' | 'O' ) ( 't' | 'T' ) )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start NOT
 *
 * Looks to match the characters the constitute the token NOT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mNOT(pdqlLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = NOT;
       
    
    // /home/cross/workspace/djondb/db/grammars/dql.g:243:5: ( ( 'n' | 'N' ) ( 'o' | 'O' ) ( 't' | 'T' ) )
    // /home/cross/workspace/djondb/db/grammars/dql.g:243:7: ( 'n' | 'N' ) ( 'o' | 'O' ) ( 't' | 'T' )
    {
        if ( LA(1) == 'N' || LA(1) == 'n' )
        {
            CONSUME();

        }
        else 
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();    goto ruleNOTEx;
        }

        if ( LA(1) == 'O' || LA(1) == 'o' )
        {
            CONSUME();

        }
        else 
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();    goto ruleNOTEx;
        }

        if ( LA(1) == 'T' || LA(1) == 't' )
        {
            CONSUME();

        }
        else 
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();    goto ruleNOTEx;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleNOTEx; /* Prevent compiler warnings */
    ruleNOTEx: ;

}
// $ANTLR end NOT

//   Comes from: 244:6: ( ( '==' | '>' | '>=' | '<' | '<=' | '!=' ) )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start OPER
 *
 * Looks to match the characters the constitute the token OPER
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mOPER(pdqlLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = OPER;
       
    
    // /home/cross/workspace/djondb/db/grammars/dql.g:244:6: ( ( '==' | '>' | '>=' | '<' | '<=' | '!=' ) )
    // /home/cross/workspace/djondb/db/grammars/dql.g:244:8: ( '==' | '>' | '>=' | '<' | '<=' | '!=' )
    {

        // /home/cross/workspace/djondb/db/grammars/dql.g:244:8: ( '==' | '>' | '>=' | '<' | '<=' | '!=' )
        {
            int alt8=6;
            switch ( LA(1) ) 
            {
            case '=':
            	{
            		alt8=1;
            	}
                break;
            case '>':
            	{
            		switch ( LA(2) ) 
            		{
            		case '=':
            			{
            				alt8=3;
            			}
            		    break;

            		default:
            		    alt8=2;}

            	}
                break;
            case '<':
            	{
            		switch ( LA(2) ) 
            		{
            		case '=':
            			{
            				alt8=5;
            			}
            		    break;

            		default:
            		    alt8=4;}

            	}
                break;
            case '!':
            	{
            		alt8=6;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 8;
                EXCEPTION->state        = 0;


                goto ruleOPEREx;
            }

            switch (alt8) 
            {
        	case 1:
        	    // /home/cross/workspace/djondb/db/grammars/dql.g:244:9: '=='
        	    {
        	        MATCHS(lit_1); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleOPEREx;
        	        }



        	    }
        	    break;
        	case 2:
        	    // /home/cross/workspace/djondb/db/grammars/dql.g:244:16: '>'
        	    {
        	        MATCHC('>'); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleOPEREx;
        	        }


        	    }
        	    break;
        	case 3:
        	    // /home/cross/workspace/djondb/db/grammars/dql.g:244:22: '>='
        	    {
        	        MATCHS(lit_2); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleOPEREx;
        	        }



        	    }
        	    break;
        	case 4:
        	    // /home/cross/workspace/djondb/db/grammars/dql.g:244:29: '<'
        	    {
        	        MATCHC('<'); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleOPEREx;
        	        }


        	    }
        	    break;
        	case 5:
        	    // /home/cross/workspace/djondb/db/grammars/dql.g:244:35: '<='
        	    {
        	        MATCHS(lit_3); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleOPEREx;
        	        }



        	    }
        	    break;
        	case 6:
        	    // /home/cross/workspace/djondb/db/grammars/dql.g:244:42: '!='
        	    {
        	        MATCHS(lit_4); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleOPEREx;
        	        }



        	    }
        	    break;

            }
        }

    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleOPEREx; /* Prevent compiler warnings */
    ruleOPEREx: ;

}
// $ANTLR end OPER

//   Comes from: 245:8: ( ( 'e' | 'E' ) ( 'x' | 'X' ) ( 'i' | 'I' ) ( 's' | 'S' ) ( 't' | 'T' ) ( 's' | 'S' ) )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start EXISTS
 *
 * Looks to match the characters the constitute the token EXISTS
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mEXISTS(pdqlLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = EXISTS;
       
    
    // /home/cross/workspace/djondb/db/grammars/dql.g:245:8: ( ( 'e' | 'E' ) ( 'x' | 'X' ) ( 'i' | 'I' ) ( 's' | 'S' ) ( 't' | 'T' ) ( 's' | 'S' ) )
    // /home/cross/workspace/djondb/db/grammars/dql.g:245:10: ( 'e' | 'E' ) ( 'x' | 'X' ) ( 'i' | 'I' ) ( 's' | 'S' ) ( 't' | 'T' ) ( 's' | 'S' )
    {
        if ( LA(1) == 'E' || LA(1) == 'e' )
        {
            CONSUME();

        }
        else 
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();    goto ruleEXISTSEx;
        }

        if ( LA(1) == 'X' || LA(1) == 'x' )
        {
            CONSUME();

        }
        else 
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();    goto ruleEXISTSEx;
        }

        if ( LA(1) == 'I' || LA(1) == 'i' )
        {
            CONSUME();

        }
        else 
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();    goto ruleEXISTSEx;
        }

        if ( LA(1) == 'S' || LA(1) == 's' )
        {
            CONSUME();

        }
        else 
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();    goto ruleEXISTSEx;
        }

        if ( LA(1) == 'T' || LA(1) == 't' )
        {
            CONSUME();

        }
        else 
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();    goto ruleEXISTSEx;
        }

        if ( LA(1) == 'S' || LA(1) == 's' )
        {
            CONSUME();

        }
        else 
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();    goto ruleEXISTSEx;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleEXISTSEx; /* Prevent compiler warnings */
    ruleEXISTSEx: ;

}
// $ANTLR end EXISTS

//   Comes from: 246:4: ( ( 'o' | 'O' ) ( 'R' | 'r' ) )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start OR
 *
 * Looks to match the characters the constitute the token OR
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mOR(pdqlLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = OR;
       
    
    // /home/cross/workspace/djondb/db/grammars/dql.g:246:4: ( ( 'o' | 'O' ) ( 'R' | 'r' ) )
    // /home/cross/workspace/djondb/db/grammars/dql.g:246:6: ( 'o' | 'O' ) ( 'R' | 'r' )
    {
        if ( LA(1) == 'O' || LA(1) == 'o' )
        {
            CONSUME();

        }
        else 
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();    goto ruleOREx;
        }

        if ( LA(1) == 'R' || LA(1) == 'r' )
        {
            CONSUME();

        }
        else 
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();    goto ruleOREx;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleOREx; /* Prevent compiler warnings */
    ruleOREx: ;

}
// $ANTLR end OR

//   Comes from: 247:5: ( ( 'a' | 'A' ) ( 'n' | 'N' ) ( 'd' | 'D' ) )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start AND
 *
 * Looks to match the characters the constitute the token AND
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mAND(pdqlLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = AND;
       
    
    // /home/cross/workspace/djondb/db/grammars/dql.g:247:5: ( ( 'a' | 'A' ) ( 'n' | 'N' ) ( 'd' | 'D' ) )
    // /home/cross/workspace/djondb/db/grammars/dql.g:247:7: ( 'a' | 'A' ) ( 'n' | 'N' ) ( 'd' | 'D' )
    {
        if ( LA(1) == 'A' || LA(1) == 'a' )
        {
            CONSUME();

        }
        else 
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();    goto ruleANDEx;
        }

        if ( LA(1) == 'N' || LA(1) == 'n' )
        {
            CONSUME();

        }
        else 
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();    goto ruleANDEx;
        }

        if ( LA(1) == 'D' || LA(1) == 'd' )
        {
            CONSUME();

        }
        else 
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();    goto ruleANDEx;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleANDEx; /* Prevent compiler warnings */
    ruleANDEx: ;

}
// $ANTLR end AND

//   Comes from: 248:5: ( ( 't' | 'T' ) ( 'o' | 'O' ) ( 'p' | 'P' ) )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start TOP
 *
 * Looks to match the characters the constitute the token TOP
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mTOP(pdqlLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = TOP;
       
    
    // /home/cross/workspace/djondb/db/grammars/dql.g:248:5: ( ( 't' | 'T' ) ( 'o' | 'O' ) ( 'p' | 'P' ) )
    // /home/cross/workspace/djondb/db/grammars/dql.g:248:7: ( 't' | 'T' ) ( 'o' | 'O' ) ( 'p' | 'P' )
    {
        if ( LA(1) == 'T' || LA(1) == 't' )
        {
            CONSUME();

        }
        else 
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();    goto ruleTOPEx;
        }

        if ( LA(1) == 'O' || LA(1) == 'o' )
        {
            CONSUME();

        }
        else 
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();    goto ruleTOPEx;
        }

        if ( LA(1) == 'P' || LA(1) == 'p' )
        {
            CONSUME();

        }
        else 
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();    goto ruleTOPEx;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleTOPEx; /* Prevent compiler warnings */
    ruleTOPEx: ;

}
// $ANTLR end TOP

//   Comes from: 250:5: ( ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )* )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start ID
 *
 * Looks to match the characters the constitute the token ID
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mID(pdqlLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = ID;
       
    
    // /home/cross/workspace/djondb/db/grammars/dql.g:250:5: ( ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )* )
    // /home/cross/workspace/djondb/db/grammars/dql.g:250:7: ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )*
    {
        if ( ((LA(1) >= 'A') && (LA(1) <= 'Z')) || LA(1) == '_' || ((LA(1) >= 'a') && (LA(1) <= 'z')) )
        {
            CONSUME();

        }
        else 
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();    goto ruleIDEx;
        }


        // /home/cross/workspace/djondb/db/grammars/dql.g:250:31: ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )*

        for (;;)
        {
            int alt9=2;
            switch ( LA(1) ) 
            {
            case '0':
            case '1':
            case '2':
            case '3':
            case '4':
            case '5':
            case '6':
            case '7':
            case '8':
            case '9':
            case 'A':
            case 'B':
            case 'C':
            case 'D':
            case 'E':
            case 'F':
            case 'G':
            case 'H':
            case 'I':
            case 'J':
            case 'K':
            case 'L':
            case 'M':
            case 'N':
            case 'O':
            case 'P':
            case 'Q':
            case 'R':
            case 'S':
            case 'T':
            case 'U':
            case 'V':
            case 'W':
            case 'X':
            case 'Y':
            case 'Z':
            case '_':
            case 'a':
            case 'b':
            case 'c':
            case 'd':
            case 'e':
            case 'f':
            case 'g':
            case 'h':
            case 'i':
            case 'j':
            case 'k':
            case 'l':
            case 'm':
            case 'n':
            case 'o':
            case 'p':
            case 'q':
            case 'r':
            case 's':
            case 't':
            case 'u':
            case 'v':
            case 'w':
            case 'x':
            case 'y':
            case 'z':
            	{
            		alt9=1;
            	}
                break;

            }

            switch (alt9) 
            {
        	case 1:
        	    // /home/cross/workspace/djondb/db/grammars/dql.g:
        	    {
        	        if ( ((LA(1) >= '0') && (LA(1) <= '9')) || ((LA(1) >= 'A') && (LA(1) <= 'Z')) || LA(1) == '_' || ((LA(1) >= 'a') && (LA(1) <= 'z')) )
        	        {
        	            CONSUME();

        	        }
        	        else 
        	        {
        	            CONSTRUCTEX();
        	            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
        	            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

        	            LRECOVER();    goto ruleIDEx;
        	        }


        	    }
        	    break;

        	default:
        	    goto loop9;	/* break out of the loop */
        	    break;
            }
        }
        loop9: ; /* Jump out to here if this rule does not match */


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleIDEx; /* Prevent compiler warnings */
    ruleIDEx: ;

}
// $ANTLR end ID

//   Comes from: 251:7: ( ID ( '.' ID )+ )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start NS_ID
 *
 * Looks to match the characters the constitute the token NS_ID
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mNS_ID(pdqlLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = NS_ID;
       
    
    // /home/cross/workspace/djondb/db/grammars/dql.g:251:7: ( ID ( '.' ID )+ )
    // /home/cross/workspace/djondb/db/grammars/dql.g:251:9: ID ( '.' ID )+
    {
        /* 251:9: ID ( '.' ID )+ */
        mID(ctx ); 
        if  (HASEXCEPTION())
        {
            goto ruleNS_IDEx;
        }

        // /home/cross/workspace/djondb/db/grammars/dql.g:251:12: ( '.' ID )+
        {
            int cnt10=0;

            for (;;)
            {
                int alt10=2;
        	switch ( LA(1) ) 
        	{
        	case '.':
        		{
        			alt10=1;
        		}
        	    break;

        	}

        	switch (alt10) 
        	{
        	    case 1:
        	        // /home/cross/workspace/djondb/db/grammars/dql.g:251:13: '.' ID
        	        {
        	            MATCHC('.'); 
        	            if  (HASEXCEPTION())
        	            {
        	                goto ruleNS_IDEx;
        	            }

        	            /* 251:13: '.' ID */
        	            mID(ctx ); 
        	            if  (HASEXCEPTION())
        	            {
        	                goto ruleNS_IDEx;
        	            }


        	        }
        	        break;

        	    default:
        	    
        		if ( cnt10 >= 1 )
        		{
        		    goto loop10;
        		}
        		/* mismatchedSetEx()
        		 */
        		CONSTRUCTEX();
        		EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
        		EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


        		goto ruleNS_IDEx;
        	}
        	cnt10++;
            }
            loop10: ;	/* Jump to here if this rule does not match */
        }

    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleNS_IDEx; /* Prevent compiler warnings */
    ruleNS_IDEx: ;

}
// $ANTLR end NS_ID

//   Comes from: 254:2: ( '*' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start ALL_FIELDS
 *
 * Looks to match the characters the constitute the token ALL_FIELDS
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mALL_FIELDS(pdqlLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = ALL_FIELDS;
       
    
    // /home/cross/workspace/djondb/db/grammars/dql.g:254:2: ( '*' )
    // /home/cross/workspace/djondb/db/grammars/dql.g:254:4: '*'
    {
        MATCHC('*'); 
        if  (HASEXCEPTION())
        {
            goto ruleALL_FIELDSEx;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleALL_FIELDSEx; /* Prevent compiler warnings */
    ruleALL_FIELDSEx: ;

}
// $ANTLR end ALL_FIELDS

//   Comes from: 257:5: ( '//' (~ ( '\\n' | '\\r' ) )* ( '\\r' )? '\\n' | '/*' ( options {greedy=false; } : . )* '*/' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start COMMENT
 *
 * Looks to match the characters the constitute the token COMMENT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mCOMMENT(pdqlLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = COMMENT;
       
    
    {
        //  /home/cross/workspace/djondb/db/grammars/dql.g:257:5: ( '//' (~ ( '\\n' | '\\r' ) )* ( '\\r' )? '\\n' | '/*' ( options {greedy=false; } : . )* '*/' )
        
        ANTLR3_UINT32 alt14;

        alt14=2;

        switch ( LA(1) ) 
        {
        case '/':
        	{
        		switch ( LA(2) ) 
        		{
        		case '/':
        			{
        				alt14=1;
        			}
        		    break;
        		case '*':
        			{
        				alt14=2;
        			}
        		    break;

        		default:
        		    CONSTRUCTEX();
        		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        		    EXCEPTION->message      = (void *)"";
        		    EXCEPTION->decisionNum  = 14;
        		    EXCEPTION->state        = 1;


        		    goto ruleCOMMENTEx;
        		}

        	}
            break;

        default:
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            EXCEPTION->message      = (void *)"";
            EXCEPTION->decisionNum  = 14;
            EXCEPTION->state        = 0;


            goto ruleCOMMENTEx;
        }

        switch (alt14) 
        {
    	case 1:
    	    // /home/cross/workspace/djondb/db/grammars/dql.g:257:9: '//' (~ ( '\\n' | '\\r' ) )* ( '\\r' )? '\\n'
    	    {
    	        MATCHS(lit_5); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleCOMMENTEx;
    	        }



    	        // /home/cross/workspace/djondb/db/grammars/dql.g:257:14: (~ ( '\\n' | '\\r' ) )*

    	        for (;;)
    	        {
    	            int alt11=2;
    	            {
    	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
    	                */
    	                int LA11_0 = LA(1);
    	                if ( (((LA11_0 >= 0x0000) && (LA11_0 <= '\t')) || ((LA11_0 >= 0x000B) && (LA11_0 <= '\f')) || ((LA11_0 >= 0x000E) && (LA11_0 <= 0xFFFF))) ) 
    	                {
    	                    alt11=1;
    	                }

    	            }
    	            switch (alt11) 
    	            {
    	        	case 1:
    	        	    // /home/cross/workspace/djondb/db/grammars/dql.g:257:14: ~ ( '\\n' | '\\r' )
    	        	    {
    	        	        if ( ((LA(1) >= 0x0000) && (LA(1) <= '\t')) || ((LA(1) >= 0x000B) && (LA(1) <= '\f')) || ((LA(1) >= 0x000E) && (LA(1) <= 0xFFFF)) )
    	        	        {
    	        	            CONSUME();

    	        	        }
    	        	        else 
    	        	        {
    	        	            CONSTRUCTEX();
    	        	            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
    	        	            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

    	        	            LRECOVER();    goto ruleCOMMENTEx;
    	        	        }


    	        	    }
    	        	    break;

    	        	default:
    	        	    goto loop11;	/* break out of the loop */
    	        	    break;
    	            }
    	        }
    	        loop11: ; /* Jump out to here if this rule does not match */


    	        // /home/cross/workspace/djondb/db/grammars/dql.g:257:28: ( '\\r' )?
    	        {
    	            int alt12=2;
    	            switch ( LA(1) ) 
    	            {
    	                case '\r':
    	                	{
    	                		alt12=1;
    	                	}
    	                    break;
    	            }

    	            switch (alt12) 
    	            {
    	        	case 1:
    	        	    // /home/cross/workspace/djondb/db/grammars/dql.g:257:28: '\\r'
    	        	    {
    	        	        MATCHC('\r'); 
    	        	        if  (HASEXCEPTION())
    	        	        {
    	        	            goto ruleCOMMENTEx;
    	        	        }


    	        	    }
    	        	    break;

    	            }
    	        }
    	        MATCHC('\n'); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleCOMMENTEx;
    	        }

    	        {
    	            LEXSTATE->channel=HIDDEN;
    	        }

    	    }
    	    break;
    	case 2:
    	    // /home/cross/workspace/djondb/db/grammars/dql.g:258:9: '/*' ( options {greedy=false; } : . )* '*/'
    	    {
    	        MATCHS(lit_6); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleCOMMENTEx;
    	        }



    	        // /home/cross/workspace/djondb/db/grammars/dql.g:258:14: ( options {greedy=false; } : . )*

    	        for (;;)
    	        {
    	            int alt13=2;
    	            {
    	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
    	                */
    	                int LA13_0 = LA(1);
    	                if ( (LA13_0 == '*') ) 
    	                {
    	                    {
    	                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
    	                        */
    	                        int LA13_1 = LA(2);
    	                        if ( (LA13_1 == '/') ) 
    	                        {
    	                            alt13=2;
    	                        }
    	                        else if ( (((LA13_1 >= 0x0000) && (LA13_1 <= '.')) || ((LA13_1 >= '0') && (LA13_1 <= 0xFFFF))) ) 
    	                        {
    	                            alt13=1;
    	                        }

    	                    }
    	                }
    	                else if ( (((LA13_0 >= 0x0000) && (LA13_0 <= ')')) || ((LA13_0 >= '+') && (LA13_0 <= 0xFFFF))) ) 
    	                {
    	                    alt13=1;
    	                }

    	            }
    	            switch (alt13) 
    	            {
    	        	case 1:
    	        	    // /home/cross/workspace/djondb/db/grammars/dql.g:258:42: .
    	        	    {
    	        	        MATCHANY(); 
    	        	        if  (HASEXCEPTION())
    	        	        {
    	        	            goto ruleCOMMENTEx;
    	        	        }


    	        	    }
    	        	    break;

    	        	default:
    	        	    goto loop13;	/* break out of the loop */
    	        	    break;
    	            }
    	        }
    	        loop13: ; /* Jump out to here if this rule does not match */

    	        MATCHS(lit_7); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleCOMMENTEx;
    	        }


    	        {
    	            LEXSTATE->channel=HIDDEN;
    	        }

    	    }
    	    break;

        }
    }
	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleCOMMENTEx; /* Prevent compiler warnings */
    ruleCOMMENTEx: ;

}
// $ANTLR end COMMENT

//   Comes from: 261:5: ( ( ' ' | '\\t' | '\\r' | '\\n' )+ )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start WS
 *
 * Looks to match the characters the constitute the token WS
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mWS(pdqlLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = WS;
       
    
    // /home/cross/workspace/djondb/db/grammars/dql.g:261:5: ( ( ' ' | '\\t' | '\\r' | '\\n' )+ )
    // /home/cross/workspace/djondb/db/grammars/dql.g:261:9: ( ' ' | '\\t' | '\\r' | '\\n' )+
    {
        // /home/cross/workspace/djondb/db/grammars/dql.g:261:9: ( ' ' | '\\t' | '\\r' | '\\n' )+
        {
            int cnt15=0;

            for (;;)
            {
                int alt15=2;
        	switch ( LA(1) ) 
        	{
        	case '\t':
        	case '\n':
        	case '\r':
        	case ' ':
        		{
        			alt15=1;
        		}
        	    break;

        	}

        	switch (alt15) 
        	{
        	    case 1:
        	        // /home/cross/workspace/djondb/db/grammars/dql.g:
        	        {
        	            if ( ((LA(1) >= '\t') && (LA(1) <= '\n')) || LA(1) == '\r' || LA(1) == ' ' )
        	            {
        	                CONSUME();

        	            }
        	            else 
        	            {
        	                CONSTRUCTEX();
        	                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
        	                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

        	                LRECOVER();    goto ruleWSEx;
        	            }


        	        }
        	        break;

        	    default:
        	    
        		if ( cnt15 >= 1 )
        		{
        		    goto loop15;
        		}
        		/* mismatchedSetEx()
        		 */
        		CONSTRUCTEX();
        		EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
        		EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


        		goto ruleWSEx;
        	}
        	cnt15++;
            }
            loop15: ;	/* Jump to here if this rule does not match */
        }
        {
            LEXSTATE->channel=HIDDEN;
        }

    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleWSEx; /* Prevent compiler warnings */
    ruleWSEx: ;

}
// $ANTLR end WS

//   Comes from: 264:10: ( '\\\"' ( options {greedy=false; } : (~ ( '\\\"' ) | ( '\\\\\"' ) ) )* '\\\"' | '\\'' ( options {greedy=false; } : (~ ( '\\'' ) | ( '\\\\\\'' ) ) )* '\\'' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start STRING
 *
 * Looks to match the characters the constitute the token STRING
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mSTRING(pdqlLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = STRING;
       
    
    {
        //  /home/cross/workspace/djondb/db/grammars/dql.g:264:10: ( '\\\"' ( options {greedy=false; } : (~ ( '\\\"' ) | ( '\\\\\"' ) ) )* '\\\"' | '\\'' ( options {greedy=false; } : (~ ( '\\'' ) | ( '\\\\\\'' ) ) )* '\\'' )
        
        ANTLR3_UINT32 alt20;

        alt20=2;

        switch ( LA(1) ) 
        {
        case '"':
        	{
        		alt20=1;
        	}
            break;
        case '\'':
        	{
        		alt20=2;
        	}
            break;

        default:
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            EXCEPTION->message      = (void *)"";
            EXCEPTION->decisionNum  = 20;
            EXCEPTION->state        = 0;


            goto ruleSTRINGEx;
        }

        switch (alt20) 
        {
    	case 1:
    	    // /home/cross/workspace/djondb/db/grammars/dql.g:264:13: '\\\"' ( options {greedy=false; } : (~ ( '\\\"' ) | ( '\\\\\"' ) ) )* '\\\"'
    	    {
    	        MATCHC('\"'); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleSTRINGEx;
    	        }


    	        // /home/cross/workspace/djondb/db/grammars/dql.g:264:18: ( options {greedy=false; } : (~ ( '\\\"' ) | ( '\\\\\"' ) ) )*

    	        for (;;)
    	        {
    	            int alt17=2;
    	            {
    	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
    	                */
    	                int LA17_0 = LA(1);
    	                if ( (((LA17_0 >= 0x0000) && (LA17_0 <= '!')) || ((LA17_0 >= '#') && (LA17_0 <= 0xFFFF))) ) 
    	                {
    	                    alt17=1;
    	                }
    	                else if ( (LA17_0 == '"') ) 
    	                {
    	                    alt17=2;
    	                }

    	            }
    	            switch (alt17) 
    	            {
    	        	case 1:
    	        	    // /home/cross/workspace/djondb/db/grammars/dql.g:264:46: (~ ( '\\\"' ) | ( '\\\\\"' ) )
    	        	    {

    	        	        // /home/cross/workspace/djondb/db/grammars/dql.g:264:46: (~ ( '\\\"' ) | ( '\\\\\"' ) )
    	        	        {
    	        	            int alt16=2;

    	        	            {
    	        	                int LA16_0 = LA(1);
    	        	                if ( (LA16_0 == '\\') ) 
    	        	                {

    	        	                    {
    	        	                        int LA16_1 = LA(2);
    	        	                        if ( (LA16_1 == '"') ) 
    	        	                        {

    	        	                            {
    	        	                                int LA16_3 = LA(3);
    	        	                                if ( (((LA16_3 >= 0x0000) && (LA16_3 <= 0xFFFF))) ) 
    	        	                                {
    	        	                                    alt16=2;
    	        	                                }
    	        	                                else 
    	        	                                {
    	        	                                    alt16=1;    }
    	        	                            }
    	        	                        }
    	        	                        else if ( (((LA16_1 >= 0x0000) && (LA16_1 <= '!')) || ((LA16_1 >= '#') && (LA16_1 <= 0xFFFF))) ) 
    	        	                        {
    	        	                            alt16=1;
    	        	                        }
    	        	                        else 
    	        	                        {
    	        	                        
    	        	                            CONSTRUCTEX();
    	        	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    	        	                            EXCEPTION->message      = (void *)"";
    	        	                            EXCEPTION->decisionNum  = 16;
    	        	                            EXCEPTION->state        = 1;


    	        	                            goto ruleSTRINGEx;
    	        	                        }
    	        	                    }
    	        	                }
    	        	                else if ( (((LA16_0 >= 0x0000) && (LA16_0 <= '!')) || ((LA16_0 >= '#') && (LA16_0 <= '[')) || ((LA16_0 >= ']') && (LA16_0 <= 0xFFFF))) ) 
    	        	                {
    	        	                    alt16=1;
    	        	                }
    	        	                else 
    	        	                {
    	        	                
    	        	                    CONSTRUCTEX();
    	        	                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    	        	                    EXCEPTION->message      = (void *)"";
    	        	                    EXCEPTION->decisionNum  = 16;
    	        	                    EXCEPTION->state        = 0;


    	        	                    goto ruleSTRINGEx;
    	        	                }
    	        	            }
    	        	            switch (alt16) 
    	        	            {
    	        	        	case 1:
    	        	        	    // /home/cross/workspace/djondb/db/grammars/dql.g:264:47: ~ ( '\\\"' )
    	        	        	    {
    	        	        	        if ( ((LA(1) >= 0x0000) && (LA(1) <= '!')) || ((LA(1) >= '#') && (LA(1) <= 0xFFFF)) )
    	        	        	        {
    	        	        	            CONSUME();

    	        	        	        }
    	        	        	        else 
    	        	        	        {
    	        	        	            CONSTRUCTEX();
    	        	        	            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
    	        	        	            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

    	        	        	            LRECOVER();    goto ruleSTRINGEx;
    	        	        	        }


    	        	        	    }
    	        	        	    break;
    	        	        	case 2:
    	        	        	    // /home/cross/workspace/djondb/db/grammars/dql.g:264:57: ( '\\\\\"' )
    	        	        	    {
    	        	        	        // /home/cross/workspace/djondb/db/grammars/dql.g:264:57: ( '\\\\\"' )
    	        	        	        // /home/cross/workspace/djondb/db/grammars/dql.g:264:58: '\\\\\"'
    	        	        	        {
    	        	        	            MATCHS(lit_8); 
    	        	        	            if  (HASEXCEPTION())
    	        	        	            {
    	        	        	                goto ruleSTRINGEx;
    	        	        	            }



    	        	        	        }


    	        	        	    }
    	        	        	    break;

    	        	            }
    	        	        }

    	        	    }
    	        	    break;

    	        	default:
    	        	    goto loop17;	/* break out of the loop */
    	        	    break;
    	            }
    	        }
    	        loop17: ; /* Jump out to here if this rule does not match */

    	        MATCHC('\"'); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleSTRINGEx;
    	        }


    	    }
    	    break;
    	case 2:
    	    // /home/cross/workspace/djondb/db/grammars/dql.g:264:76: '\\'' ( options {greedy=false; } : (~ ( '\\'' ) | ( '\\\\\\'' ) ) )* '\\''
    	    {
    	        MATCHC('\''); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleSTRINGEx;
    	        }


    	        // /home/cross/workspace/djondb/db/grammars/dql.g:264:81: ( options {greedy=false; } : (~ ( '\\'' ) | ( '\\\\\\'' ) ) )*

    	        for (;;)
    	        {
    	            int alt19=2;
    	            {
    	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
    	                */
    	                int LA19_0 = LA(1);
    	                if ( (((LA19_0 >= 0x0000) && (LA19_0 <= '&')) || ((LA19_0 >= '(') && (LA19_0 <= 0xFFFF))) ) 
    	                {
    	                    alt19=1;
    	                }
    	                else if ( (LA19_0 == '\'') ) 
    	                {
    	                    alt19=2;
    	                }

    	            }
    	            switch (alt19) 
    	            {
    	        	case 1:
    	        	    // /home/cross/workspace/djondb/db/grammars/dql.g:264:109: (~ ( '\\'' ) | ( '\\\\\\'' ) )
    	        	    {

    	        	        // /home/cross/workspace/djondb/db/grammars/dql.g:264:109: (~ ( '\\'' ) | ( '\\\\\\'' ) )
    	        	        {
    	        	            int alt18=2;

    	        	            {
    	        	                int LA18_0 = LA(1);
    	        	                if ( (LA18_0 == '\\') ) 
    	        	                {

    	        	                    {
    	        	                        int LA18_1 = LA(2);
    	        	                        if ( (LA18_1 == '\'') ) 
    	        	                        {

    	        	                            {
    	        	                                int LA18_3 = LA(3);
    	        	                                if ( (((LA18_3 >= 0x0000) && (LA18_3 <= 0xFFFF))) ) 
    	        	                                {
    	        	                                    alt18=2;
    	        	                                }
    	        	                                else 
    	        	                                {
    	        	                                    alt18=1;    }
    	        	                            }
    	        	                        }
    	        	                        else if ( (((LA18_1 >= 0x0000) && (LA18_1 <= '&')) || ((LA18_1 >= '(') && (LA18_1 <= 0xFFFF))) ) 
    	        	                        {
    	        	                            alt18=1;
    	        	                        }
    	        	                        else 
    	        	                        {
    	        	                        
    	        	                            CONSTRUCTEX();
    	        	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    	        	                            EXCEPTION->message      = (void *)"";
    	        	                            EXCEPTION->decisionNum  = 18;
    	        	                            EXCEPTION->state        = 1;


    	        	                            goto ruleSTRINGEx;
    	        	                        }
    	        	                    }
    	        	                }
    	        	                else if ( (((LA18_0 >= 0x0000) && (LA18_0 <= '&')) || ((LA18_0 >= '(') && (LA18_0 <= '[')) || ((LA18_0 >= ']') && (LA18_0 <= 0xFFFF))) ) 
    	        	                {
    	        	                    alt18=1;
    	        	                }
    	        	                else 
    	        	                {
    	        	                
    	        	                    CONSTRUCTEX();
    	        	                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    	        	                    EXCEPTION->message      = (void *)"";
    	        	                    EXCEPTION->decisionNum  = 18;
    	        	                    EXCEPTION->state        = 0;


    	        	                    goto ruleSTRINGEx;
    	        	                }
    	        	            }
    	        	            switch (alt18) 
    	        	            {
    	        	        	case 1:
    	        	        	    // /home/cross/workspace/djondb/db/grammars/dql.g:264:110: ~ ( '\\'' )
    	        	        	    {
    	        	        	        if ( ((LA(1) >= 0x0000) && (LA(1) <= '&')) || ((LA(1) >= '(') && (LA(1) <= 0xFFFF)) )
    	        	        	        {
    	        	        	            CONSUME();

    	        	        	        }
    	        	        	        else 
    	        	        	        {
    	        	        	            CONSTRUCTEX();
    	        	        	            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
    	        	        	            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

    	        	        	            LRECOVER();    goto ruleSTRINGEx;
    	        	        	        }


    	        	        	    }
    	        	        	    break;
    	        	        	case 2:
    	        	        	    // /home/cross/workspace/djondb/db/grammars/dql.g:264:120: ( '\\\\\\'' )
    	        	        	    {
    	        	        	        // /home/cross/workspace/djondb/db/grammars/dql.g:264:120: ( '\\\\\\'' )
    	        	        	        // /home/cross/workspace/djondb/db/grammars/dql.g:264:121: '\\\\\\''
    	        	        	        {
    	        	        	            MATCHS(lit_9); 
    	        	        	            if  (HASEXCEPTION())
    	        	        	            {
    	        	        	                goto ruleSTRINGEx;
    	        	        	            }



    	        	        	        }


    	        	        	    }
    	        	        	    break;

    	        	            }
    	        	        }

    	        	    }
    	        	    break;

    	        	default:
    	        	    goto loop19;	/* break out of the loop */
    	        	    break;
    	            }
    	        }
    	        loop19: ; /* Jump out to here if this rule does not match */

    	        MATCHC('\''); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleSTRINGEx;
    	        }


    	    }
    	    break;

        }
    }
	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleSTRINGEx; /* Prevent compiler warnings */
    ruleSTRINGEx: ;

}
// $ANTLR end STRING

//   Comes from: 267:10: ( ( 'e' | 'E' ) ( '+' | '-' )? ( '0' .. '9' )+ )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start EXPONENT
 *
 * Looks to match the characters the constitute the token EXPONENT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mEXPONENT(pdqlLexer ctx)
{
	ANTLR3_UINT32	_type;

        
    // /home/cross/workspace/djondb/db/grammars/dql.g:267:10: ( ( 'e' | 'E' ) ( '+' | '-' )? ( '0' .. '9' )+ )
    // /home/cross/workspace/djondb/db/grammars/dql.g:267:12: ( 'e' | 'E' ) ( '+' | '-' )? ( '0' .. '9' )+
    {
        if ( LA(1) == 'E' || LA(1) == 'e' )
        {
            CONSUME();

        }
        else 
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();    goto ruleEXPONENTEx;
        }


        // /home/cross/workspace/djondb/db/grammars/dql.g:267:22: ( '+' | '-' )?
        {
            int alt21=2;
            switch ( LA(1) ) 
            {
                case '+':
                case '-':
                	{
                		alt21=1;
                	}
                    break;
            }

            switch (alt21) 
            {
        	case 1:
        	    // /home/cross/workspace/djondb/db/grammars/dql.g:
        	    {
        	        if ( LA(1) == '+' || LA(1) == '-' )
        	        {
        	            CONSUME();

        	        }
        	        else 
        	        {
        	            CONSTRUCTEX();
        	            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
        	            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

        	            LRECOVER();    goto ruleEXPONENTEx;
        	        }


        	    }
        	    break;

            }
        }
        // /home/cross/workspace/djondb/db/grammars/dql.g:267:33: ( '0' .. '9' )+
        {
            int cnt22=0;

            for (;;)
            {
                int alt22=2;
        	switch ( LA(1) ) 
        	{
        	case '0':
        	case '1':
        	case '2':
        	case '3':
        	case '4':
        	case '5':
        	case '6':
        	case '7':
        	case '8':
        	case '9':
        		{
        			alt22=1;
        		}
        	    break;

        	}

        	switch (alt22) 
        	{
        	    case 1:
        	        // /home/cross/workspace/djondb/db/grammars/dql.g:267:34: '0' .. '9'
        	        {
        	            MATCHRANGE('0', '9'); 
        	            if  (HASEXCEPTION())
        	            {
        	                goto ruleEXPONENTEx;
        	            }


        	        }
        	        break;

        	    default:
        	    
        		if ( cnt22 >= 1 )
        		{
        		    goto loop22;
        		}
        		/* mismatchedSetEx()
        		 */
        		CONSTRUCTEX();
        		EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
        		EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


        		goto ruleEXPONENTEx;
        	}
        	cnt22++;
            }
            loop22: ;	/* Jump to here if this rule does not match */
        }

    }



    // This is where rules clean up and exit
    //
    goto ruleEXPONENTEx; /* Prevent compiler warnings */
    ruleEXPONENTEx: ;

}
// $ANTLR end EXPONENT

//   Comes from: 270:11: ( ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start HEX_DIGIT
 *
 * Looks to match the characters the constitute the token HEX_DIGIT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mHEX_DIGIT(pdqlLexer ctx)
{
	ANTLR3_UINT32	_type;

        
    // /home/cross/workspace/djondb/db/grammars/dql.g:270:11: ( ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) )
    // /home/cross/workspace/djondb/db/grammars/dql.g:270:13: ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' )
    {
        if ( ((LA(1) >= '0') && (LA(1) <= '9')) || ((LA(1) >= 'A') && (LA(1) <= 'F')) || ((LA(1) >= 'a') && (LA(1) <= 'f')) )
        {
            CONSUME();

        }
        else 
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();    goto ruleHEX_DIGITEx;
        }


    }



    // This is where rules clean up and exit
    //
    goto ruleHEX_DIGITEx; /* Prevent compiler warnings */
    ruleHEX_DIGITEx: ;

}
// $ANTLR end HEX_DIGIT

//   Comes from: 274:5: ( '\\\\' ( 'b' | 't' | 'n' | 'f' | 'r' | '\\\"' | '\\'' | '\\\\' ) | UNICODE_ESC | OCTAL_ESC )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start ESC_SEQ
 *
 * Looks to match the characters the constitute the token ESC_SEQ
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mESC_SEQ(pdqlLexer ctx)
{
	ANTLR3_UINT32	_type;

        
    {
        //  /home/cross/workspace/djondb/db/grammars/dql.g:274:5: ( '\\\\' ( 'b' | 't' | 'n' | 'f' | 'r' | '\\\"' | '\\'' | '\\\\' ) | UNICODE_ESC | OCTAL_ESC )
        
        ANTLR3_UINT32 alt23;

        alt23=3;

        switch ( LA(1) ) 
        {
        case '\\':
        	{
        		switch ( LA(2) ) 
        		{
        		case '"':
        		case '\'':
        		case '\\':
        		case 'b':
        		case 'f':
        		case 'n':
        		case 'r':
        		case 't':
        			{
        				alt23=1;
        			}
        		    break;
        		case 'u':
        			{
        				alt23=2;
        			}
        		    break;
        		case '0':
        		case '1':
        		case '2':
        		case '3':
        		case '4':
        		case '5':
        		case '6':
        		case '7':
        			{
        				alt23=3;
        			}
        		    break;

        		default:
        		    CONSTRUCTEX();
        		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        		    EXCEPTION->message      = (void *)"";
        		    EXCEPTION->decisionNum  = 23;
        		    EXCEPTION->state        = 1;


        		    goto ruleESC_SEQEx;
        		}

        	}
            break;

        default:
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            EXCEPTION->message      = (void *)"";
            EXCEPTION->decisionNum  = 23;
            EXCEPTION->state        = 0;


            goto ruleESC_SEQEx;
        }

        switch (alt23) 
        {
    	case 1:
    	    // /home/cross/workspace/djondb/db/grammars/dql.g:274:9: '\\\\' ( 'b' | 't' | 'n' | 'f' | 'r' | '\\\"' | '\\'' | '\\\\' )
    	    {
    	        MATCHC('\\'); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleESC_SEQEx;
    	        }

    	        if ( LA(1) == '"' || LA(1) == '\'' || LA(1) == '\\' || LA(1) == 'b' || LA(1) == 'f' || LA(1) == 'n' || LA(1) == 'r' || LA(1) == 't' )
    	        {
    	            CONSUME();

    	        }
    	        else 
    	        {
    	            CONSTRUCTEX();
    	            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
    	            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

    	            LRECOVER();    goto ruleESC_SEQEx;
    	        }


    	    }
    	    break;
    	case 2:
    	    // /home/cross/workspace/djondb/db/grammars/dql.g:275:9: UNICODE_ESC
    	    {
    	        /* 275:9: UNICODE_ESC */
    	        mUNICODE_ESC(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleESC_SEQEx;
    	        }


    	    }
    	    break;
    	case 3:
    	    // /home/cross/workspace/djondb/db/grammars/dql.g:276:13: OCTAL_ESC
    	    {
    	        /* 276:13: OCTAL_ESC */
    	        mOCTAL_ESC(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleESC_SEQEx;
    	        }


    	    }
    	    break;

        }
    }


    // This is where rules clean up and exit
    //
    goto ruleESC_SEQEx; /* Prevent compiler warnings */
    ruleESC_SEQEx: ;

}
// $ANTLR end ESC_SEQ

//   Comes from: 281:5: ( '\\\\' ( '0' .. '3' ) ( '0' .. '7' ) ( '0' .. '7' ) | '\\\\' ( '0' .. '7' ) ( '0' .. '7' ) | '\\\\' ( '0' .. '7' ) )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start OCTAL_ESC
 *
 * Looks to match the characters the constitute the token OCTAL_ESC
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mOCTAL_ESC(pdqlLexer ctx)
{
	ANTLR3_UINT32	_type;

        
    {
        //  /home/cross/workspace/djondb/db/grammars/dql.g:281:5: ( '\\\\' ( '0' .. '3' ) ( '0' .. '7' ) ( '0' .. '7' ) | '\\\\' ( '0' .. '7' ) ( '0' .. '7' ) | '\\\\' ( '0' .. '7' ) )
        
        ANTLR3_UINT32 alt24;

        alt24=3;

        switch ( LA(1) ) 
        {
        case '\\':
        	{
        		switch ( LA(2) ) 
        		{
        		case '0':
        		case '1':
        		case '2':
        		case '3':
        			{
        				switch ( LA(3) ) 
        				{
        				case '0':
        				case '1':
        				case '2':
        				case '3':
        				case '4':
        				case '5':
        				case '6':
        				case '7':
        					{
        						switch ( LA(4) ) 
        						{
        						case '0':
        						case '1':
        						case '2':
        						case '3':
        						case '4':
        						case '5':
        						case '6':
        						case '7':
        							{
        								alt24=1;
        							}
        						    break;

        						default:
        						    alt24=2;}

        					}
        				    break;

        				default:
        				    alt24=3;}

        			}
        		    break;
        		case '4':
        		case '5':
        		case '6':
        		case '7':
        			{
        				switch ( LA(3) ) 
        				{
        				case '0':
        				case '1':
        				case '2':
        				case '3':
        				case '4':
        				case '5':
        				case '6':
        				case '7':
        					{
        						alt24=2;
        					}
        				    break;

        				default:
        				    alt24=3;}

        			}
        		    break;

        		default:
        		    CONSTRUCTEX();
        		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        		    EXCEPTION->message      = (void *)"";
        		    EXCEPTION->decisionNum  = 24;
        		    EXCEPTION->state        = 1;


        		    goto ruleOCTAL_ESCEx;
        		}

        	}
            break;

        default:
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            EXCEPTION->message      = (void *)"";
            EXCEPTION->decisionNum  = 24;
            EXCEPTION->state        = 0;


            goto ruleOCTAL_ESCEx;
        }

        switch (alt24) 
        {
    	case 1:
    	    // /home/cross/workspace/djondb/db/grammars/dql.g:281:9: '\\\\' ( '0' .. '3' ) ( '0' .. '7' ) ( '0' .. '7' )
    	    {
    	        MATCHC('\\'); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleOCTAL_ESCEx;
    	        }

    	        // /home/cross/workspace/djondb/db/grammars/dql.g:281:14: ( '0' .. '3' )
    	        // /home/cross/workspace/djondb/db/grammars/dql.g:281:15: '0' .. '3'
    	        {
    	            MATCHRANGE('0', '3'); 
    	            if  (HASEXCEPTION())
    	            {
    	                goto ruleOCTAL_ESCEx;
    	            }


    	        }

    	        // /home/cross/workspace/djondb/db/grammars/dql.g:281:25: ( '0' .. '7' )
    	        // /home/cross/workspace/djondb/db/grammars/dql.g:281:26: '0' .. '7'
    	        {
    	            MATCHRANGE('0', '7'); 
    	            if  (HASEXCEPTION())
    	            {
    	                goto ruleOCTAL_ESCEx;
    	            }


    	        }

    	        // /home/cross/workspace/djondb/db/grammars/dql.g:281:36: ( '0' .. '7' )
    	        // /home/cross/workspace/djondb/db/grammars/dql.g:281:37: '0' .. '7'
    	        {
    	            MATCHRANGE('0', '7'); 
    	            if  (HASEXCEPTION())
    	            {
    	                goto ruleOCTAL_ESCEx;
    	            }


    	        }


    	    }
    	    break;
    	case 2:
    	    // /home/cross/workspace/djondb/db/grammars/dql.g:282:9: '\\\\' ( '0' .. '7' ) ( '0' .. '7' )
    	    {
    	        MATCHC('\\'); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleOCTAL_ESCEx;
    	        }

    	        // /home/cross/workspace/djondb/db/grammars/dql.g:282:14: ( '0' .. '7' )
    	        // /home/cross/workspace/djondb/db/grammars/dql.g:282:15: '0' .. '7'
    	        {
    	            MATCHRANGE('0', '7'); 
    	            if  (HASEXCEPTION())
    	            {
    	                goto ruleOCTAL_ESCEx;
    	            }


    	        }

    	        // /home/cross/workspace/djondb/db/grammars/dql.g:282:25: ( '0' .. '7' )
    	        // /home/cross/workspace/djondb/db/grammars/dql.g:282:26: '0' .. '7'
    	        {
    	            MATCHRANGE('0', '7'); 
    	            if  (HASEXCEPTION())
    	            {
    	                goto ruleOCTAL_ESCEx;
    	            }


    	        }


    	    }
    	    break;
    	case 3:
    	    // /home/cross/workspace/djondb/db/grammars/dql.g:283:9: '\\\\' ( '0' .. '7' )
    	    {
    	        MATCHC('\\'); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleOCTAL_ESCEx;
    	        }

    	        // /home/cross/workspace/djondb/db/grammars/dql.g:283:14: ( '0' .. '7' )
    	        // /home/cross/workspace/djondb/db/grammars/dql.g:283:15: '0' .. '7'
    	        {
    	            MATCHRANGE('0', '7'); 
    	            if  (HASEXCEPTION())
    	            {
    	                goto ruleOCTAL_ESCEx;
    	            }


    	        }


    	    }
    	    break;

        }
    }


    // This is where rules clean up and exit
    //
    goto ruleOCTAL_ESCEx; /* Prevent compiler warnings */
    ruleOCTAL_ESCEx: ;

}
// $ANTLR end OCTAL_ESC

//   Comes from: 288:5: ( '\\\\' 'u' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start UNICODE_ESC
 *
 * Looks to match the characters the constitute the token UNICODE_ESC
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mUNICODE_ESC(pdqlLexer ctx)
{
	ANTLR3_UINT32	_type;

        
    // /home/cross/workspace/djondb/db/grammars/dql.g:288:5: ( '\\\\' 'u' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT )
    // /home/cross/workspace/djondb/db/grammars/dql.g:288:9: '\\\\' 'u' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT
    {
        MATCHC('\\'); 
        if  (HASEXCEPTION())
        {
            goto ruleUNICODE_ESCEx;
        }

        MATCHC('u'); 
        if  (HASEXCEPTION())
        {
            goto ruleUNICODE_ESCEx;
        }

        /* 288:9: '\\\\' 'u' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT */
        mHEX_DIGIT(ctx ); 
        if  (HASEXCEPTION())
        {
            goto ruleUNICODE_ESCEx;
        }

        /* 288:9: '\\\\' 'u' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT */
        mHEX_DIGIT(ctx ); 
        if  (HASEXCEPTION())
        {
            goto ruleUNICODE_ESCEx;
        }

        /* 288:9: '\\\\' 'u' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT */
        mHEX_DIGIT(ctx ); 
        if  (HASEXCEPTION())
        {
            goto ruleUNICODE_ESCEx;
        }

        /* 288:9: '\\\\' 'u' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT */
        mHEX_DIGIT(ctx ); 
        if  (HASEXCEPTION())
        {
            goto ruleUNICODE_ESCEx;
        }


    }



    // This is where rules clean up and exit
    //
    goto ruleUNICODE_ESCEx; /* Prevent compiler warnings */
    ruleUNICODE_ESCEx: ;

}
// $ANTLR end UNICODE_ESC

//   Comes from: 292:2: ( ',' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start COMMA
 *
 * Looks to match the characters the constitute the token COMMA
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mCOMMA(pdqlLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = COMMA;
       
    
    // /home/cross/workspace/djondb/db/grammars/dql.g:292:2: ( ',' )
    // /home/cross/workspace/djondb/db/grammars/dql.g:292:4: ','
    {
        MATCHC(','); 
        if  (HASEXCEPTION())
        {
            goto ruleCOMMAEx;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleCOMMAEx; /* Prevent compiler warnings */
    ruleCOMMAEx: ;

}
// $ANTLR end COMMA

//   Comes from: 293:8: ( '(' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start LPAREN
 *
 * Looks to match the characters the constitute the token LPAREN
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mLPAREN(pdqlLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = LPAREN;
       
    
    // /home/cross/workspace/djondb/db/grammars/dql.g:293:8: ( '(' )
    // /home/cross/workspace/djondb/db/grammars/dql.g:293:10: '('
    {
        MATCHC('('); 
        if  (HASEXCEPTION())
        {
            goto ruleLPARENEx;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleLPARENEx; /* Prevent compiler warnings */
    ruleLPARENEx: ;

}
// $ANTLR end LPAREN

//   Comes from: 294:8: ( ')' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start RPAREN
 *
 * Looks to match the characters the constitute the token RPAREN
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mRPAREN(pdqlLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = RPAREN;
       
    
    // /home/cross/workspace/djondb/db/grammars/dql.g:294:8: ( ')' )
    // /home/cross/workspace/djondb/db/grammars/dql.g:294:10: ')'
    {
        MATCHC(')'); 
        if  (HASEXCEPTION())
        {
            goto ruleRPARENEx;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleRPARENEx; /* Prevent compiler warnings */
    ruleRPARENEx: ;

}
// $ANTLR end RPAREN

//   Comes from: 295:7: ( '{' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start LBRAN
 *
 * Looks to match the characters the constitute the token LBRAN
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mLBRAN(pdqlLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = LBRAN;
       
    
    // /home/cross/workspace/djondb/db/grammars/dql.g:295:7: ( '{' )
    // /home/cross/workspace/djondb/db/grammars/dql.g:295:9: '{'
    {
        MATCHC('{'); 
        if  (HASEXCEPTION())
        {
            goto ruleLBRANEx;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleLBRANEx; /* Prevent compiler warnings */
    ruleLBRANEx: ;

}
// $ANTLR end LBRAN

//   Comes from: 296:7: ( '}' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start RBRAN
 *
 * Looks to match the characters the constitute the token RBRAN
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mRBRAN(pdqlLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = RBRAN;
       
    
    // /home/cross/workspace/djondb/db/grammars/dql.g:296:7: ( '}' )
    // /home/cross/workspace/djondb/db/grammars/dql.g:296:9: '}'
    {
        MATCHC('}'); 
        if  (HASEXCEPTION())
        {
            goto ruleRBRANEx;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleRBRANEx; /* Prevent compiler warnings */
    ruleRBRANEx: ;

}
// $ANTLR end RBRAN

//   Comes from: 298:2: ( '[' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start LBRAK
 *
 * Looks to match the characters the constitute the token LBRAK
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mLBRAK(pdqlLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = LBRAK;
       
    
    // /home/cross/workspace/djondb/db/grammars/dql.g:298:2: ( '[' )
    // /home/cross/workspace/djondb/db/grammars/dql.g:298:4: '['
    {
        MATCHC('['); 
        if  (HASEXCEPTION())
        {
            goto ruleLBRAKEx;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleLBRAKEx; /* Prevent compiler warnings */
    ruleLBRAKEx: ;

}
// $ANTLR end LBRAK

//   Comes from: 300:2: ( ']' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start RBRAK
 *
 * Looks to match the characters the constitute the token RBRAK
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mRBRAK(pdqlLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = RBRAK;
       
    
    // /home/cross/workspace/djondb/db/grammars/dql.g:300:2: ( ']' )
    // /home/cross/workspace/djondb/db/grammars/dql.g:300:4: ']'
    {
        MATCHC(']'); 
        if  (HASEXCEPTION())
        {
            goto ruleRBRAKEx;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleRBRAKEx; /* Prevent compiler warnings */
    ruleRBRAKEx: ;

}
// $ANTLR end RBRAK

//   Comes from: 302:2: ( ':' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start COLON
 *
 * Looks to match the characters the constitute the token COLON
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mCOLON(pdqlLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = COLON;
       
    
    // /home/cross/workspace/djondb/db/grammars/dql.g:302:2: ( ':' )
    // /home/cross/workspace/djondb/db/grammars/dql.g:302:4: ':'
    {
        MATCHC(':'); 
        if  (HASEXCEPTION())
        {
            goto ruleCOLONEx;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleCOLONEx; /* Prevent compiler warnings */
    ruleCOLONEx: ;

}
// $ANTLR end COLON

//   Comes from: 304:9: ( ';' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start SEMICOLON
 *
 * Looks to match the characters the constitute the token SEMICOLON
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mSEMICOLON(pdqlLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = SEMICOLON;
       
    
    // /home/cross/workspace/djondb/db/grammars/dql.g:304:9: ( ';' )
    // /home/cross/workspace/djondb/db/grammars/dql.g:304:17: ';'
    {
        MATCHC(';'); 
        if  (HASEXCEPTION())
        {
            goto ruleSEMICOLONEx;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleSEMICOLONEx; /* Prevent compiler warnings */
    ruleSEMICOLONEx: ;

}
// $ANTLR end SEMICOLON

/** This is the entry point in to the lexer from an object that
 *  wants to generate the next token, such as a pCOMMON_TOKEN_STREAM
 */
static void 
mTokens(pdqlLexer ctx)
{
    {
        //  /home/cross/workspace/djondb/db/grammars/dql.g:1:8: ( TRUE | FALSE | NUMBER | FLOAT | XPATH | SELECT | INSERT | UPDATE | REMOVE | FROM | WHERE | INTO | WITH | NOT | OPER | EXISTS | OR | AND | TOP | ID | NS_ID | ALL_FIELDS | COMMENT | WS | STRING | COMMA | LPAREN | RPAREN | LBRAN | RBRAN | LBRAK | RBRAK | COLON | SEMICOLON )
        
        ANTLR3_UINT32 alt25;

        alt25=34;

        alt25 = cdfa25.predict(ctx, RECOGNIZER, ISTREAM, &cdfa25);
        if  (HASEXCEPTION())
        {
            goto ruleTokensEx;
        }

        switch (alt25) 
        {
    	case 1:
    	    // /home/cross/workspace/djondb/db/grammars/dql.g:1:10: TRUE
    	    {
    	        /* 1:10: TRUE */
    	        mTRUE(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 2:
    	    // /home/cross/workspace/djondb/db/grammars/dql.g:1:15: FALSE
    	    {
    	        /* 1:15: FALSE */
    	        mFALSE(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 3:
    	    // /home/cross/workspace/djondb/db/grammars/dql.g:1:21: NUMBER
    	    {
    	        /* 1:21: NUMBER */
    	        mNUMBER(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 4:
    	    // /home/cross/workspace/djondb/db/grammars/dql.g:1:28: FLOAT
    	    {
    	        /* 1:28: FLOAT */
    	        mFLOAT(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 5:
    	    // /home/cross/workspace/djondb/db/grammars/dql.g:1:34: XPATH
    	    {
    	        /* 1:34: XPATH */
    	        mXPATH(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 6:
    	    // /home/cross/workspace/djondb/db/grammars/dql.g:1:40: SELECT
    	    {
    	        /* 1:40: SELECT */
    	        mSELECT(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 7:
    	    // /home/cross/workspace/djondb/db/grammars/dql.g:1:47: INSERT
    	    {
    	        /* 1:47: INSERT */
    	        mINSERT(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 8:
    	    // /home/cross/workspace/djondb/db/grammars/dql.g:1:54: UPDATE
    	    {
    	        /* 1:54: UPDATE */
    	        mUPDATE(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 9:
    	    // /home/cross/workspace/djondb/db/grammars/dql.g:1:61: REMOVE
    	    {
    	        /* 1:61: REMOVE */
    	        mREMOVE(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 10:
    	    // /home/cross/workspace/djondb/db/grammars/dql.g:1:68: FROM
    	    {
    	        /* 1:68: FROM */
    	        mFROM(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 11:
    	    // /home/cross/workspace/djondb/db/grammars/dql.g:1:73: WHERE
    	    {
    	        /* 1:73: WHERE */
    	        mWHERE(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 12:
    	    // /home/cross/workspace/djondb/db/grammars/dql.g:1:79: INTO
    	    {
    	        /* 1:79: INTO */
    	        mINTO(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 13:
    	    // /home/cross/workspace/djondb/db/grammars/dql.g:1:84: WITH
    	    {
    	        /* 1:84: WITH */
    	        mWITH(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 14:
    	    // /home/cross/workspace/djondb/db/grammars/dql.g:1:89: NOT
    	    {
    	        /* 1:89: NOT */
    	        mNOT(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 15:
    	    // /home/cross/workspace/djondb/db/grammars/dql.g:1:93: OPER
    	    {
    	        /* 1:93: OPER */
    	        mOPER(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 16:
    	    // /home/cross/workspace/djondb/db/grammars/dql.g:1:98: EXISTS
    	    {
    	        /* 1:98: EXISTS */
    	        mEXISTS(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 17:
    	    // /home/cross/workspace/djondb/db/grammars/dql.g:1:105: OR
    	    {
    	        /* 1:105: OR */
    	        mOR(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 18:
    	    // /home/cross/workspace/djondb/db/grammars/dql.g:1:108: AND
    	    {
    	        /* 1:108: AND */
    	        mAND(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 19:
    	    // /home/cross/workspace/djondb/db/grammars/dql.g:1:112: TOP
    	    {
    	        /* 1:112: TOP */
    	        mTOP(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 20:
    	    // /home/cross/workspace/djondb/db/grammars/dql.g:1:116: ID
    	    {
    	        /* 1:116: ID */
    	        mID(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 21:
    	    // /home/cross/workspace/djondb/db/grammars/dql.g:1:119: NS_ID
    	    {
    	        /* 1:119: NS_ID */
    	        mNS_ID(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 22:
    	    // /home/cross/workspace/djondb/db/grammars/dql.g:1:125: ALL_FIELDS
    	    {
    	        /* 1:125: ALL_FIELDS */
    	        mALL_FIELDS(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 23:
    	    // /home/cross/workspace/djondb/db/grammars/dql.g:1:136: COMMENT
    	    {
    	        /* 1:136: COMMENT */
    	        mCOMMENT(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 24:
    	    // /home/cross/workspace/djondb/db/grammars/dql.g:1:144: WS
    	    {
    	        /* 1:144: WS */
    	        mWS(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 25:
    	    // /home/cross/workspace/djondb/db/grammars/dql.g:1:147: STRING
    	    {
    	        /* 1:147: STRING */
    	        mSTRING(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 26:
    	    // /home/cross/workspace/djondb/db/grammars/dql.g:1:154: COMMA
    	    {
    	        /* 1:154: COMMA */
    	        mCOMMA(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 27:
    	    // /home/cross/workspace/djondb/db/grammars/dql.g:1:160: LPAREN
    	    {
    	        /* 1:160: LPAREN */
    	        mLPAREN(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 28:
    	    // /home/cross/workspace/djondb/db/grammars/dql.g:1:167: RPAREN
    	    {
    	        /* 1:167: RPAREN */
    	        mRPAREN(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 29:
    	    // /home/cross/workspace/djondb/db/grammars/dql.g:1:174: LBRAN
    	    {
    	        /* 1:174: LBRAN */
    	        mLBRAN(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 30:
    	    // /home/cross/workspace/djondb/db/grammars/dql.g:1:180: RBRAN
    	    {
    	        /* 1:180: RBRAN */
    	        mRBRAN(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 31:
    	    // /home/cross/workspace/djondb/db/grammars/dql.g:1:186: LBRAK
    	    {
    	        /* 1:186: LBRAK */
    	        mLBRAK(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 32:
    	    // /home/cross/workspace/djondb/db/grammars/dql.g:1:192: RBRAK
    	    {
    	        /* 1:192: RBRAK */
    	        mRBRAK(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 33:
    	    // /home/cross/workspace/djondb/db/grammars/dql.g:1:198: COLON
    	    {
    	        /* 1:198: COLON */
    	        mCOLON(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 34:
    	    // /home/cross/workspace/djondb/db/grammars/dql.g:1:204: SEMICOLON
    	    {
    	        /* 1:204: SEMICOLON */
    	        mSEMICOLON(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;

        }
    }

    
    goto ruleTokensEx; /* Prevent compiler warnings */
ruleTokensEx: ;
}

/* =========================================================================
 * Lexer matching rules end.
 * =========================================================================
 */
/* End of Lexer code
 * ================================================
 * ================================================
 */ 


/* End of code
 * =============================================================================
 */
