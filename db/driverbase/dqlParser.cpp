/** \file
 *  This C source file was generated by $ANTLR version 3.2 Sep 23, 2009 12:02:23
 *
 *     -  From the grammar source file : /home/cross/workspace/djondb/db/grammars/dql.g
 *     -                            On : 2013-07-21 04:35:06
 *     -                for the parser : dqlParserParser *
 * Editing it, at least manually, is not wise. 
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
*/
// [The "BSD licence"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

/* -----------------------------------------
 * Include the ANTLR3 generated header file.
 */
#include    "dqlParser.h"

static void displayRecognitionErrorNew  (pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_UINT8 * tokenNames) throw(ParseException)
{ 
/*
    switch (recognizer->state->exception->type) {
    	case ANTLR3_UNWANTED_TOKEN_EXCEPTION:
		break;
	default:
		throw ParseException(1, (char*)recognizer->state->exception->message);
    }
    */
}
static void reportOverride(pANTLR3_BASE_RECOGNIZER recognizer) {
}
 
/* ----------------------------------------- */





/* MACROS that hide the C interface implementations from the
 * generated code, which makes it a little more understandable to the human eye.
 * I am very much against using C pre-processor macros for function calls and bits
 * of code as you cannot see what is happening when single stepping in debuggers
 * and so on. The exception (in my book at least) is for generated code, where you are
 * not maintaining it, but may wish to read and understand it. If you single step it, you know that input()
 * hides some indirect calls, but is always referring to the input stream. This is
 * probably more readable than ctx->input->istream->input(snarfle0->blarg) and allows me to rejig
 * the runtime interfaces without changing the generated code too often, without
 * confusing the reader of the generated output, who may not wish to know the gory
 * details of the interface inheritance.
 */
 
#define		CTX	ctx

/* Aids in accessing scopes for grammar programmers
 */
#undef	SCOPE_TYPE
#undef	SCOPE_STACK
#undef	SCOPE_TOP
#define	SCOPE_TYPE(scope)   pdqlParser_##scope##_SCOPE
#define SCOPE_STACK(scope)  pdqlParser_##scope##Stack
#define	SCOPE_TOP(scope)    ctx->pdqlParser_##scope##Top
#define	SCOPE_SIZE(scope)		ctx->pdqlParser_##scope##Stack_limit
#define SCOPE_INSTANCE(scope, i)	(ctx->SCOPE_STACK(scope)->get(ctx->SCOPE_STACK(scope),i))

/* Macros for accessing things in the parser
 */
 
#undef	    PARSER		    
#undef	    RECOGNIZER		    
#undef	    HAVEPARSEDRULE
#undef		MEMOIZE
#undef	    INPUT
#undef	    STRSTREAM
#undef	    HASEXCEPTION
#undef	    EXCEPTION
#undef	    MATCHT
#undef	    MATCHANYT
#undef	    FOLLOWSTACK
#undef	    FOLLOWPUSH
#undef	    FOLLOWPOP
#undef	    PRECOVER
#undef	    PREPORTERROR
#undef	    LA
#undef	    LT
#undef	    CONSTRUCTEX
#undef	    CONSUME
#undef	    MARK
#undef	    REWIND
#undef	    REWINDLAST
#undef	    PERRORRECOVERY
#undef	    HASFAILED
#undef	    FAILEDFLAG
#undef	    RECOVERFROMMISMATCHEDSET
#undef	    RECOVERFROMMISMATCHEDELEMENT
#undef		INDEX
#undef      ADAPTOR
#undef		SEEK
#undef	    RULEMEMO		    
#undef		DBG

#define	    PARSER							ctx->pParser  
#define	    RECOGNIZER						PARSER->rec
#define		PSRSTATE						RECOGNIZER->state
#define	    HAVEPARSEDRULE(r)				RECOGNIZER->alreadyParsedRule(RECOGNIZER, r)
#define		MEMOIZE(ri,si)					RECOGNIZER->memoize(RECOGNIZER, ri, si)
#define	    INPUT							PARSER->tstream
#define	    STRSTREAM						INPUT
#define		ISTREAM							INPUT->istream
#define		INDEX()							ISTREAM->index(INPUT->istream)
#define	    HASEXCEPTION()					(PSRSTATE->error == ANTLR3_TRUE)
#define	    EXCEPTION						PSRSTATE->exception
#define	    MATCHT(t, fs)					RECOGNIZER->match(RECOGNIZER, t, fs)
#define	    MATCHANYT()						RECOGNIZER->matchAny(RECOGNIZER)
#define	    FOLLOWSTACK					    PSRSTATE->following
#define	    FOLLOWPUSH(x)					FOLLOWSTACK->push(FOLLOWSTACK, ((void *)(&(x))), NULL)
#define	    FOLLOWPOP()						FOLLOWSTACK->pop(FOLLOWSTACK)
#define	    PRECOVER()						RECOGNIZER->recover(RECOGNIZER)
#define	    PREPORTERROR()					RECOGNIZER->reportError(RECOGNIZER)
#define	    LA(n)							INPUT->istream->_LA(ISTREAM, n)
#define	    LT(n)							INPUT->_LT(INPUT, n)
#define	    CONSTRUCTEX()					RECOGNIZER->exConstruct(RECOGNIZER)
#define	    CONSUME()						ISTREAM->consume(ISTREAM)
#define	    MARK()							ISTREAM->mark(ISTREAM)
#define	    REWIND(m)						ISTREAM->rewind(ISTREAM, m)
#define	    REWINDLAST()					ISTREAM->rewindLast(ISTREAM)
#define		SEEK(n)							ISTREAM->seek(ISTREAM, n)
#define	    PERRORRECOVERY					PSRSTATE->errorRecovery
#define	    FAILEDFLAG						PSRSTATE->failed
#define	    HASFAILED()						(FAILEDFLAG == ANTLR3_TRUE)
#define	    BACKTRACKING					PSRSTATE->backtracking
#define	    RECOVERFROMMISMATCHEDSET(s)		RECOGNIZER->recoverFromMismatchedSet(RECOGNIZER, s)
#define	    RECOVERFROMMISMATCHEDELEMENT(e)	RECOGNIZER->recoverFromMismatchedElement(RECOGNIZER, s)
#define     ADAPTOR                         ctx->adaptor
#define		RULEMEMO						PSRSTATE->ruleMemo
#define		DBG								RECOGNIZER->debugger

#define		TOKTEXT(tok, txt)				tok, (pANTLR3_UINT8)txt

/* The 4 tokens defined below may well clash with your own #defines or token types. If so
 * then for the present you must use different names for your defines as these are hard coded
 * in the code generator. It would be better not to use such names internally, and maybe
 * we can change this in a forthcoming release. I deliberately do not #undef these
 * here as this will at least give you a redefined error somewhere if they clash.
 */
#define	    UP	    ANTLR3_TOKEN_UP
#define	    DOWN    ANTLR3_TOKEN_DOWN
#define	    EOR	    ANTLR3_TOKEN_EOR
#define	    INVALID ANTLR3_TOKEN_INVALID


/* =============================================================================
 * Functions to create and destroy scopes. First come the rule scopes, followed
 * by the global declared scopes.
 */



/* ============================================================================= */

/* =============================================================================
 * Start of recognizer
 */



/** \brief Table of all token names in symbolic order, mainly used for
 *         error reporting.
 */
pANTLR3_UINT8   dqlParserTokenNames[41+4]
     = {
        (pANTLR3_UINT8) "<invalid>",       /* String to print to indicate an invalid token */
        (pANTLR3_UINT8) "<EOR>",
        (pANTLR3_UINT8) "<DOWN>", 
        (pANTLR3_UINT8) "<UP>", 
        (pANTLR3_UINT8) "SELECT",
        (pANTLR3_UINT8) "TOP",
        (pANTLR3_UINT8) "NUMBER",
        (pANTLR3_UINT8) "ALL_FIELDS",
        (pANTLR3_UINT8) "XPATH",
        (pANTLR3_UINT8) "COMMA",
        (pANTLR3_UINT8) "FROM",
        (pANTLR3_UINT8) "ID",
        (pANTLR3_UINT8) "COLON",
        (pANTLR3_UINT8) "NS_ID",
        (pANTLR3_UINT8) "WHERE",
        (pANTLR3_UINT8) "INSERT",
        (pANTLR3_UINT8) "INTO",
        (pANTLR3_UINT8) "UPDATE",
        (pANTLR3_UINT8) "REMOVE",
        (pANTLR3_UINT8) "STRING",
        (pANTLR3_UINT8) "WITH",
        (pANTLR3_UINT8) "OR",
        (pANTLR3_UINT8) "AND",
        (pANTLR3_UINT8) "LPAREN",
        (pANTLR3_UINT8) "RPAREN",
        (pANTLR3_UINT8) "OPER",
        (pANTLR3_UINT8) "EXISTS",
        (pANTLR3_UINT8) "NOT",
        (pANTLR3_UINT8) "TRUE",
        (pANTLR3_UINT8) "FALSE",
        (pANTLR3_UINT8) "FLOAT",
        (pANTLR3_UINT8) "LBRAK",
        (pANTLR3_UINT8) "RBRAK",
        (pANTLR3_UINT8) "LBRAN",
        (pANTLR3_UINT8) "RBRAN",
        (pANTLR3_UINT8) "EXPONENT",
        (pANTLR3_UINT8) "DOLLAR",
        (pANTLR3_UINT8) "ADM",
        (pANTLR3_UINT8) "COMMENT",
        (pANTLR3_UINT8) "WS",
        (pANTLR3_UINT8) "HEX_DIGIT",
        (pANTLR3_UINT8) "UNICODE_ESC",
        (pANTLR3_UINT8) "OCTAL_ESC",
        (pANTLR3_UINT8) "ESC_SEQ",
        (pANTLR3_UINT8) "SEMICOLON"
       };

        

// Forward declare the locally static matching functions we have generated.
//
static Command*	start_point    (pdqlParser ctx);
static Command*	dql    (pdqlParser ctx);
static Command*	query_expr    (pdqlParser ctx);
static Command*	insert_expr    (pdqlParser ctx);
static Command*	update_expr    (pdqlParser ctx);
static Command*	remove_expr    (pdqlParser ctx);
static dqlParser_filter_expr_return	filter_expr    (pdqlParser ctx);
static void	boolean_expr    (pdqlParser ctx);
static void	boolean_term    (pdqlParser ctx);
static void	boolean_value    (pdqlParser ctx);
static void	parenthesized_boolean    (pdqlParser ctx);
static void	nonparentherized_boolean    (pdqlParser ctx);
static void	unary_expr    (pdqlParser ctx);
static void	exists_expr    (pdqlParser ctx);
static void	not_expr    (pdqlParser ctx);
static void	xpath_expr    (pdqlParser ctx);
static void	id_expr    (pdqlParser ctx);
static void	constant_expr    (pdqlParser ctx);
static void	json_const    (pdqlParser ctx);
static void	operand_expr    (pdqlParser ctx);
static void	json_array_expr    (pdqlParser ctx);
static dqlParser_json_expr_return	json_expr    (pdqlParser ctx);
static void	json_fieldname    (pdqlParser ctx);
static void	dqlParserFree(pdqlParser ctx);
/* For use in tree output where we are accumulating rule labels via label += ruleRef
 * we need a function that knows how to free a return scope when the list is destroyed. 
 * We cannot just use ANTLR3_FREE because in debug tracking mode, this is a macro.
 */
static	void ANTLR3_CDECL freeScope(void * scope)
{
    ANTLR3_FREE(scope);
}

/** \brief Name of the grammar file that generated this code
 */
static const char fileName[] = "/home/cross/workspace/djondb/db/grammars/dql.g";

/** \brief Return the name of the grammar file that generated this code.
 */
static const char * getGrammarFileName()
{
	return fileName;
}
/** \brief Create a new dqlParser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
ANTLR3_API pdqlParser
dqlParserNew   (pANTLR3_COMMON_TOKEN_STREAM instream)
{
	// See if we can create a new parser with the standard constructor
	//
	return dqlParserNewSSD(instream, NULL);
}

/** \brief Create a new dqlParser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
ANTLR3_API pdqlParser
dqlParserNewSSD   (pANTLR3_COMMON_TOKEN_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state)
{
    pdqlParser ctx;	    /* Context structure we will build and return   */
    
    ctx	= (pdqlParser) ANTLR3_CALLOC(1, sizeof(dqlParser));
    
    if	(ctx == NULL)
    {
		// Failed to allocate memory for parser context
		//
        return  NULL;
    }
    
    /* -------------------------------------------------------------------
     * Memory for basic structure is allocated, now to fill in
     * the base ANTLR3 structures. We initialize the function pointers
     * for the standard ANTLR3 parser function set, but upon return
     * from here, the programmer may set the pointers to provide custom
     * implementations of each function. 
     *
     * We don't use the macros defined in dqlParser.h here, in order that you can get a sense
     * of what goes where.
     */

    /* Create a base parser/recognizer, using the supplied token stream
     */
    ctx->pParser	    = antlr3ParserNewStream(ANTLR3_SIZE_HINT, instream->tstream, state);
    /* Install the implementation of our dqlParser interface
     */
    ctx->start_point	= start_point;
    ctx->dql	= dql;
    ctx->query_expr	= query_expr;
    ctx->insert_expr	= insert_expr;
    ctx->update_expr	= update_expr;
    ctx->remove_expr	= remove_expr;
    ctx->filter_expr	= filter_expr;
    ctx->boolean_expr	= boolean_expr;
    ctx->boolean_term	= boolean_term;
    ctx->boolean_value	= boolean_value;
    ctx->parenthesized_boolean	= parenthesized_boolean;
    ctx->nonparentherized_boolean	= nonparentherized_boolean;
    ctx->unary_expr	= unary_expr;
    ctx->exists_expr	= exists_expr;
    ctx->not_expr	= not_expr;
    ctx->xpath_expr	= xpath_expr;
    ctx->id_expr	= id_expr;
    ctx->constant_expr	= constant_expr;
    ctx->json_const	= json_const;
    ctx->operand_expr	= operand_expr;
    ctx->json_array_expr	= json_array_expr;
    ctx->json_expr	= json_expr;
    ctx->json_fieldname	= json_fieldname;
    ctx->free			= dqlParserFree;
    ctx->getGrammarFileName	= getGrammarFileName;
    
    /* Install the scope pushing methods.
     */

        
    

     RECOGNIZER->displayRecognitionError       = displayRecognitionErrorNew;
    // RECOGNIZER->reportError = reportOverride;
    //  RECOGNIZER->antlr3RecognitionExceptionNew = antlr3RecognitionExceptionNewNew;
    //  RECOGNIZER->mismatch                      = mismatchNew;

	
    /* Install the token table
     */
    PSRSTATE->tokenNames   = dqlParserTokenNames;
    
    
    /* Return the newly built parser to the caller
     */
    return  ctx;
}

/** Free the parser resources
 */
 static void
 dqlParserFree(pdqlParser ctx)
 {
    /* Free any scope memory
     */
    
        
	// Free this parser
	//
    ctx->pParser->free(ctx->pParser);
    ANTLR3_FREE(ctx);

    /* Everything is released, so we can return
     */
    return;
 }
 
/** Return token names used by this parser
 *
 * The returned pointer is used as an index into the token names table (using the token 
 * number as the index).
 * 
 * \return Pointer to first char * in the table.
 */
static pANTLR3_UINT8    *getTokenNames() 
{
        return dqlParserTokenNames; 
}

    
/* Declare the bitsets
 */

/** Bitset defining follow set for error recovery in rule state: FOLLOW_dql_in_start_point58  */
static	ANTLR3_BITWORD FOLLOW_dql_in_start_point58_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_dql_in_start_point58	= { FOLLOW_dql_in_start_point58_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EOF_in_start_point60  */
static	ANTLR3_BITWORD FOLLOW_EOF_in_start_point60_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_EOF_in_start_point60	= { FOLLOW_EOF_in_start_point60_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_query_expr_in_dql77  */
static	ANTLR3_BITWORD FOLLOW_query_expr_in_dql77_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_query_expr_in_dql77	= { FOLLOW_query_expr_in_dql77_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_insert_expr_in_dql85  */
static	ANTLR3_BITWORD FOLLOW_insert_expr_in_dql85_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_insert_expr_in_dql85	= { FOLLOW_insert_expr_in_dql85_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_update_expr_in_dql94  */
static	ANTLR3_BITWORD FOLLOW_update_expr_in_dql94_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_update_expr_in_dql94	= { FOLLOW_update_expr_in_dql94_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_remove_expr_in_dql103  */
static	ANTLR3_BITWORD FOLLOW_remove_expr_in_dql103_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_remove_expr_in_dql103	= { FOLLOW_remove_expr_in_dql103_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SELECT_in_query_expr124  */
static	ANTLR3_BITWORD FOLLOW_SELECT_in_query_expr124_bits[]	= { ANTLR3_UINT64_LIT(0x00000000000001A0) };
static  ANTLR3_BITSET_LIST FOLLOW_SELECT_in_query_expr124	= { FOLLOW_SELECT_in_query_expr124_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_TOP_in_query_expr127  */
static	ANTLR3_BITWORD FOLLOW_TOP_in_query_expr127_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000040) };
static  ANTLR3_BITSET_LIST FOLLOW_TOP_in_query_expr127	= { FOLLOW_TOP_in_query_expr127_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NUMBER_in_query_expr131  */
static	ANTLR3_BITWORD FOLLOW_NUMBER_in_query_expr131_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000180) };
static  ANTLR3_BITSET_LIST FOLLOW_NUMBER_in_query_expr131	= { FOLLOW_NUMBER_in_query_expr131_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ALL_FIELDS_in_query_expr138  */
static	ANTLR3_BITWORD FOLLOW_ALL_FIELDS_in_query_expr138_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_ALL_FIELDS_in_query_expr138	= { FOLLOW_ALL_FIELDS_in_query_expr138_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_XPATH_in_query_expr146  */
static	ANTLR3_BITWORD FOLLOW_XPATH_in_query_expr146_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000600) };
static  ANTLR3_BITSET_LIST FOLLOW_XPATH_in_query_expr146	= { FOLLOW_XPATH_in_query_expr146_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COMMA_in_query_expr151  */
static	ANTLR3_BITWORD FOLLOW_COMMA_in_query_expr151_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000100) };
static  ANTLR3_BITSET_LIST FOLLOW_COMMA_in_query_expr151	= { FOLLOW_COMMA_in_query_expr151_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_XPATH_in_query_expr155  */
static	ANTLR3_BITWORD FOLLOW_XPATH_in_query_expr155_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000600) };
static  ANTLR3_BITSET_LIST FOLLOW_XPATH_in_query_expr155	= { FOLLOW_XPATH_in_query_expr155_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_FROM_in_query_expr165  */
static	ANTLR3_BITWORD FOLLOW_FROM_in_query_expr165_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000800) };
static  ANTLR3_BITSET_LIST FOLLOW_FROM_in_query_expr165	= { FOLLOW_FROM_in_query_expr165_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_query_expr169  */
static	ANTLR3_BITWORD FOLLOW_ID_in_query_expr169_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000001000) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_query_expr169	= { FOLLOW_ID_in_query_expr169_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COLON_in_query_expr173  */
static	ANTLR3_BITWORD FOLLOW_COLON_in_query_expr173_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000002800) };
static  ANTLR3_BITSET_LIST FOLLOW_COLON_in_query_expr173	= { FOLLOW_COLON_in_query_expr173_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_query_expr177  */
static	ANTLR3_BITWORD FOLLOW_set_in_query_expr177_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000004002) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_query_expr177	= { FOLLOW_set_in_query_expr177_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_WHERE_in_query_expr188  */
static	ANTLR3_BITWORD FOLLOW_WHERE_in_query_expr188_bits[]	= { ANTLR3_UINT64_LIT(0x000000003C880140) };
static  ANTLR3_BITSET_LIST FOLLOW_WHERE_in_query_expr188	= { FOLLOW_WHERE_in_query_expr188_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_filter_expr_in_query_expr192  */
static	ANTLR3_BITWORD FOLLOW_filter_expr_in_query_expr192_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_filter_expr_in_query_expr192	= { FOLLOW_filter_expr_in_query_expr192_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_INSERT_in_insert_expr213  */
static	ANTLR3_BITWORD FOLLOW_INSERT_in_insert_expr213_bits[]	= { ANTLR3_UINT64_LIT(0x0000000200000000) };
static  ANTLR3_BITSET_LIST FOLLOW_INSERT_in_insert_expr213	= { FOLLOW_INSERT_in_insert_expr213_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_json_expr_in_insert_expr215  */
static	ANTLR3_BITWORD FOLLOW_json_expr_in_insert_expr215_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000010000) };
static  ANTLR3_BITSET_LIST FOLLOW_json_expr_in_insert_expr215	= { FOLLOW_json_expr_in_insert_expr215_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_INTO_in_insert_expr219  */
static	ANTLR3_BITWORD FOLLOW_INTO_in_insert_expr219_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000800) };
static  ANTLR3_BITSET_LIST FOLLOW_INTO_in_insert_expr219	= { FOLLOW_INTO_in_insert_expr219_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_insert_expr223  */
static	ANTLR3_BITWORD FOLLOW_ID_in_insert_expr223_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000001000) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_insert_expr223	= { FOLLOW_ID_in_insert_expr223_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COLON_in_insert_expr225  */
static	ANTLR3_BITWORD FOLLOW_COLON_in_insert_expr225_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000002800) };
static  ANTLR3_BITSET_LIST FOLLOW_COLON_in_insert_expr225	= { FOLLOW_COLON_in_insert_expr225_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_insert_expr229  */
static	ANTLR3_BITWORD FOLLOW_set_in_insert_expr229_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_insert_expr229	= { FOLLOW_set_in_insert_expr229_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_UPDATE_in_update_expr254  */
static	ANTLR3_BITWORD FOLLOW_UPDATE_in_update_expr254_bits[]	= { ANTLR3_UINT64_LIT(0x0000000200000000) };
static  ANTLR3_BITSET_LIST FOLLOW_UPDATE_in_update_expr254	= { FOLLOW_UPDATE_in_update_expr254_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_json_expr_in_update_expr256  */
static	ANTLR3_BITWORD FOLLOW_json_expr_in_update_expr256_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000010000) };
static  ANTLR3_BITSET_LIST FOLLOW_json_expr_in_update_expr256	= { FOLLOW_json_expr_in_update_expr256_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_INTO_in_update_expr260  */
static	ANTLR3_BITWORD FOLLOW_INTO_in_update_expr260_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000800) };
static  ANTLR3_BITSET_LIST FOLLOW_INTO_in_update_expr260	= { FOLLOW_INTO_in_update_expr260_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_update_expr264  */
static	ANTLR3_BITWORD FOLLOW_ID_in_update_expr264_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000001000) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_update_expr264	= { FOLLOW_ID_in_update_expr264_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COLON_in_update_expr266  */
static	ANTLR3_BITWORD FOLLOW_COLON_in_update_expr266_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000002800) };
static  ANTLR3_BITSET_LIST FOLLOW_COLON_in_update_expr266	= { FOLLOW_COLON_in_update_expr266_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_update_expr270  */
static	ANTLR3_BITWORD FOLLOW_set_in_update_expr270_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_update_expr270	= { FOLLOW_set_in_update_expr270_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_REMOVE_in_remove_expr296  */
static	ANTLR3_BITWORD FOLLOW_REMOVE_in_remove_expr296_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000080000) };
static  ANTLR3_BITSET_LIST FOLLOW_REMOVE_in_remove_expr296	= { FOLLOW_REMOVE_in_remove_expr296_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_STRING_in_remove_expr300  */
static	ANTLR3_BITWORD FOLLOW_STRING_in_remove_expr300_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000100400) };
static  ANTLR3_BITSET_LIST FOLLOW_STRING_in_remove_expr300	= { FOLLOW_STRING_in_remove_expr300_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_WITH_in_remove_expr305  */
static	ANTLR3_BITWORD FOLLOW_WITH_in_remove_expr305_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000080000) };
static  ANTLR3_BITSET_LIST FOLLOW_WITH_in_remove_expr305	= { FOLLOW_WITH_in_remove_expr305_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_STRING_in_remove_expr309  */
static	ANTLR3_BITWORD FOLLOW_STRING_in_remove_expr309_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_STRING_in_remove_expr309	= { FOLLOW_STRING_in_remove_expr309_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_FROM_in_remove_expr315  */
static	ANTLR3_BITWORD FOLLOW_FROM_in_remove_expr315_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000800) };
static  ANTLR3_BITSET_LIST FOLLOW_FROM_in_remove_expr315	= { FOLLOW_FROM_in_remove_expr315_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_remove_expr319  */
static	ANTLR3_BITWORD FOLLOW_ID_in_remove_expr319_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000001000) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_remove_expr319	= { FOLLOW_ID_in_remove_expr319_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COLON_in_remove_expr321  */
static	ANTLR3_BITWORD FOLLOW_COLON_in_remove_expr321_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000002800) };
static  ANTLR3_BITSET_LIST FOLLOW_COLON_in_remove_expr321	= { FOLLOW_COLON_in_remove_expr321_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_remove_expr325  */
static	ANTLR3_BITWORD FOLLOW_set_in_remove_expr325_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_remove_expr325	= { FOLLOW_set_in_remove_expr325_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_boolean_expr_in_filter_expr341  */
static	ANTLR3_BITWORD FOLLOW_boolean_expr_in_filter_expr341_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_boolean_expr_in_filter_expr341	= { FOLLOW_boolean_expr_in_filter_expr341_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_boolean_term_in_boolean_expr354  */
static	ANTLR3_BITWORD FOLLOW_boolean_term_in_boolean_expr354_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000200002) };
static  ANTLR3_BITSET_LIST FOLLOW_boolean_term_in_boolean_expr354	= { FOLLOW_boolean_term_in_boolean_expr354_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_OR_in_boolean_expr359  */
static	ANTLR3_BITWORD FOLLOW_OR_in_boolean_expr359_bits[]	= { ANTLR3_UINT64_LIT(0x000000003C880140) };
static  ANTLR3_BITSET_LIST FOLLOW_OR_in_boolean_expr359	= { FOLLOW_OR_in_boolean_expr359_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_boolean_term_in_boolean_expr363  */
static	ANTLR3_BITWORD FOLLOW_boolean_term_in_boolean_expr363_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000200002) };
static  ANTLR3_BITSET_LIST FOLLOW_boolean_term_in_boolean_expr363	= { FOLLOW_boolean_term_in_boolean_expr363_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_boolean_value_in_boolean_term377  */
static	ANTLR3_BITWORD FOLLOW_boolean_value_in_boolean_term377_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000400002) };
static  ANTLR3_BITSET_LIST FOLLOW_boolean_value_in_boolean_term377	= { FOLLOW_boolean_value_in_boolean_term377_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_AND_in_boolean_term382  */
static	ANTLR3_BITWORD FOLLOW_AND_in_boolean_term382_bits[]	= { ANTLR3_UINT64_LIT(0x000000003C880140) };
static  ANTLR3_BITSET_LIST FOLLOW_AND_in_boolean_term382	= { FOLLOW_AND_in_boolean_term382_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_boolean_value_in_boolean_term386  */
static	ANTLR3_BITWORD FOLLOW_boolean_value_in_boolean_term386_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000400002) };
static  ANTLR3_BITSET_LIST FOLLOW_boolean_value_in_boolean_term386	= { FOLLOW_boolean_value_in_boolean_term386_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_parenthesized_boolean_in_boolean_value398  */
static	ANTLR3_BITWORD FOLLOW_parenthesized_boolean_in_boolean_value398_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_parenthesized_boolean_in_boolean_value398	= { FOLLOW_parenthesized_boolean_in_boolean_value398_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_nonparentherized_boolean_in_boolean_value404  */
static	ANTLR3_BITWORD FOLLOW_nonparentherized_boolean_in_boolean_value404_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_nonparentherized_boolean_in_boolean_value404	= { FOLLOW_nonparentherized_boolean_in_boolean_value404_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LPAREN_in_parenthesized_boolean415  */
static	ANTLR3_BITWORD FOLLOW_LPAREN_in_parenthesized_boolean415_bits[]	= { ANTLR3_UINT64_LIT(0x000000003C880140) };
static  ANTLR3_BITSET_LIST FOLLOW_LPAREN_in_parenthesized_boolean415	= { FOLLOW_LPAREN_in_parenthesized_boolean415_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_boolean_expr_in_parenthesized_boolean417  */
static	ANTLR3_BITWORD FOLLOW_boolean_expr_in_parenthesized_boolean417_bits[]	= { ANTLR3_UINT64_LIT(0x0000000001000000) };
static  ANTLR3_BITSET_LIST FOLLOW_boolean_expr_in_parenthesized_boolean417	= { FOLLOW_boolean_expr_in_parenthesized_boolean417_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RPAREN_in_parenthesized_boolean419  */
static	ANTLR3_BITWORD FOLLOW_RPAREN_in_parenthesized_boolean419_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_RPAREN_in_parenthesized_boolean419	= { FOLLOW_RPAREN_in_parenthesized_boolean419_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_unary_expr_in_nonparentherized_boolean432  */
static	ANTLR3_BITWORD FOLLOW_unary_expr_in_nonparentherized_boolean432_bits[]	= { ANTLR3_UINT64_LIT(0x0000000002000002) };
static  ANTLR3_BITSET_LIST FOLLOW_unary_expr_in_nonparentherized_boolean432	= { FOLLOW_unary_expr_in_nonparentherized_boolean432_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_OPER_in_nonparentherized_boolean437  */
static	ANTLR3_BITWORD FOLLOW_OPER_in_nonparentherized_boolean437_bits[]	= { ANTLR3_UINT64_LIT(0x000000003C880140) };
static  ANTLR3_BITSET_LIST FOLLOW_OPER_in_nonparentherized_boolean437	= { FOLLOW_OPER_in_nonparentherized_boolean437_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_unary_expr_in_nonparentherized_boolean441  */
static	ANTLR3_BITWORD FOLLOW_unary_expr_in_nonparentherized_boolean441_bits[]	= { ANTLR3_UINT64_LIT(0x0000000002000002) };
static  ANTLR3_BITSET_LIST FOLLOW_unary_expr_in_nonparentherized_boolean441	= { FOLLOW_unary_expr_in_nonparentherized_boolean441_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_constant_expr_in_unary_expr456  */
static	ANTLR3_BITWORD FOLLOW_constant_expr_in_unary_expr456_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_constant_expr_in_unary_expr456	= { FOLLOW_constant_expr_in_unary_expr456_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_xpath_expr_in_unary_expr462  */
static	ANTLR3_BITWORD FOLLOW_xpath_expr_in_unary_expr462_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_xpath_expr_in_unary_expr462	= { FOLLOW_xpath_expr_in_unary_expr462_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_exists_expr_in_unary_expr468  */
static	ANTLR3_BITWORD FOLLOW_exists_expr_in_unary_expr468_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_exists_expr_in_unary_expr468	= { FOLLOW_exists_expr_in_unary_expr468_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_not_expr_in_unary_expr474  */
static	ANTLR3_BITWORD FOLLOW_not_expr_in_unary_expr474_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_not_expr_in_unary_expr474	= { FOLLOW_not_expr_in_unary_expr474_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EXISTS_in_exists_expr484  */
static	ANTLR3_BITWORD FOLLOW_EXISTS_in_exists_expr484_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000800000) };
static  ANTLR3_BITSET_LIST FOLLOW_EXISTS_in_exists_expr484	= { FOLLOW_EXISTS_in_exists_expr484_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LPAREN_in_exists_expr486  */
static	ANTLR3_BITWORD FOLLOW_LPAREN_in_exists_expr486_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000100) };
static  ANTLR3_BITSET_LIST FOLLOW_LPAREN_in_exists_expr486	= { FOLLOW_LPAREN_in_exists_expr486_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_xpath_expr_in_exists_expr488  */
static	ANTLR3_BITWORD FOLLOW_xpath_expr_in_exists_expr488_bits[]	= { ANTLR3_UINT64_LIT(0x0000000001000000) };
static  ANTLR3_BITSET_LIST FOLLOW_xpath_expr_in_exists_expr488	= { FOLLOW_xpath_expr_in_exists_expr488_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RPAREN_in_exists_expr490  */
static	ANTLR3_BITWORD FOLLOW_RPAREN_in_exists_expr490_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_RPAREN_in_exists_expr490	= { FOLLOW_RPAREN_in_exists_expr490_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NOT_in_not_expr501  */
static	ANTLR3_BITWORD FOLLOW_NOT_in_not_expr501_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000800000) };
static  ANTLR3_BITSET_LIST FOLLOW_NOT_in_not_expr501	= { FOLLOW_NOT_in_not_expr501_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LPAREN_in_not_expr503  */
static	ANTLR3_BITWORD FOLLOW_LPAREN_in_not_expr503_bits[]	= { ANTLR3_UINT64_LIT(0x0000000004000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LPAREN_in_not_expr503	= { FOLLOW_LPAREN_in_not_expr503_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_exists_expr_in_not_expr507  */
static	ANTLR3_BITWORD FOLLOW_exists_expr_in_not_expr507_bits[]	= { ANTLR3_UINT64_LIT(0x0000000001000000) };
static  ANTLR3_BITSET_LIST FOLLOW_exists_expr_in_not_expr507	= { FOLLOW_exists_expr_in_not_expr507_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RPAREN_in_not_expr509  */
static	ANTLR3_BITWORD FOLLOW_RPAREN_in_not_expr509_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_RPAREN_in_not_expr509	= { FOLLOW_RPAREN_in_not_expr509_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NOT_in_not_expr515  */
static	ANTLR3_BITWORD FOLLOW_NOT_in_not_expr515_bits[]	= { ANTLR3_UINT64_LIT(0x0000000004000000) };
static  ANTLR3_BITSET_LIST FOLLOW_NOT_in_not_expr515	= { FOLLOW_NOT_in_not_expr515_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_exists_expr_in_not_expr519  */
static	ANTLR3_BITWORD FOLLOW_exists_expr_in_not_expr519_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_exists_expr_in_not_expr519	= { FOLLOW_exists_expr_in_not_expr519_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_XPATH_in_xpath_expr530  */
static	ANTLR3_BITWORD FOLLOW_XPATH_in_xpath_expr530_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_XPATH_in_xpath_expr530	= { FOLLOW_XPATH_in_xpath_expr530_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_id_expr538  */
static	ANTLR3_BITWORD FOLLOW_ID_in_id_expr538_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_id_expr538	= { FOLLOW_ID_in_id_expr538_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_constant_expr547  */
static	ANTLR3_BITWORD FOLLOW_set_in_constant_expr547_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_constant_expr547	= { FOLLOW_set_in_constant_expr547_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_STRING_in_json_const571  */
static	ANTLR3_BITWORD FOLLOW_STRING_in_json_const571_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_STRING_in_json_const571	= { FOLLOW_STRING_in_json_const571_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NUMBER_in_json_const577  */
static	ANTLR3_BITWORD FOLLOW_NUMBER_in_json_const577_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_NUMBER_in_json_const577	= { FOLLOW_NUMBER_in_json_const577_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_FLOAT_in_json_const583  */
static	ANTLR3_BITWORD FOLLOW_FLOAT_in_json_const583_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_FLOAT_in_json_const583	= { FOLLOW_FLOAT_in_json_const583_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_json_const588  */
static	ANTLR3_BITWORD FOLLOW_set_in_json_const588_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_json_const588	= { FOLLOW_set_in_json_const588_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_json_array_expr_in_json_const603  */
static	ANTLR3_BITWORD FOLLOW_json_array_expr_in_json_const603_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_json_array_expr_in_json_const603	= { FOLLOW_json_array_expr_in_json_const603_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_json_expr_in_json_const608  */
static	ANTLR3_BITWORD FOLLOW_json_expr_in_json_const608_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_json_expr_in_json_const608	= { FOLLOW_json_expr_in_json_const608_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_OPER_in_operand_expr616  */
static	ANTLR3_BITWORD FOLLOW_OPER_in_operand_expr616_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_OPER_in_operand_expr616	= { FOLLOW_OPER_in_operand_expr616_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LBRAK_in_json_array_expr627  */
static	ANTLR3_BITWORD FOLLOW_LBRAK_in_json_array_expr627_bits[]	= { ANTLR3_UINT64_LIT(0x0000000200000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LBRAK_in_json_array_expr627	= { FOLLOW_LBRAK_in_json_array_expr627_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_json_expr_in_json_array_expr631  */
static	ANTLR3_BITWORD FOLLOW_json_expr_in_json_array_expr631_bits[]	= { ANTLR3_UINT64_LIT(0x0000000100000200) };
static  ANTLR3_BITSET_LIST FOLLOW_json_expr_in_json_array_expr631	= { FOLLOW_json_expr_in_json_array_expr631_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COMMA_in_json_array_expr636  */
static	ANTLR3_BITWORD FOLLOW_COMMA_in_json_array_expr636_bits[]	= { ANTLR3_UINT64_LIT(0x0000000200000000) };
static  ANTLR3_BITSET_LIST FOLLOW_COMMA_in_json_array_expr636	= { FOLLOW_COMMA_in_json_array_expr636_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_json_expr_in_json_array_expr640  */
static	ANTLR3_BITWORD FOLLOW_json_expr_in_json_array_expr640_bits[]	= { ANTLR3_UINT64_LIT(0x0000000100000200) };
static  ANTLR3_BITSET_LIST FOLLOW_json_expr_in_json_array_expr640	= { FOLLOW_json_expr_in_json_array_expr640_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RBRAK_in_json_array_expr644  */
static	ANTLR3_BITWORD FOLLOW_RBRAK_in_json_array_expr644_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_RBRAK_in_json_array_expr644	= { FOLLOW_RBRAK_in_json_array_expr644_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LBRAN_in_json_expr653  */
static	ANTLR3_BITWORD FOLLOW_LBRAN_in_json_expr653_bits[]	= { ANTLR3_UINT64_LIT(0x0000000400080A00) };
static  ANTLR3_BITSET_LIST FOLLOW_LBRAN_in_json_expr653	= { FOLLOW_LBRAN_in_json_expr653_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_json_fieldname_in_json_expr658  */
static	ANTLR3_BITWORD FOLLOW_json_fieldname_in_json_expr658_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000001000) };
static  ANTLR3_BITSET_LIST FOLLOW_json_fieldname_in_json_expr658	= { FOLLOW_json_fieldname_in_json_expr658_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COLON_in_json_expr660  */
static	ANTLR3_BITWORD FOLLOW_COLON_in_json_expr660_bits[]	= { ANTLR3_UINT64_LIT(0x00000002F0080040) };
static  ANTLR3_BITSET_LIST FOLLOW_COLON_in_json_expr660	= { FOLLOW_COLON_in_json_expr660_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_json_const_in_json_expr664  */
static	ANTLR3_BITWORD FOLLOW_json_const_in_json_expr664_bits[]	= { ANTLR3_UINT64_LIT(0x0000000400000200) };
static  ANTLR3_BITSET_LIST FOLLOW_json_const_in_json_expr664	= { FOLLOW_json_const_in_json_expr664_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COMMA_in_json_expr669  */
static	ANTLR3_BITWORD FOLLOW_COMMA_in_json_expr669_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000080800) };
static  ANTLR3_BITSET_LIST FOLLOW_COMMA_in_json_expr669	= { FOLLOW_COMMA_in_json_expr669_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_json_fieldname_in_json_expr673  */
static	ANTLR3_BITWORD FOLLOW_json_fieldname_in_json_expr673_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000001000) };
static  ANTLR3_BITSET_LIST FOLLOW_json_fieldname_in_json_expr673	= { FOLLOW_json_fieldname_in_json_expr673_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COLON_in_json_expr675  */
static	ANTLR3_BITWORD FOLLOW_COLON_in_json_expr675_bits[]	= { ANTLR3_UINT64_LIT(0x00000002F0080040) };
static  ANTLR3_BITSET_LIST FOLLOW_COLON_in_json_expr675	= { FOLLOW_COLON_in_json_expr675_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_json_const_in_json_expr679  */
static	ANTLR3_BITWORD FOLLOW_json_const_in_json_expr679_bits[]	= { ANTLR3_UINT64_LIT(0x0000000400000200) };
static  ANTLR3_BITSET_LIST FOLLOW_json_const_in_json_expr679	= { FOLLOW_json_const_in_json_expr679_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RBRAN_in_json_expr683  */
static	ANTLR3_BITWORD FOLLOW_RBRAN_in_json_expr683_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_RBRAN_in_json_expr683	= { FOLLOW_RBRAN_in_json_expr683_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_json_fieldname0  */
static	ANTLR3_BITWORD FOLLOW_set_in_json_fieldname0_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_json_fieldname0	= { FOLLOW_set_in_json_fieldname0_bits, 1	};
     

 
 
/* ==============================================
 * Parsing rules
 */
/** 
 * $ANTLR start start_point
 * /home/cross/workspace/djondb/db/grammars/dql.g:56:1: start_point returns [Command* val] : dql EOF ;
 */
static Command*
start_point(pdqlParser ctx)
{   
    Command* val = NULL;

    Command* dql1;
    #undef	RETURN_TYPE_dql1
    #define	RETURN_TYPE_dql1 Command*

    /* Initialize rule variables
     */


    dql1 = NULL;

    {
        // /home/cross/workspace/djondb/db/grammars/dql.g:57:2: ( dql EOF )
        // /home/cross/workspace/djondb/db/grammars/dql.g:57:4: dql EOF
        {
            FOLLOWPUSH(FOLLOW_dql_in_start_point58);
            dql1=dql(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulestart_pointEx;
            }

             MATCHT(EOF, &FOLLOW_EOF_in_start_point60); 
            if  (HASEXCEPTION())
            {
                goto rulestart_pointEx;
            }

            {

                	    val= dql1;
                	
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulestart_pointEx; /* Prevent compiler warnings */
    rulestart_pointEx: ;




    return val;
}
/* $ANTLR end start_point */

/** 
 * $ANTLR start dql
 * /home/cross/workspace/djondb/db/grammars/dql.g:61:1: dql returns [Command* val] : ( query_expr | insert_expr | update_expr | remove_expr );
 */
static Command*
dql(pdqlParser ctx)
{   
    Command* val = NULL;

    Command* query_expr2;
    #undef	RETURN_TYPE_query_expr2
    #define	RETURN_TYPE_query_expr2 Command*

    Command* insert_expr3;
    #undef	RETURN_TYPE_insert_expr3
    #define	RETURN_TYPE_insert_expr3 Command*

    Command* update_expr4;
    #undef	RETURN_TYPE_update_expr4
    #define	RETURN_TYPE_update_expr4 Command*

    Command* remove_expr5;
    #undef	RETURN_TYPE_remove_expr5
    #define	RETURN_TYPE_remove_expr5 Command*

    /* Initialize rule variables
     */


    query_expr2 = NULL;
    insert_expr3 = NULL;
    update_expr4 = NULL;
    remove_expr5 = NULL;

    {
        {
            //  /home/cross/workspace/djondb/db/grammars/dql.g:62:2: ( query_expr | insert_expr | update_expr | remove_expr )
            
            ANTLR3_UINT32 alt1;

            alt1=4;

            switch ( LA(1) ) 
            {
            case SELECT:
            	{
            		alt1=1;
            	}
                break;
            case INSERT:
            	{
            		alt1=2;
            	}
                break;
            case UPDATE:
            	{
            		alt1=3;
            	}
                break;
            case REMOVE:
            	{
            		alt1=4;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 1;
                EXCEPTION->state        = 0;


                goto ruledqlEx;
            }

            switch (alt1) 
            {
        	case 1:
        	    // /home/cross/workspace/djondb/db/grammars/dql.g:62:6: query_expr
        	    {
        	        FOLLOWPUSH(FOLLOW_query_expr_in_dql77);
        	        query_expr2=query_expr(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledqlEx;
        	        }

        	        {
        	             val= query_expr2; 
        	        }

        	    }
        	    break;
        	case 2:
        	    // /home/cross/workspace/djondb/db/grammars/dql.g:63:4: insert_expr
        	    {
        	        FOLLOWPUSH(FOLLOW_insert_expr_in_dql85);
        	        insert_expr3=insert_expr(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledqlEx;
        	        }

        	        {
        	             val= insert_expr3; 
        	        }

        	    }
        	    break;
        	case 3:
        	    // /home/cross/workspace/djondb/db/grammars/dql.g:64:4: update_expr
        	    {
        	        FOLLOWPUSH(FOLLOW_update_expr_in_dql94);
        	        update_expr4=update_expr(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledqlEx;
        	        }

        	        {
        	             val= update_expr4; 
        	        }

        	    }
        	    break;
        	case 4:
        	    // /home/cross/workspace/djondb/db/grammars/dql.g:65:4: remove_expr
        	    {
        	        FOLLOWPUSH(FOLLOW_remove_expr_in_dql103);
        	        remove_expr5=remove_expr(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledqlEx;
        	        }

        	        {
        	             val= remove_expr5; 
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruledqlEx; /* Prevent compiler warnings */
    ruledqlEx: ;




    return val;
}
/* $ANTLR end dql */

/** 
 * $ANTLR start query_expr
 * /home/cross/workspace/djondb/db/grammars/dql.g:67:1: query_expr returns [Command* val] : SELECT ( TOP top= NUMBER )? ( ALL_FIELDS | (x1= XPATH ( COMMA x2= XPATH )* ) ) FROM d1= ID COLON ns= ( ID | NS_ID ) ( WHERE filter= filter_expr )? ;
 */
static Command*
query_expr(pdqlParser ctx)
{   
    Command* val = NULL;

    pANTLR3_COMMON_TOKEN    top;
    pANTLR3_COMMON_TOKEN    x1;
    pANTLR3_COMMON_TOKEN    x2;
    pANTLR3_COMMON_TOKEN    d1;
    pANTLR3_COMMON_TOKEN    ns;
    dqlParser_filter_expr_return filter;
    #undef	RETURN_TYPE_filter
    #define	RETURN_TYPE_filter dqlParser_filter_expr_return

    /* Initialize rule variables
     */



         FindCommand* cmd = new FindCommand();
         BSONObj options;
         MemoryStream ms(500);
         val= cmd;
         bool allfields = false;

    top       = NULL;
    x1       = NULL;
    x2       = NULL;
    d1       = NULL;
    ns       = NULL;

    {
        // /home/cross/workspace/djondb/db/grammars/dql.g:75:2: ( SELECT ( TOP top= NUMBER )? ( ALL_FIELDS | (x1= XPATH ( COMMA x2= XPATH )* ) ) FROM d1= ID COLON ns= ( ID | NS_ID ) ( WHERE filter= filter_expr )? )
        // /home/cross/workspace/djondb/db/grammars/dql.g:75:4: SELECT ( TOP top= NUMBER )? ( ALL_FIELDS | (x1= XPATH ( COMMA x2= XPATH )* ) ) FROM d1= ID COLON ns= ( ID | NS_ID ) ( WHERE filter= filter_expr )?
        {
             MATCHT(SELECT, &FOLLOW_SELECT_in_query_expr124); 
            if  (HASEXCEPTION())
            {
                goto rulequery_exprEx;
            }


            // /home/cross/workspace/djondb/db/grammars/dql.g:75:11: ( TOP top= NUMBER )?
            {
                int alt2=2;
                switch ( LA(1) ) 
                {
                    case TOP:
                    	{
                    		alt2=1;
                    	}
                        break;
                }

                switch (alt2) 
                {
            	case 1:
            	    // /home/cross/workspace/djondb/db/grammars/dql.g:75:12: TOP top= NUMBER
            	    {
            	         MATCHT(TOP, &FOLLOW_TOP_in_query_expr127); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulequery_exprEx;
            	        }

            	        top = (pANTLR3_COMMON_TOKEN) MATCHT(NUMBER, &FOLLOW_NUMBER_in_query_expr131); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulequery_exprEx;
            	        }

            	        {

            	            #ifdef WINDOWS
            	            		__int64 d = (__int64)_atoi64((char*)(top->getText(top))->chars);
            	            #else
            	                  __int64 d = atoll((char*)(top->getText(top))->chars);
            	            #endif
            	            	    options.add("limit", d);
            	                	    cmd->setOptions(&options);
            	            	
            	        }

            	    }
            	    break;

                }
            }

            // /home/cross/workspace/djondb/db/grammars/dql.g:83:6: ( ALL_FIELDS | (x1= XPATH ( COMMA x2= XPATH )* ) )
            {
                int alt4=2;
                switch ( LA(1) ) 
                {
                case ALL_FIELDS:
                	{
                		alt4=1;
                	}
                    break;
                case XPATH:
                	{
                		alt4=2;
                	}
                    break;

                default:
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 4;
                    EXCEPTION->state        = 0;


                    goto rulequery_exprEx;
                }

                switch (alt4) 
                {
            	case 1:
            	    // /home/cross/workspace/djondb/db/grammars/dql.g:83:7: ALL_FIELDS
            	    {
            	         MATCHT(ALL_FIELDS, &FOLLOW_ALL_FIELDS_in_query_expr138); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulequery_exprEx;
            	        }

            	        {

            	            	    cmd->setSelect("*");
            	            	    allfields = true;
            	            	
            	        }

            	    }
            	    break;
            	case 2:
            	    // /home/cross/workspace/djondb/db/grammars/dql.g:86:5: (x1= XPATH ( COMMA x2= XPATH )* )
            	    {
            	        // /home/cross/workspace/djondb/db/grammars/dql.g:86:5: (x1= XPATH ( COMMA x2= XPATH )* )
            	        // /home/cross/workspace/djondb/db/grammars/dql.g:86:6: x1= XPATH ( COMMA x2= XPATH )*
            	        {
            	            x1 = (pANTLR3_COMMON_TOKEN) MATCHT(XPATH, &FOLLOW_XPATH_in_query_expr146); 
            	            if  (HASEXCEPTION())
            	            {
            	                goto rulequery_exprEx;
            	            }

            	            {

            	                	    std::string t1((char*)(x1->getText(x1))->chars);
            	                	    ms.writeRaw(t1.c_str(), t1.length());
            	                	
            	            }

            	            // /home/cross/workspace/djondb/db/grammars/dql.g:89:4: ( COMMA x2= XPATH )*

            	            for (;;)
            	            {
            	                int alt3=2;
            	                switch ( LA(1) ) 
            	                {
            	                case COMMA:
            	                	{
            	                		alt3=1;
            	                	}
            	                    break;

            	                }

            	                switch (alt3) 
            	                {
            	            	case 1:
            	            	    // /home/cross/workspace/djondb/db/grammars/dql.g:89:5: COMMA x2= XPATH
            	            	    {
            	            	         MATCHT(COMMA, &FOLLOW_COMMA_in_query_expr151); 
            	            	        if  (HASEXCEPTION())
            	            	        {
            	            	            goto rulequery_exprEx;
            	            	        }

            	            	        x2 = (pANTLR3_COMMON_TOKEN) MATCHT(XPATH, &FOLLOW_XPATH_in_query_expr155); 
            	            	        if  (HASEXCEPTION())
            	            	        {
            	            	            goto rulequery_exprEx;
            	            	        }

            	            	        {

            	            	            	    std::string t2((char*)(x2->getText(x2))->chars);
            	            	            	    ms.writeRaw(", ", 2);
            	            	            	    ms.writeRaw(t2.c_str(), t2.length());
            	            	            	
            	            	        }

            	            	    }
            	            	    break;

            	            	default:
            	            	    goto loop3;	/* break out of the loop */
            	            	    break;
            	                }
            	            }
            	            loop3: ; /* Jump out to here if this rule does not match */


            	        }

            	        {

            	            	
            	        }

            	    }
            	    break;

                }
            }
             MATCHT(FROM, &FOLLOW_FROM_in_query_expr165); 
            if  (HASEXCEPTION())
            {
                goto rulequery_exprEx;
            }

            d1 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_query_expr169); 
            if  (HASEXCEPTION())
            {
                goto rulequery_exprEx;
            }

            {

                	   if (!allfields) {
                	    cmd->setSelect(ms.toChars());
                	   }
                	    cmd->setDB(std::string((char*)(d1->getText(d1))->chars));
                	
            }
             MATCHT(COLON, &FOLLOW_COLON_in_query_expr173); 
            if  (HASEXCEPTION())
            {
                goto rulequery_exprEx;
            }

            ns=(pANTLR3_COMMON_TOKEN)LT(1);
            if ( LA(1) == ID || LA(1) == NS_ID )
            {
                CONSUME();
                PERRORRECOVERY=ANTLR3_FALSE;
            }
            else 
            {
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
                EXCEPTION->expectingSet = &FOLLOW_set_in_query_expr177;
                RECOVERFROMMISMATCHEDSET(&FOLLOW_set_in_query_expr177);    goto rulequery_exprEx;
            }

            {

                	    cmd->setNameSpace(std::string((char*)(ns->getText(ns))->chars));
                	
            }

            // /home/cross/workspace/djondb/db/grammars/dql.g:101:4: ( WHERE filter= filter_expr )?
            {
                int alt5=2;
                switch ( LA(1) ) 
                {
                    case WHERE:
                    	{
                    		alt5=1;
                    	}
                        break;
                }

                switch (alt5) 
                {
            	case 1:
            	    // /home/cross/workspace/djondb/db/grammars/dql.g:101:5: WHERE filter= filter_expr
            	    {
            	         MATCHT(WHERE, &FOLLOW_WHERE_in_query_expr188); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulequery_exprEx;
            	        }

            	        FOLLOWPUSH(FOLLOW_filter_expr_in_query_expr192);
            	        filter=filter_expr(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulequery_exprEx;
            	        }

            	        {

            	            	    cmd->setFilter(std::string((char*)(STRSTREAM->toStringTT(STRSTREAM, filter.start, filter.stop))->chars));
            	            	
            	        }

            	    }
            	    break;

                }
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulequery_exprEx; /* Prevent compiler warnings */
    rulequery_exprEx: ;




    return val;
}
/* $ANTLR end query_expr */

/** 
 * $ANTLR start insert_expr
 * /home/cross/workspace/djondb/db/grammars/dql.g:105:1: insert_expr returns [Command* val] : INSERT json_expr INTO db= ID COLON ns= ( ID | NS_ID ) ;
 */
static Command*
insert_expr(pdqlParser ctx)
{   
    Command* val = NULL;

    pANTLR3_COMMON_TOKEN    db;
    pANTLR3_COMMON_TOKEN    ns;
    dqlParser_json_expr_return json_expr6;
    #undef	RETURN_TYPE_json_expr6
    #define	RETURN_TYPE_json_expr6 dqlParser_json_expr_return

    /* Initialize rule variables
     */



         InsertCommand* cmd = new InsertCommand();
         val= cmd;

    db       = NULL;
    ns       = NULL;

    {
        // /home/cross/workspace/djondb/db/grammars/dql.g:109:3: ( INSERT json_expr INTO db= ID COLON ns= ( ID | NS_ID ) )
        // /home/cross/workspace/djondb/db/grammars/dql.g:109:5: INSERT json_expr INTO db= ID COLON ns= ( ID | NS_ID )
        {
             MATCHT(INSERT, &FOLLOW_INSERT_in_insert_expr213); 
            if  (HASEXCEPTION())
            {
                goto ruleinsert_exprEx;
            }

            FOLLOWPUSH(FOLLOW_json_expr_in_insert_expr215);
            json_expr6=json_expr(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleinsert_exprEx;
            }

            {

                		BSONObj* obj = BSONParser::parse((char*)(STRSTREAM->toStringTT(STRSTREAM, json_expr6.start, json_expr6.stop))->chars);
                		cmd->setBSON(obj);
                		if (!obj->has("_id")) { 
                		    std::string* id = uuid(); 
                		    obj->add("_id", const_cast<char*>(id->c_str())); 
                		    delete id; 
                		} 
                		if (!obj->has("_revision")) { 
                		    std::string* rev = uuid(); 
                		    obj->add("_revision", const_cast<char*>(rev->c_str())); 
                		    delete rev; 
                		} 
                	
            }
             MATCHT(INTO, &FOLLOW_INTO_in_insert_expr219); 
            if  (HASEXCEPTION())
            {
                goto ruleinsert_exprEx;
            }

            db = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_insert_expr223); 
            if  (HASEXCEPTION())
            {
                goto ruleinsert_exprEx;
            }

             MATCHT(COLON, &FOLLOW_COLON_in_insert_expr225); 
            if  (HASEXCEPTION())
            {
                goto ruleinsert_exprEx;
            }

            ns=(pANTLR3_COMMON_TOKEN)LT(1);
            if ( LA(1) == ID || LA(1) == NS_ID )
            {
                CONSUME();
                PERRORRECOVERY=ANTLR3_FALSE;
            }
            else 
            {
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
                EXCEPTION->expectingSet = &FOLLOW_set_in_insert_expr229;
                RECOVERFROMMISMATCHEDSET(&FOLLOW_set_in_insert_expr229);    goto ruleinsert_exprEx;
            }

            {

                	    cmd->setDB(std::string((char*)(db->getText(db))->chars));
                	    cmd->setNameSpace(std::string((char*)(ns->getText(ns))->chars));
                	
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleinsert_exprEx; /* Prevent compiler warnings */
    ruleinsert_exprEx: ;




    return val;
}
/* $ANTLR end insert_expr */

/** 
 * $ANTLR start update_expr
 * /home/cross/workspace/djondb/db/grammars/dql.g:127:1: update_expr returns [Command* val] : UPDATE json_expr INTO db= ID COLON ns= ( ID | NS_ID ) ;
 */
static Command*
update_expr(pdqlParser ctx)
{   
    Command* val = NULL;

    pANTLR3_COMMON_TOKEN    db;
    pANTLR3_COMMON_TOKEN    ns;
    dqlParser_json_expr_return json_expr7;
    #undef	RETURN_TYPE_json_expr7
    #define	RETURN_TYPE_json_expr7 dqlParser_json_expr_return

    /* Initialize rule variables
     */



         UpdateCommand* cmd = new UpdateCommand();
         val= cmd;

    db       = NULL;
    ns       = NULL;

    {
        // /home/cross/workspace/djondb/db/grammars/dql.g:131:3: ( UPDATE json_expr INTO db= ID COLON ns= ( ID | NS_ID ) )
        // /home/cross/workspace/djondb/db/grammars/dql.g:131:5: UPDATE json_expr INTO db= ID COLON ns= ( ID | NS_ID )
        {
             MATCHT(UPDATE, &FOLLOW_UPDATE_in_update_expr254); 
            if  (HASEXCEPTION())
            {
                goto ruleupdate_exprEx;
            }

            FOLLOWPUSH(FOLLOW_json_expr_in_update_expr256);
            json_expr7=json_expr(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleupdate_exprEx;
            }

            {

                		BSONObj* obj = BSONParser::parse((char*)(STRSTREAM->toStringTT(STRSTREAM, json_expr7.start, json_expr7.stop))->chars);
                		
                		if (!obj->has("_id") || !obj->has("_revision")) {
                			delete obj;
                			delete cmd;
                			throw DjondbException(D_ERROR_INVALID_STATEMENT, "The update command requires a document with _id and _revision.");
                		}
                		cmd->setBSON(*obj);
                		delete obj;
                	
            }
             MATCHT(INTO, &FOLLOW_INTO_in_update_expr260); 
            if  (HASEXCEPTION())
            {
                goto ruleupdate_exprEx;
            }

            db = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_update_expr264); 
            if  (HASEXCEPTION())
            {
                goto ruleupdate_exprEx;
            }

             MATCHT(COLON, &FOLLOW_COLON_in_update_expr266); 
            if  (HASEXCEPTION())
            {
                goto ruleupdate_exprEx;
            }

            ns=(pANTLR3_COMMON_TOKEN)LT(1);
            if ( LA(1) == ID || LA(1) == NS_ID )
            {
                CONSUME();
                PERRORRECOVERY=ANTLR3_FALSE;
            }
            else 
            {
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
                EXCEPTION->expectingSet = &FOLLOW_set_in_update_expr270;
                RECOVERFROMMISMATCHEDSET(&FOLLOW_set_in_update_expr270);    goto ruleupdate_exprEx;
            }

            {

                	    cmd->setDB(std::string((char*)(db->getText(db))->chars));
                	    cmd->setNameSpace(std::string((char*)(ns->getText(ns))->chars));
                	
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleupdate_exprEx; /* Prevent compiler warnings */
    ruleupdate_exprEx: ;




    return val;
}
/* $ANTLR end update_expr */

/** 
 * $ANTLR start remove_expr
 * /home/cross/workspace/djondb/db/grammars/dql.g:146:1: remove_expr returns [Command* val] : REMOVE id= STRING ( WITH rev= STRING )? FROM db= ID COLON ns= ( ID | NS_ID ) ;
 */
static Command*
remove_expr(pdqlParser ctx)
{   
    Command* val = NULL;

    pANTLR3_COMMON_TOKEN    id;
    pANTLR3_COMMON_TOKEN    rev;
    pANTLR3_COMMON_TOKEN    db;
    pANTLR3_COMMON_TOKEN    ns;

    /* Initialize rule variables
     */



         RemoveCommand* cmd = new RemoveCommand();
         val= cmd;

    id       = NULL;
    rev       = NULL;
    db       = NULL;
    ns       = NULL;

    {
        // /home/cross/workspace/djondb/db/grammars/dql.g:150:2: ( REMOVE id= STRING ( WITH rev= STRING )? FROM db= ID COLON ns= ( ID | NS_ID ) )
        // /home/cross/workspace/djondb/db/grammars/dql.g:150:4: REMOVE id= STRING ( WITH rev= STRING )? FROM db= ID COLON ns= ( ID | NS_ID )
        {
             MATCHT(REMOVE, &FOLLOW_REMOVE_in_remove_expr296); 
            if  (HASEXCEPTION())
            {
                goto ruleremove_exprEx;
            }

            id = (pANTLR3_COMMON_TOKEN) MATCHT(STRING, &FOLLOW_STRING_in_remove_expr300); 
            if  (HASEXCEPTION())
            {
                goto ruleremove_exprEx;
            }

            {

                	    cmd->setId(std::string((char*)(id->getText(id))->chars));
                        
            }

            // /home/cross/workspace/djondb/db/grammars/dql.g:152:11: ( WITH rev= STRING )?
            {
                int alt6=2;
                switch ( LA(1) ) 
                {
                    case WITH:
                    	{
                    		alt6=1;
                    	}
                        break;
                }

                switch (alt6) 
                {
            	case 1:
            	    // /home/cross/workspace/djondb/db/grammars/dql.g:152:12: WITH rev= STRING
            	    {
            	         MATCHT(WITH, &FOLLOW_WITH_in_remove_expr305); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleremove_exprEx;
            	        }

            	        rev = (pANTLR3_COMMON_TOKEN) MATCHT(STRING, &FOLLOW_STRING_in_remove_expr309); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleremove_exprEx;
            	        }

            	        {

            	            	    cmd->setRevision(std::string((char*)(rev->getText(rev))->chars));
            	                    
            	        }

            	    }
            	    break;

                }
            }
             MATCHT(FROM, &FOLLOW_FROM_in_remove_expr315); 
            if  (HASEXCEPTION())
            {
                goto ruleremove_exprEx;
            }

            db = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_remove_expr319); 
            if  (HASEXCEPTION())
            {
                goto ruleremove_exprEx;
            }

             MATCHT(COLON, &FOLLOW_COLON_in_remove_expr321); 
            if  (HASEXCEPTION())
            {
                goto ruleremove_exprEx;
            }

            ns=(pANTLR3_COMMON_TOKEN)LT(1);
            if ( LA(1) == ID || LA(1) == NS_ID )
            {
                CONSUME();
                PERRORRECOVERY=ANTLR3_FALSE;
            }
            else 
            {
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
                EXCEPTION->expectingSet = &FOLLOW_set_in_remove_expr325;
                RECOVERFROMMISMATCHEDSET(&FOLLOW_set_in_remove_expr325);    goto ruleremove_exprEx;
            }

            {

                	    cmd->setDB(std::string((char*)(db->getText(db))->chars));
                	    cmd->setNameSpace(std::string((char*)(ns->getText(ns))->chars));
                	
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleremove_exprEx; /* Prevent compiler warnings */
    ruleremove_exprEx: ;




    return val;
}
/* $ANTLR end remove_expr */

/** 
 * $ANTLR start filter_expr
 * /home/cross/workspace/djondb/db/grammars/dql.g:159:1: filter_expr : boolean_expr ;
 */
static dqlParser_filter_expr_return
filter_expr(pdqlParser ctx)
{   
    dqlParser_filter_expr_return retval;

    /* Initialize rule variables
     */


    retval.start = LT(1); retval.stop = retval.start;

    {
        // /home/cross/workspace/djondb/db/grammars/dql.g:159:13: ( boolean_expr )
        // /home/cross/workspace/djondb/db/grammars/dql.g:159:15: boolean_expr
        {
            FOLLOWPUSH(FOLLOW_boolean_expr_in_filter_expr341);
            boolean_expr(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulefilter_exprEx;
            }


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulefilter_exprEx; /* Prevent compiler warnings */
    rulefilter_exprEx: ;
    retval.stop = LT(-1);




    return retval;
}
/* $ANTLR end filter_expr */

/** 
 * $ANTLR start boolean_expr
 * /home/cross/workspace/djondb/db/grammars/dql.g:161:1: boolean_expr : b1= boolean_term ( OR b2= boolean_term )* ;
 */
static void
boolean_expr(pdqlParser ctx)
{   
    /* Initialize rule variables
     */


    {
        // /home/cross/workspace/djondb/db/grammars/dql.g:162:2: (b1= boolean_term ( OR b2= boolean_term )* )
        // /home/cross/workspace/djondb/db/grammars/dql.g:162:4: b1= boolean_term ( OR b2= boolean_term )*
        {
            FOLLOWPUSH(FOLLOW_boolean_term_in_boolean_expr354);
            boolean_term(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleboolean_exprEx;
            }


            // /home/cross/workspace/djondb/db/grammars/dql.g:163:2: ( OR b2= boolean_term )*

            for (;;)
            {
                int alt7=2;
                switch ( LA(1) ) 
                {
                case OR:
                	{
                		alt7=1;
                	}
                    break;

                }

                switch (alt7) 
                {
            	case 1:
            	    // /home/cross/workspace/djondb/db/grammars/dql.g:163:3: OR b2= boolean_term
            	    {
            	         MATCHT(OR, &FOLLOW_OR_in_boolean_expr359); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleboolean_exprEx;
            	        }

            	        FOLLOWPUSH(FOLLOW_boolean_term_in_boolean_expr363);
            	        boolean_term(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleboolean_exprEx;
            	        }


            	    }
            	    break;

            	default:
            	    goto loop7;	/* break out of the loop */
            	    break;
                }
            }
            loop7: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleboolean_exprEx; /* Prevent compiler warnings */
    ruleboolean_exprEx: ;




    return ;
}
/* $ANTLR end boolean_expr */

/** 
 * $ANTLR start boolean_term
 * /home/cross/workspace/djondb/db/grammars/dql.g:165:1: boolean_term : b1= boolean_value ( AND b2= boolean_value )* ;
 */
static void
boolean_term(pdqlParser ctx)
{   
    /* Initialize rule variables
     */


    {
        // /home/cross/workspace/djondb/db/grammars/dql.g:166:2: (b1= boolean_value ( AND b2= boolean_value )* )
        // /home/cross/workspace/djondb/db/grammars/dql.g:166:4: b1= boolean_value ( AND b2= boolean_value )*
        {
            FOLLOWPUSH(FOLLOW_boolean_value_in_boolean_term377);
            boolean_value(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleboolean_termEx;
            }


            // /home/cross/workspace/djondb/db/grammars/dql.g:167:3: ( AND b2= boolean_value )*

            for (;;)
            {
                int alt8=2;
                switch ( LA(1) ) 
                {
                case AND:
                	{
                		alt8=1;
                	}
                    break;

                }

                switch (alt8) 
                {
            	case 1:
            	    // /home/cross/workspace/djondb/db/grammars/dql.g:167:4: AND b2= boolean_value
            	    {
            	         MATCHT(AND, &FOLLOW_AND_in_boolean_term382); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleboolean_termEx;
            	        }

            	        FOLLOWPUSH(FOLLOW_boolean_value_in_boolean_term386);
            	        boolean_value(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleboolean_termEx;
            	        }


            	    }
            	    break;

            	default:
            	    goto loop8;	/* break out of the loop */
            	    break;
                }
            }
            loop8: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleboolean_termEx; /* Prevent compiler warnings */
    ruleboolean_termEx: ;




    return ;
}
/* $ANTLR end boolean_term */

/** 
 * $ANTLR start boolean_value
 * /home/cross/workspace/djondb/db/grammars/dql.g:169:1: boolean_value : ( parenthesized_boolean | nonparentherized_boolean );
 */
static void
boolean_value(pdqlParser ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  /home/cross/workspace/djondb/db/grammars/dql.g:170:2: ( parenthesized_boolean | nonparentherized_boolean )
            
            ANTLR3_UINT32 alt9;

            alt9=2;

            switch ( LA(1) ) 
            {
            case LPAREN:
            	{
            		alt9=1;
            	}
                break;
            case NUMBER:
            case XPATH:
            case STRING:
            case EXISTS:
            case NOT:
            case TRUE:
            case FALSE:
            	{
            		alt9=2;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 9;
                EXCEPTION->state        = 0;


                goto ruleboolean_valueEx;
            }

            switch (alt9) 
            {
        	case 1:
        	    // /home/cross/workspace/djondb/db/grammars/dql.g:170:4: parenthesized_boolean
        	    {
        	        FOLLOWPUSH(FOLLOW_parenthesized_boolean_in_boolean_value398);
        	        parenthesized_boolean(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleboolean_valueEx;
        	        }


        	    }
        	    break;
        	case 2:
        	    // /home/cross/workspace/djondb/db/grammars/dql.g:171:2: nonparentherized_boolean
        	    {
        	        FOLLOWPUSH(FOLLOW_nonparentherized_boolean_in_boolean_value404);
        	        nonparentherized_boolean(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleboolean_valueEx;
        	        }


        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleboolean_valueEx; /* Prevent compiler warnings */
    ruleboolean_valueEx: ;




    return ;
}
/* $ANTLR end boolean_value */

/** 
 * $ANTLR start parenthesized_boolean
 * /home/cross/workspace/djondb/db/grammars/dql.g:173:1: parenthesized_boolean : LPAREN boolean_expr RPAREN ;
 */
static void
parenthesized_boolean(pdqlParser ctx)
{   
    /* Initialize rule variables
     */


    {
        // /home/cross/workspace/djondb/db/grammars/dql.g:174:2: ( LPAREN boolean_expr RPAREN )
        // /home/cross/workspace/djondb/db/grammars/dql.g:174:4: LPAREN boolean_expr RPAREN
        {
             MATCHT(LPAREN, &FOLLOW_LPAREN_in_parenthesized_boolean415); 
            if  (HASEXCEPTION())
            {
                goto ruleparenthesized_booleanEx;
            }

            FOLLOWPUSH(FOLLOW_boolean_expr_in_parenthesized_boolean417);
            boolean_expr(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleparenthesized_booleanEx;
            }

             MATCHT(RPAREN, &FOLLOW_RPAREN_in_parenthesized_boolean419); 
            if  (HASEXCEPTION())
            {
                goto ruleparenthesized_booleanEx;
            }


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleparenthesized_booleanEx; /* Prevent compiler warnings */
    ruleparenthesized_booleanEx: ;




    return ;
}
/* $ANTLR end parenthesized_boolean */

/** 
 * $ANTLR start nonparentherized_boolean
 * /home/cross/workspace/djondb/db/grammars/dql.g:176:1: nonparentherized_boolean : u1= unary_expr ( OPER u2= unary_expr )* ;
 */
static void
nonparentherized_boolean(pdqlParser ctx)
{   
    /* Initialize rule variables
     */


    {
        // /home/cross/workspace/djondb/db/grammars/dql.g:177:2: (u1= unary_expr ( OPER u2= unary_expr )* )
        // /home/cross/workspace/djondb/db/grammars/dql.g:177:4: u1= unary_expr ( OPER u2= unary_expr )*
        {
            FOLLOWPUSH(FOLLOW_unary_expr_in_nonparentherized_boolean432);
            unary_expr(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulenonparentherized_booleanEx;
            }


            // /home/cross/workspace/djondb/db/grammars/dql.g:177:19: ( OPER u2= unary_expr )*

            for (;;)
            {
                int alt10=2;
                switch ( LA(1) ) 
                {
                case OPER:
                	{
                		alt10=1;
                	}
                    break;

                }

                switch (alt10) 
                {
            	case 1:
            	    // /home/cross/workspace/djondb/db/grammars/dql.g:177:21: OPER u2= unary_expr
            	    {
            	         MATCHT(OPER, &FOLLOW_OPER_in_nonparentherized_boolean437); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulenonparentherized_booleanEx;
            	        }

            	        FOLLOWPUSH(FOLLOW_unary_expr_in_nonparentherized_boolean441);
            	        unary_expr(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulenonparentherized_booleanEx;
            	        }


            	    }
            	    break;

            	default:
            	    goto loop10;	/* break out of the loop */
            	    break;
                }
            }
            loop10: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulenonparentherized_booleanEx; /* Prevent compiler warnings */
    rulenonparentherized_booleanEx: ;




    return ;
}
/* $ANTLR end nonparentherized_boolean */

/** 
 * $ANTLR start unary_expr
 * /home/cross/workspace/djondb/db/grammars/dql.g:179:1: unary_expr : (c1= constant_expr | x1= xpath_expr | e1= exists_expr | n1= not_expr ) ;
 */
static void
unary_expr(pdqlParser ctx)
{   
    /* Initialize rule variables
     */


    {
        // /home/cross/workspace/djondb/db/grammars/dql.g:180:2: ( (c1= constant_expr | x1= xpath_expr | e1= exists_expr | n1= not_expr ) )
        // /home/cross/workspace/djondb/db/grammars/dql.g:180:4: (c1= constant_expr | x1= xpath_expr | e1= exists_expr | n1= not_expr )
        {

            // /home/cross/workspace/djondb/db/grammars/dql.g:180:4: (c1= constant_expr | x1= xpath_expr | e1= exists_expr | n1= not_expr )
            {
                int alt11=4;
                switch ( LA(1) ) 
                {
                case NUMBER:
                case STRING:
                case TRUE:
                case FALSE:
                	{
                		alt11=1;
                	}
                    break;
                case XPATH:
                	{
                		alt11=2;
                	}
                    break;
                case EXISTS:
                	{
                		alt11=3;
                	}
                    break;
                case NOT:
                	{
                		alt11=4;
                	}
                    break;

                default:
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 11;
                    EXCEPTION->state        = 0;


                    goto ruleunary_exprEx;
                }

                switch (alt11) 
                {
            	case 1:
            	    // /home/cross/workspace/djondb/db/grammars/dql.g:180:5: c1= constant_expr
            	    {
            	        FOLLOWPUSH(FOLLOW_constant_expr_in_unary_expr456);
            	        constant_expr(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleunary_exprEx;
            	        }


            	    }
            	    break;
            	case 2:
            	    // /home/cross/workspace/djondb/db/grammars/dql.g:180:24: x1= xpath_expr
            	    {
            	        FOLLOWPUSH(FOLLOW_xpath_expr_in_unary_expr462);
            	        xpath_expr(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleunary_exprEx;
            	        }


            	    }
            	    break;
            	case 3:
            	    // /home/cross/workspace/djondb/db/grammars/dql.g:180:40: e1= exists_expr
            	    {
            	        FOLLOWPUSH(FOLLOW_exists_expr_in_unary_expr468);
            	        exists_expr(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleunary_exprEx;
            	        }


            	    }
            	    break;
            	case 4:
            	    // /home/cross/workspace/djondb/db/grammars/dql.g:180:57: n1= not_expr
            	    {
            	        FOLLOWPUSH(FOLLOW_not_expr_in_unary_expr474);
            	        not_expr(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleunary_exprEx;
            	        }


            	    }
            	    break;

                }
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleunary_exprEx; /* Prevent compiler warnings */
    ruleunary_exprEx: ;




    return ;
}
/* $ANTLR end unary_expr */

/** 
 * $ANTLR start exists_expr
 * /home/cross/workspace/djondb/db/grammars/dql.g:182:1: exists_expr : EXISTS LPAREN xpath_expr RPAREN ;
 */
static void
exists_expr(pdqlParser ctx)
{   
    /* Initialize rule variables
     */


    {
        // /home/cross/workspace/djondb/db/grammars/dql.g:183:2: ( EXISTS LPAREN xpath_expr RPAREN )
        // /home/cross/workspace/djondb/db/grammars/dql.g:183:4: EXISTS LPAREN xpath_expr RPAREN
        {
             MATCHT(EXISTS, &FOLLOW_EXISTS_in_exists_expr484); 
            if  (HASEXCEPTION())
            {
                goto ruleexists_exprEx;
            }

             MATCHT(LPAREN, &FOLLOW_LPAREN_in_exists_expr486); 
            if  (HASEXCEPTION())
            {
                goto ruleexists_exprEx;
            }

            FOLLOWPUSH(FOLLOW_xpath_expr_in_exists_expr488);
            xpath_expr(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleexists_exprEx;
            }

             MATCHT(RPAREN, &FOLLOW_RPAREN_in_exists_expr490); 
            if  (HASEXCEPTION())
            {
                goto ruleexists_exprEx;
            }


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleexists_exprEx; /* Prevent compiler warnings */
    ruleexists_exprEx: ;




    return ;
}
/* $ANTLR end exists_expr */

/** 
 * $ANTLR start not_expr
 * /home/cross/workspace/djondb/db/grammars/dql.g:185:1: not_expr : ( ( NOT LPAREN e1= exists_expr RPAREN ) | ( NOT e2= exists_expr ) );
 */
static void
not_expr(pdqlParser ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  /home/cross/workspace/djondb/db/grammars/dql.g:186:2: ( ( NOT LPAREN e1= exists_expr RPAREN ) | ( NOT e2= exists_expr ) )
            
            ANTLR3_UINT32 alt12;

            alt12=2;

            switch ( LA(1) ) 
            {
            case NOT:
            	{
            		switch ( LA(2) ) 
            		{
            		case LPAREN:
            			{
            				alt12=1;
            			}
            		    break;
            		case EXISTS:
            			{
            				alt12=2;
            			}
            		    break;

            		default:
            		    CONSTRUCTEX();
            		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		    EXCEPTION->message      = (void *)"";
            		    EXCEPTION->decisionNum  = 12;
            		    EXCEPTION->state        = 1;


            		    goto rulenot_exprEx;
            		}

            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 12;
                EXCEPTION->state        = 0;


                goto rulenot_exprEx;
            }

            switch (alt12) 
            {
        	case 1:
        	    // /home/cross/workspace/djondb/db/grammars/dql.g:186:4: ( NOT LPAREN e1= exists_expr RPAREN )
        	    {
        	        // /home/cross/workspace/djondb/db/grammars/dql.g:186:4: ( NOT LPAREN e1= exists_expr RPAREN )
        	        // /home/cross/workspace/djondb/db/grammars/dql.g:186:5: NOT LPAREN e1= exists_expr RPAREN
        	        {
        	             MATCHT(NOT, &FOLLOW_NOT_in_not_expr501); 
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulenot_exprEx;
        	            }

        	             MATCHT(LPAREN, &FOLLOW_LPAREN_in_not_expr503); 
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulenot_exprEx;
        	            }

        	            FOLLOWPUSH(FOLLOW_exists_expr_in_not_expr507);
        	            exists_expr(ctx);

        	            FOLLOWPOP();
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulenot_exprEx;
        	            }

        	             MATCHT(RPAREN, &FOLLOW_RPAREN_in_not_expr509); 
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulenot_exprEx;
        	            }


        	        }


        	    }
        	    break;
        	case 2:
        	    // /home/cross/workspace/djondb/db/grammars/dql.g:186:41: ( NOT e2= exists_expr )
        	    {
        	        // /home/cross/workspace/djondb/db/grammars/dql.g:186:41: ( NOT e2= exists_expr )
        	        // /home/cross/workspace/djondb/db/grammars/dql.g:186:42: NOT e2= exists_expr
        	        {
        	             MATCHT(NOT, &FOLLOW_NOT_in_not_expr515); 
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulenot_exprEx;
        	            }

        	            FOLLOWPUSH(FOLLOW_exists_expr_in_not_expr519);
        	            exists_expr(ctx);

        	            FOLLOWPOP();
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulenot_exprEx;
        	            }


        	        }


        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulenot_exprEx; /* Prevent compiler warnings */
    rulenot_exprEx: ;




    return ;
}
/* $ANTLR end not_expr */

/** 
 * $ANTLR start xpath_expr
 * /home/cross/workspace/djondb/db/grammars/dql.g:188:1: xpath_expr : XPATH ;
 */
static void
xpath_expr(pdqlParser ctx)
{   
    /* Initialize rule variables
     */


    {
        // /home/cross/workspace/djondb/db/grammars/dql.g:189:2: ( XPATH )
        // /home/cross/workspace/djondb/db/grammars/dql.g:189:4: XPATH
        {
             MATCHT(XPATH, &FOLLOW_XPATH_in_xpath_expr530); 
            if  (HASEXCEPTION())
            {
                goto rulexpath_exprEx;
            }


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulexpath_exprEx; /* Prevent compiler warnings */
    rulexpath_exprEx: ;




    return ;
}
/* $ANTLR end xpath_expr */

/** 
 * $ANTLR start id_expr
 * /home/cross/workspace/djondb/db/grammars/dql.g:191:1: id_expr : ID ;
 */
static void
id_expr(pdqlParser ctx)
{   
    /* Initialize rule variables
     */


    {
        // /home/cross/workspace/djondb/db/grammars/dql.g:191:9: ( ID )
        // /home/cross/workspace/djondb/db/grammars/dql.g:191:11: ID
        {
             MATCHT(ID, &FOLLOW_ID_in_id_expr538); 
            if  (HASEXCEPTION())
            {
                goto ruleid_exprEx;
            }


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleid_exprEx; /* Prevent compiler warnings */
    ruleid_exprEx: ;




    return ;
}
/* $ANTLR end id_expr */

/** 
 * $ANTLR start constant_expr
 * /home/cross/workspace/djondb/db/grammars/dql.g:193:1: constant_expr : ( NUMBER | STRING | TRUE | FALSE ) ;
 */
static void
constant_expr(pdqlParser ctx)
{   
    /* Initialize rule variables
     */


    {
        // /home/cross/workspace/djondb/db/grammars/dql.g:194:2: ( ( NUMBER | STRING | TRUE | FALSE ) )
        // /home/cross/workspace/djondb/db/grammars/dql.g:194:4: ( NUMBER | STRING | TRUE | FALSE )
        {
            if ( LA(1) == NUMBER || LA(1) == STRING || ((LA(1) >= TRUE) && (LA(1) <= FALSE)) )
            {
                CONSUME();
                PERRORRECOVERY=ANTLR3_FALSE;
            }
            else 
            {
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
                EXCEPTION->expectingSet = &FOLLOW_set_in_constant_expr547;
                RECOVERFROMMISMATCHEDSET(&FOLLOW_set_in_constant_expr547);    goto ruleconstant_exprEx;
            }


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleconstant_exprEx; /* Prevent compiler warnings */
    ruleconstant_exprEx: ;




    return ;
}
/* $ANTLR end constant_expr */

/** 
 * $ANTLR start json_const
 * /home/cross/workspace/djondb/db/grammars/dql.g:197:1: json_const : ( STRING | NUMBER | FLOAT | ( TRUE | FALSE ) | json_array_expr | json_expr );
 */
static void
json_const(pdqlParser ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  /home/cross/workspace/djondb/db/grammars/dql.g:198:2: ( STRING | NUMBER | FLOAT | ( TRUE | FALSE ) | json_array_expr | json_expr )
            
            ANTLR3_UINT32 alt13;

            alt13=6;

            switch ( LA(1) ) 
            {
            case STRING:
            	{
            		alt13=1;
            	}
                break;
            case NUMBER:
            	{
            		alt13=2;
            	}
                break;
            case FLOAT:
            	{
            		alt13=3;
            	}
                break;
            case TRUE:
            case FALSE:
            	{
            		alt13=4;
            	}
                break;
            case LBRAK:
            	{
            		alt13=5;
            	}
                break;
            case LBRAN:
            	{
            		alt13=6;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 13;
                EXCEPTION->state        = 0;


                goto rulejson_constEx;
            }

            switch (alt13) 
            {
        	case 1:
        	    // /home/cross/workspace/djondb/db/grammars/dql.g:198:4: STRING
        	    {
        	         MATCHT(STRING, &FOLLOW_STRING_in_json_const571); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulejson_constEx;
        	        }


        	    }
        	    break;
        	case 2:
        	    // /home/cross/workspace/djondb/db/grammars/dql.g:199:4: NUMBER
        	    {
        	         MATCHT(NUMBER, &FOLLOW_NUMBER_in_json_const577); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulejson_constEx;
        	        }


        	    }
        	    break;
        	case 3:
        	    // /home/cross/workspace/djondb/db/grammars/dql.g:200:4: FLOAT
        	    {
        	         MATCHT(FLOAT, &FOLLOW_FLOAT_in_json_const583); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulejson_constEx;
        	        }


        	    }
        	    break;
        	case 4:
        	    // /home/cross/workspace/djondb/db/grammars/dql.g:201:4: ( TRUE | FALSE )
        	    {
        	        if ( ((LA(1) >= TRUE) && (LA(1) <= FALSE)) )
        	        {
        	            CONSUME();
        	            PERRORRECOVERY=ANTLR3_FALSE;
        	        }
        	        else 
        	        {
        	            CONSTRUCTEX();
        	            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
        	            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
        	            EXCEPTION->expectingSet = &FOLLOW_set_in_json_const588;
        	            RECOVERFROMMISMATCHEDSET(&FOLLOW_set_in_json_const588);    goto rulejson_constEx;
        	        }


        	    }
        	    break;
        	case 5:
        	    // /home/cross/workspace/djondb/db/grammars/dql.g:203:7: json_array_expr
        	    {
        	        FOLLOWPUSH(FOLLOW_json_array_expr_in_json_const603);
        	        json_array_expr(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulejson_constEx;
        	        }


        	    }
        	    break;
        	case 6:
        	    // /home/cross/workspace/djondb/db/grammars/dql.g:204:4: json_expr
        	    {
        	        FOLLOWPUSH(FOLLOW_json_expr_in_json_const608);
        	        json_expr(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulejson_constEx;
        	        }


        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulejson_constEx; /* Prevent compiler warnings */
    rulejson_constEx: ;




    return ;
}
/* $ANTLR end json_const */

/** 
 * $ANTLR start operand_expr
 * /home/cross/workspace/djondb/db/grammars/dql.g:205:1: operand_expr : OPER ;
 */
static void
operand_expr(pdqlParser ctx)
{   
    /* Initialize rule variables
     */


    {
        // /home/cross/workspace/djondb/db/grammars/dql.g:206:2: ( OPER )
        // /home/cross/workspace/djondb/db/grammars/dql.g:206:4: OPER
        {
             MATCHT(OPER, &FOLLOW_OPER_in_operand_expr616); 
            if  (HASEXCEPTION())
            {
                goto ruleoperand_exprEx;
            }


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleoperand_exprEx; /* Prevent compiler warnings */
    ruleoperand_exprEx: ;




    return ;
}
/* $ANTLR end operand_expr */

/** 
 * $ANTLR start json_array_expr
 * /home/cross/workspace/djondb/db/grammars/dql.g:209:1: json_array_expr : LBRAK j1= json_expr ( COMMA j2= json_expr )* RBRAK ;
 */
static void
json_array_expr(pdqlParser ctx)
{   
    dqlParser_json_expr_return j1;
    #undef	RETURN_TYPE_j1
    #define	RETURN_TYPE_j1 dqlParser_json_expr_return

    dqlParser_json_expr_return j2;
    #undef	RETURN_TYPE_j2
    #define	RETURN_TYPE_j2 dqlParser_json_expr_return

    /* Initialize rule variables
     */





    {
        // /home/cross/workspace/djondb/db/grammars/dql.g:210:2: ( LBRAK j1= json_expr ( COMMA j2= json_expr )* RBRAK )
        // /home/cross/workspace/djondb/db/grammars/dql.g:210:4: LBRAK j1= json_expr ( COMMA j2= json_expr )* RBRAK
        {
             MATCHT(LBRAK, &FOLLOW_LBRAK_in_json_array_expr627); 
            if  (HASEXCEPTION())
            {
                goto rulejson_array_exprEx;
            }

            FOLLOWPUSH(FOLLOW_json_expr_in_json_array_expr631);
            j1=json_expr(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulejson_array_exprEx;
            }


            // /home/cross/workspace/djondb/db/grammars/dql.g:211:2: ( COMMA j2= json_expr )*

            for (;;)
            {
                int alt14=2;
                switch ( LA(1) ) 
                {
                case COMMA:
                	{
                		alt14=1;
                	}
                    break;

                }

                switch (alt14) 
                {
            	case 1:
            	    // /home/cross/workspace/djondb/db/grammars/dql.g:211:3: COMMA j2= json_expr
            	    {
            	         MATCHT(COMMA, &FOLLOW_COMMA_in_json_array_expr636); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulejson_array_exprEx;
            	        }

            	        FOLLOWPUSH(FOLLOW_json_expr_in_json_array_expr640);
            	        j2=json_expr(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulejson_array_exprEx;
            	        }


            	    }
            	    break;

            	default:
            	    goto loop14;	/* break out of the loop */
            	    break;
                }
            }
            loop14: ; /* Jump out to here if this rule does not match */

             MATCHT(RBRAK, &FOLLOW_RBRAK_in_json_array_expr644); 
            if  (HASEXCEPTION())
            {
                goto rulejson_array_exprEx;
            }


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulejson_array_exprEx; /* Prevent compiler warnings */
    rulejson_array_exprEx: ;




    return ;
}
/* $ANTLR end json_array_expr */

/** 
 * $ANTLR start json_expr
 * /home/cross/workspace/djondb/db/grammars/dql.g:213:1: json_expr : LBRAN (n1= json_fieldname COLON v1= json_const )? ( COMMA n2= json_fieldname COLON v2= json_const )* RBRAN ;
 */
static dqlParser_json_expr_return
json_expr(pdqlParser ctx)
{   
    dqlParser_json_expr_return retval;

    /* Initialize rule variables
     */


    retval.start = LT(1); retval.stop = retval.start;

    {
        // /home/cross/workspace/djondb/db/grammars/dql.g:214:1: ( LBRAN (n1= json_fieldname COLON v1= json_const )? ( COMMA n2= json_fieldname COLON v2= json_const )* RBRAN )
        // /home/cross/workspace/djondb/db/grammars/dql.g:214:3: LBRAN (n1= json_fieldname COLON v1= json_const )? ( COMMA n2= json_fieldname COLON v2= json_const )* RBRAN
        {
             MATCHT(LBRAN, &FOLLOW_LBRAN_in_json_expr653); 
            if  (HASEXCEPTION())
            {
                goto rulejson_exprEx;
            }


            // /home/cross/workspace/djondb/db/grammars/dql.g:214:9: (n1= json_fieldname COLON v1= json_const )?
            {
                int alt15=2;
                switch ( LA(1) ) 
                {
                    case ID:
                    case STRING:
                    	{
                    		alt15=1;
                    	}
                        break;
                }

                switch (alt15) 
                {
            	case 1:
            	    // /home/cross/workspace/djondb/db/grammars/dql.g:214:10: n1= json_fieldname COLON v1= json_const
            	    {
            	        FOLLOWPUSH(FOLLOW_json_fieldname_in_json_expr658);
            	        json_fieldname(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulejson_exprEx;
            	        }

            	         MATCHT(COLON, &FOLLOW_COLON_in_json_expr660); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulejson_exprEx;
            	        }

            	        FOLLOWPUSH(FOLLOW_json_const_in_json_expr664);
            	        json_const(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulejson_exprEx;
            	        }


            	    }
            	    break;

                }
            }

            // /home/cross/workspace/djondb/db/grammars/dql.g:214:50: ( COMMA n2= json_fieldname COLON v2= json_const )*

            for (;;)
            {
                int alt16=2;
                switch ( LA(1) ) 
                {
                case COMMA:
                	{
                		alt16=1;
                	}
                    break;

                }

                switch (alt16) 
                {
            	case 1:
            	    // /home/cross/workspace/djondb/db/grammars/dql.g:214:51: COMMA n2= json_fieldname COLON v2= json_const
            	    {
            	         MATCHT(COMMA, &FOLLOW_COMMA_in_json_expr669); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulejson_exprEx;
            	        }

            	        FOLLOWPUSH(FOLLOW_json_fieldname_in_json_expr673);
            	        json_fieldname(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulejson_exprEx;
            	        }

            	         MATCHT(COLON, &FOLLOW_COLON_in_json_expr675); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulejson_exprEx;
            	        }

            	        FOLLOWPUSH(FOLLOW_json_const_in_json_expr679);
            	        json_const(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulejson_exprEx;
            	        }


            	    }
            	    break;

            	default:
            	    goto loop16;	/* break out of the loop */
            	    break;
                }
            }
            loop16: ; /* Jump out to here if this rule does not match */

             MATCHT(RBRAN, &FOLLOW_RBRAN_in_json_expr683); 
            if  (HASEXCEPTION())
            {
                goto rulejson_exprEx;
            }


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulejson_exprEx; /* Prevent compiler warnings */
    rulejson_exprEx: ;
    retval.stop = LT(-1);




    return retval;
}
/* $ANTLR end json_expr */

/** 
 * $ANTLR start json_fieldname
 * /home/cross/workspace/djondb/db/grammars/dql.g:216:1: json_fieldname : ( STRING | ID );
 */
static void
json_fieldname(pdqlParser ctx)
{   
    /* Initialize rule variables
     */


    {
        // /home/cross/workspace/djondb/db/grammars/dql.g:217:2: ( STRING | ID )
        // /home/cross/workspace/djondb/db/grammars/dql.g:
        {
            if ( LA(1) == ID || LA(1) == STRING )
            {
                CONSUME();
                PERRORRECOVERY=ANTLR3_FALSE;
            }
            else 
            {
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
                EXCEPTION->expectingSet = &FOLLOW_set_in_json_fieldname0;
                RECOVERFROMMISMATCHEDSET(&FOLLOW_set_in_json_fieldname0);    goto rulejson_fieldnameEx;
            }


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulejson_fieldnameEx; /* Prevent compiler warnings */
    rulejson_fieldnameEx: ;




    return ;
}
/* $ANTLR end json_fieldname */
/* End of parsing rules
 * ==============================================
 */

/* ==============================================
 * Syntactic predicates
 */
/* End of syntactic predicates
 * ==============================================
 */

 
 



/* End of code
 * =============================================================================
 */
